

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed May 31 20:58:50 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           ; Version 1.42
    49                           ; Generated 13/04/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F46K22 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	idataCOMRAM
    84  001880                     __pidataCOMRAM:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _kiwi_frequence
    88  001880  23                 	db	35
    89  001881  47                 	db	71
    90                           
    91                           ;initializer for _kiwi_length
    92  001882  02                 	db	2
    93  0000                     _ANSELBbits	set	3897
    94  0000                     _LATD	set	3980
    95  0000                     _PORTD	set	3971
    96  0000                     _LATDbits	set	3980
    97  0000                     _TRISDbits	set	3989
    98  0000                     _PR2bits	set	4027
    99  0000                     _CCPR1Lbits	set	4030
   100  0000                     _CCP1CONbits	set	4029
   101  0000                     _T2CONbits	set	4026
   102  0000                     _LATCbits	set	3979
   103  0000                     _TRISCbits	set	3988
   104  0000                     _INTCON3bits	set	4080
   105  0000                     _LATBbits	set	3978
   106  0000                     _TRISBbits	set	3987
   107  0000                     _INTCONbits	set	4082
   108  0000                     _INTCON2bits	set	4081
   109                           
   110                           	psect	smallconst
   111  001000                     __psmallconst:
   112                           	opt stack 0
   113  001000  00                 	db	0
   114  001001  30                 	db	48	;'0'
   115  001002  31                 	db	49	;'1'
   116  001003  32                 	db	50	;'2'
   117  001004  33                 	db	51	;'3'
   118  001005  34                 	db	52	;'4'
   119  001006  35                 	db	53	;'5'
   120  001007  36                 	db	54	;'6'
   121  001008  37                 	db	55	;'7'
   122  001009  38                 	db	56	;'8'
   123  00100A  39                 	db	57	;'9'
   124  00100B  41                 	db	65	;'A'
   125  00100C  42                 	db	66	;'B'
   126  00100D  43                 	db	67	;'C'
   127  00100E  44                 	db	68	;'D'
   128  00100F  45                 	db	69	;'E'
   129  001010  46                 	db	70	;'F'
   130  001011  00                 	db	0
   131  001012                     STR_1:
   132  001012  4E                 	db	78	;'N'
   133  001013  6F                 	db	111	;'o'
   134  001014  6D                 	db	109	;'m'
   135  001015  62                 	db	98	;'b'
   136  001016  72                 	db	114	;'r'
   137  001017  65                 	db	101	;'e'
   138  001018  20                 	db	32
   139  001019  70                 	db	112	;'p'
   140  00101A  61                 	db	97	;'a'
   141  00101B  73                 	db	115	;'s'
   142  00101C  00                 	db	0
   143                           
   144                           ; #config settings
   145  00101D  00                 	db	0	; dummy byte at the end
   146  0000                     
   147                           	psect	cinit
   148  0016D8                     __pcinit:
   149                           	opt stack 0
   150  0016D8                     start_initialization:
   151                           	opt stack 0
   152  0016D8                     __initialization:
   153                           	opt stack 0
   154                           
   155                           ; Initialize objects allocated to COMRAM (3 bytes)
   156                           ; load TBLPTR registers with __pidataCOMRAM
   157  0016D8  0E80               	movlw	low __pidataCOMRAM
   158  0016DA  6EF6               	movwf	tblptrl,c
   159  0016DC  0E18               	movlw	high __pidataCOMRAM
   160  0016DE  6EF7               	movwf	tblptrh,c
   161  0016E0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   162  0016E2  6EF8               	movwf	tblptru,c
   163  0016E4  0009               	tblrd		*+	;fetch initializer
   164  0016E6  CFF5 F033          	movff	tablat,__pdataCOMRAM
   165  0016EA  0009               	tblrd		*+	;fetch initializer
   166  0016EC  CFF5 F034          	movff	tablat,__pdataCOMRAM+1
   167  0016F0  0009               	tblrd		*+	;fetch initializer
   168  0016F2  CFF5 F035          	movff	tablat,__pdataCOMRAM+2
   169                           
   170                           ; Clear objects allocated to COMRAM (2 bytes)
   171  0016F6  6A37               	clrf	(__pbssCOMRAM+1)& (0+255),c
   172  0016F8  6A36               	clrf	__pbssCOMRAM& (0+255),c
   173  0016FA                     end_of_initialization:
   174                           	opt stack 0
   175  0016FA                     __end_of__initialization:
   176                           	opt stack 0
   177  0016FA  9038               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   178  0016FC  9238               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   179  0016FE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   180  001700  6EF8               	movwf	tblptru,c
   181  001702  0100               	movlb	0
   182  001704  EF3D  F00C         	goto	_main	;jump to C main() function
   183                           tblptru	equ	0xFF8
   184                           tblptrh	equ	0xFF7
   185                           tblptrl	equ	0xFF6
   186                           tablat	equ	0xFF5
   187                           
   188                           	psect	bssCOMRAM
   189  000036                     __pbssCOMRAM:
   190                           	opt stack 0
   191  000036                     _steps:
   192                           	opt stack 0
   193  000036                     	ds	2
   194                           tblptru	equ	0xFF8
   195                           tblptrh	equ	0xFF7
   196                           tblptrl	equ	0xFF6
   197                           tablat	equ	0xFF5
   198                           
   199                           	psect	dataCOMRAM
   200  000033                     __pdataCOMRAM:
   201                           	opt stack 0
   202  000033                     _kiwi_frequence:
   203                           	opt stack 0
   204  000033                     	ds	2
   205  000035                     _kiwi_length:
   206                           	opt stack 0
   207  000035                     	ds	1
   208                           tblptru	equ	0xFF8
   209                           tblptrh	equ	0xFF7
   210                           tblptrl	equ	0xFF6
   211                           tablat	equ	0xFF5
   212                           
   213                           	psect	cstackBANK0
   214  000060                     __pcstackBANK0:
   215                           	opt stack 0
   216  000060                     LCDWriteInt@column:
   217                           	opt stack 0
   218                           
   219                           ; 1 bytes @ 0x0
   220  000060                     	ds	1
   221  000061                     LCDWriteInt@string:
   222                           	opt stack 0
   223                           
   224                           ; 3 bytes @ 0x1
   225  000061                     	ds	3
   226  000064                     
   227                           ; 2 bytes @ 0x4
   228  000064                     	ds	2
   229  000066                     
   230                           ; 3 bytes @ 0x6
   231  000066                     	ds	3
   232                           tblptru	equ	0xFF8
   233                           tblptrh	equ	0xFF7
   234                           tblptrl	equ	0xFF6
   235                           tablat	equ	0xFF5
   236                           
   237                           	psect	cstackCOMRAM
   238  000001                     __pcstackCOMRAM:
   239                           	opt stack 0
   240  000001                     ??_flashlight:
   241  000001                     ?i2___awmod:
   242                           	opt stack 0
   243  000001                     i2ReadByte@status:
   244                           	opt stack 0
   245  000001                     i2WriteNibble@data:
   246                           	opt stack 0
   247  000001                     i2___awmod@dividend:
   248                           	opt stack 0
   249                           
   250                           ; 2 bytes @ 0x0
   251  000001                     	ds	1
   252  000002                     ??i2_WriteNibble:
   253  000002                     i2WaitLCD@status:
   254                           	opt stack 0
   255                           
   256                           ; 1 bytes @ 0x1
   257  000002                     	ds	1
   258  000003                     i2WriteNibble@cmd:
   259                           	opt stack 0
   260  000003                     i2___awmod@divisor:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x2
   264  000003                     	ds	1
   265  000004                     i2WriteByte@data:
   266                           	opt stack 0
   267                           
   268                           ; 1 bytes @ 0x3
   269  000004                     	ds	1
   270  000005                     i2WriteByte@cmd:
   271                           	opt stack 0
   272  000005                     i2___awmod@counter:
   273                           	opt stack 0
   274                           
   275                           ; 1 bytes @ 0x4
   276  000005                     	ds	1
   277  000006                     i2LCDGoto@row:
   278                           	opt stack 0
   279  000006                     i2LCDPutChar@data:
   280                           	opt stack 0
   281  000006                     i2___awmod@sign:
   282                           	opt stack 0
   283                           
   284                           ; 1 bytes @ 0x5
   285  000006                     	ds	1
   286  000007                     ??i2_LCDGoto:
   287  000007                     ?i2___awdiv:
   288                           	opt stack 0
   289  000007                     i2LCDWriteStr@string:
   290                           	opt stack 0
   291  000007                     i2___awdiv@dividend:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0x6
   295  000007                     	ds	2
   296  000009                     ??i2_LCDWriteStr:
   297  000009                     i2_LCDGoto$669:
   298                           	opt stack 0
   299  000009                     i2___awdiv@divisor:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0x8
   303  000009                     	ds	2
   304  00000B                     i2LCDGoto@column:
   305                           	opt stack 0
   306  00000B                     i2LCDWriteStr@i:
   307                           	opt stack 0
   308  00000B                     i2___awdiv@counter:
   309                           	opt stack 0
   310                           
   311                           ; 1 bytes @ 0xA
   312  00000B                     	ds	1
   313  00000C                     i2___awdiv@sign:
   314                           	opt stack 0
   315                           
   316                           ; 1 bytes @ 0xB
   317  00000C                     	ds	1
   318  00000D                     i2___awdiv@quotient:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0xC
   322  00000D                     	ds	2
   323  00000F                     ??_searched:
   324  00000F                     i2LCDWriteInt@row:
   325                           	opt stack 0
   326                           
   327                           ; 1 bytes @ 0xE
   328  00000F                     	ds	1
   329  000010                     i2LCDWriteInt@value:
   330                           	opt stack 0
   331                           
   332                           ; 1 bytes @ 0xF
   333  000010                     	ds	1
   334  000011                     searched@i:
   335                           	opt stack 0
   336  000011                     i2LCDWriteInt@string:
   337                           	opt stack 0
   338                           
   339                           ; 3 bytes @ 0x10
   340  000011                     	ds	2
   341  000013                     searched@time:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x12
   345  000013                     	ds	1
   346  000014                     i2LCDWriteInt@column:
   347                           	opt stack 0
   348                           
   349                           ; 1 bytes @ 0x13
   350  000014                     	ds	1
   351  000015                     ??_ISR:
   352  000015                     
   353                           ; 1 bytes @ 0x14
   354  000015                     	ds	15
   355  000024                     ISR@i:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x23
   359  000024                     	ds	2
   360  000026                     ?___awdiv:
   361                           	opt stack 0
   362  000026                     ?___awmod:
   363                           	opt stack 0
   364  000026                     ReadByte@status:
   365                           	opt stack 0
   366  000026                     WriteNibble@data:
   367                           	opt stack 0
   368  000026                     ___awdiv@dividend:
   369                           	opt stack 0
   370  000026                     ___awmod@dividend:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x25
   374  000026                     	ds	1
   375  000027                     ??_WriteNibble:
   376  000027                     WaitLCD@status:
   377                           	opt stack 0
   378                           
   379                           ; 1 bytes @ 0x26
   380  000027                     	ds	1
   381  000028                     WriteNibble@cmd:
   382                           	opt stack 0
   383  000028                     ___awdiv@divisor:
   384                           	opt stack 0
   385  000028                     ___awmod@divisor:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x27
   389  000028                     	ds	1
   390  000029                     ??_LCDInit:
   391  000029                     WriteByte@data:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x28
   395  000029                     	ds	1
   396  00002A                     WriteByte@cmd:
   397                           	opt stack 0
   398  00002A                     ___awdiv@counter:
   399                           	opt stack 0
   400  00002A                     ___awmod@counter:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x29
   404  00002A                     	ds	1
   405  00002B                     ??_LCDClear:
   406  00002B                     LCDGoto@row:
   407                           	opt stack 0
   408  00002B                     LCDPutChar@data:
   409                           	opt stack 0
   410  00002B                     ___awdiv@sign:
   411                           	opt stack 0
   412  00002B                     ___awmod@sign:
   413                           	opt stack 0
   414                           
   415                           ; 1 bytes @ 0x2A
   416  00002B                     	ds	1
   417  00002C                     ??_LCDGoto:
   418  00002C                     LCDWriteStr@string:
   419                           	opt stack 0
   420  00002C                     ___awdiv@quotient:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x2B
   424  00002C                     	ds	2
   425  00002E                     ??_LCDWriteStr:
   426  00002E                     _LCDGoto$669:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x2D
   430  00002E                     	ds	2
   431  000030                     LCDGoto@column:
   432                           	opt stack 0
   433  000030                     LCDWriteStr@i:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x2F
   437  000030                     	ds	1
   438  000031                     LCDWriteInt@row:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x30
   442  000031                     	ds	1
   443  000032                     LCDWriteInt@value:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0x31
   447  000032                     	ds	1
   448  000033                     tblptru	equ	0xFF8
   449                           tblptrh	equ	0xFF7
   450                           tblptrl	equ	0xFF6
   451                           tablat	equ	0xFF5
   452                           
   453                           ; 1 bytes @ 0x32
   454 ;;
   455 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   456 ;;
   457 ;; *************** function _main *****************
   458 ;; Defined at:
   459 ;;		line 222 in file "main.c"
   460 ;; Parameters:    Size  Location     Type
   461 ;;  argc            2    4[BANK0 ] int 
   462 ;;  argv            3    6[BANK0 ] PTR PTR unsigned char 
   463 ;; Auto vars:     Size  Location     Type
   464 ;;		None
   465 ;; Return value:  Size  Location     Type
   466 ;;                  2    4[BANK0 ] int 
   467 ;; Registers used:
   468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   469 ;; Tracked objects:
   470 ;;		On entry : 0/0
   471 ;;		On exit  : 0/0
   472 ;;		Unchanged: 0/0
   473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   474 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   477 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   478 ;;Total ram usage:        5 bytes
   479 ;; Hardware stack levels required when called:   16
   480 ;; This function calls:
   481 ;;		_setup
   482 ;; This function is called by:
   483 ;;		Startup code after reset
   484 ;; This function uses a non-reentrant model
   485 ;;
   486                           
   487                           	psect	text0
   488  00187A                     __ptext0:
   489                           	opt stack 0
   490  00187A                     _main:
   491                           	opt stack 15
   492                           
   493                           ;main.c: 224: setup();
   494                           
   495                           ;incstack = 0
   496  00187A  EC64  F00A         	call	_setup	;wreg free
   497  00187E                     l87:
   498  00187E  D7FF               	goto	l87
   499  001880                     __end_of_main:
   500                           	opt stack 0
   501                           tblptru	equ	0xFF8
   502                           tblptrh	equ	0xFF7
   503                           tblptrl	equ	0xFF6
   504                           tablat	equ	0xFF5
   505                           
   506 ;; *************** function _setup *****************
   507 ;; Defined at:
   508 ;;		line 90 in file "main.c"
   509 ;; Parameters:    Size  Location     Type
   510 ;;		None
   511 ;; Auto vars:     Size  Location     Type
   512 ;;		None
   513 ;; Return value:  Size  Location     Type
   514 ;;                  1    wreg      void 
   515 ;; Registers used:
   516 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   517 ;; Tracked objects:
   518 ;;		On entry : 0/0
   519 ;;		On exit  : 0/0
   520 ;;		Unchanged: 0/0
   521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   526 ;;Total ram usage:        0 bytes
   527 ;; Hardware stack levels used:    1
   528 ;; Hardware stack levels required when called:   15
   529 ;; This function calls:
   530 ;;		_init_debug
   531 ;; This function is called by:
   532 ;;		_main
   533 ;; This function uses a non-reentrant model
   534 ;;
   535                           
   536                           	psect	text1
   537  0014C8                     __ptext1:
   538                           	opt stack 0
   539  0014C8                     _setup:
   540                           	opt stack 15
   541                           
   542                           ;main.c: 92: init_debug();
   543                           
   544                           ;incstack = 0
   545  0014C8  ECB4  F00B         	call	_init_debug	;wreg free
   546                           
   547                           ;main.c: 95: INTCON2bits.INTEDG0 = 1;
   548  0014CC  8CF1               	bsf	intcon2,6,c	;volatile
   549                           
   550                           ;main.c: 96: INTCONbits.INT0IF = 0 ;
   551  0014CE  92F2               	bcf	intcon,1,c	;volatile
   552                           
   553                           ;main.c: 97: TRISBbits.TRISB0 = 0;
   554  0014D0  9093               	bcf	3987,0,c	;volatile
   555                           
   556                           ;main.c: 98: LATBbits.LATB0 = 0;
   557  0014D2  908A               	bcf	3978,0,c	;volatile
   558                           
   559                           ;main.c: 99: TRISBbits.TRISB0 = 1;
   560  0014D4  8093               	bsf	3987,0,c	;volatile
   561                           
   562                           ;main.c: 100: ANSELBbits.ANSB0 = 0;
   563  0014D6  010F               	movlb	15	; () banked
   564  0014D8  9139               	bcf	57,0,b	;volatile
   565                           
   566                           ; BSR set to: 15
   567                           ;main.c: 101: INTCONbits.INT0E = 1 ;
   568  0014DA  88F2               	bsf	intcon,4,c	;volatile
   569                           
   570                           ; BSR set to: 15
   571                           ;main.c: 104: INTCON2bits.INTEDG1 = 1;
   572  0014DC  8AF1               	bsf	intcon2,5,c	;volatile
   573                           
   574                           ; BSR set to: 15
   575                           ;main.c: 105: INTCON3bits.INT1IF = 0 ;
   576  0014DE  90F0               	bcf	intcon3,0,c	;volatile
   577                           
   578                           ; BSR set to: 15
   579                           ;main.c: 106: TRISBbits.TRISB1 = 0;
   580  0014E0  9293               	bcf	3987,1,c	;volatile
   581                           
   582                           ; BSR set to: 15
   583                           ;main.c: 107: LATBbits.LATB1 = 0;
   584  0014E2  928A               	bcf	3978,1,c	;volatile
   585                           
   586                           ; BSR set to: 15
   587                           ;main.c: 108: TRISBbits.TRISB1 = 1;
   588  0014E4  8293               	bsf	3987,1,c	;volatile
   589                           
   590                           ; BSR set to: 15
   591                           ;main.c: 109: ANSELBbits.ANSB1 = 0;
   592  0014E6  010F               	movlb	15	; () banked
   593  0014E8  9339               	bcf	57,1,b	;volatile
   594                           
   595                           ; BSR set to: 15
   596                           ;main.c: 110: INTCON3bits.INT1E = 1 ;
   597  0014EA  86F0               	bsf	intcon3,3,c	;volatile
   598                           
   599                           ; BSR set to: 15
   600                           ;main.c: 113: INTCON2bits.INTEDG2 = 1;
   601  0014EC  88F1               	bsf	intcon2,4,c	;volatile
   602                           
   603                           ; BSR set to: 15
   604                           ;main.c: 114: INTCON3bits.INT2IF = 0 ;
   605  0014EE  92F0               	bcf	intcon3,1,c	;volatile
   606                           
   607                           ; BSR set to: 15
   608                           ;main.c: 115: TRISBbits.TRISB2 = 0;
   609  0014F0  9493               	bcf	3987,2,c	;volatile
   610                           
   611                           ; BSR set to: 15
   612                           ;main.c: 116: LATBbits.LATB2 = 0;
   613  0014F2  948A               	bcf	3978,2,c	;volatile
   614                           
   615                           ; BSR set to: 15
   616                           ;main.c: 117: TRISBbits.TRISB2 = 1;
   617  0014F4  8493               	bsf	3987,2,c	;volatile
   618                           
   619                           ; BSR set to: 15
   620                           ;main.c: 118: ANSELBbits.ANSB2 = 0;
   621  0014F6  010F               	movlb	15	; () banked
   622  0014F8  9539               	bcf	57,2,b	;volatile
   623                           
   624                           ; BSR set to: 15
   625                           ;main.c: 119: INTCON3bits.INT2E = 1 ;
   626  0014FA  88F0               	bsf	intcon3,4,c	;volatile
   627                           
   628                           ; BSR set to: 15
   629                           ;main.c: 122: TRISCbits.RC1 = 0 ;
   630  0014FC  9294               	bcf	3988,1,c	;volatile
   631                           
   632                           ; BSR set to: 15
   633                           ;main.c: 123: LATCbits.LATC1 = 0 ;
   634  0014FE  928B               	bcf	3979,1,c	;volatile
   635                           
   636                           ; BSR set to: 15
   637                           ;main.c: 126: T2CONbits.T2OUTPS = 0 ;
   638  001500  96BA               	bcf	4026,3,c	;volatile
   639  001502  98BA               	bcf	4026,4,c	;volatile
   640  001504  9ABA               	bcf	4026,5,c	;volatile
   641  001506  9CBA               	bcf	4026,6,c	;volatile
   642                           
   643                           ; BSR set to: 15
   644                           ;main.c: 127: T2CONbits.T2CKPS = 0b10 ;
   645  001508  50BA               	movf	4026,w,c	;volatile
   646  00150A  0BFC               	andlw	-4
   647  00150C  0902               	iorlw	2
   648  00150E  6EBA               	movwf	4026,c	;volatile
   649                           
   650                           ; BSR set to: 15
   651                           ;main.c: 128: T2CONbits.TMR2ON = 1 ;
   652  001510  84BA               	bsf	4026,2,c	;volatile
   653                           
   654                           ; BSR set to: 15
   655                           ;main.c: 131: TRISCbits.RC2 = 0;
   656  001512  9494               	bcf	3988,2,c	;volatile
   657                           
   658                           ; BSR set to: 15
   659                           ;main.c: 132: CCP1CONbits.P1M = 0 ;
   660  001514  0E3F               	movlw	-193
   661  001516  16BD               	andwf	4029,f,c	;volatile
   662                           
   663                           ; BSR set to: 15
   664                           ;main.c: 133: CCP1CONbits.DC1B = 0 ;
   665  001518  0ECF               	movlw	-49
   666  00151A  16BD               	andwf	4029,f,c	;volatile
   667                           
   668                           ; BSR set to: 15
   669                           ;main.c: 134: CCP1CONbits.CCP1M = 0b1100 ;
   670  00151C  50BD               	movf	4029,w,c	;volatile
   671  00151E  0BF0               	andlw	-16
   672  001520  090C               	iorlw	12
   673  001522  6EBD               	movwf	4029,c	;volatile
   674                           
   675                           ; BSR set to: 15
   676                           ;main.c: 135: CCPR1Lbits.CCPR1L = 0 ;
   677  001524  0E00               	movlw	0
   678  001526  6EBE               	movwf	4030,c	;volatile
   679                           
   680                           ; BSR set to: 15
   681                           ;main.c: 138: INTCONbits.PEIE = 1;
   682  001528  8CF2               	bsf	intcon,6,c	;volatile
   683                           
   684                           ; BSR set to: 15
   685                           ;main.c: 139: INTCONbits.GIE = 1 ;
   686  00152A  8EF2               	bsf	intcon,7,c	;volatile
   687                           
   688                           ; BSR set to: 15
   689                           ;main.c: 142: steps = 0;
   690  00152C  0E00               	movlw	0
   691  00152E  6E37               	movwf	_steps+1,c
   692  001530  0E00               	movlw	0
   693  001532  6E36               	movwf	_steps,c
   694                           
   695                           ; BSR set to: 15
   696  001534  0012               	return		;funcret
   697  001536                     __end_of_setup:
   698                           	opt stack 0
   699                           tblptru	equ	0xFF8
   700                           tblptrh	equ	0xFF7
   701                           tblptrl	equ	0xFF6
   702                           tablat	equ	0xFF5
   703                           intcon	equ	0xFF2
   704                           intcon2	equ	0xFF1
   705                           intcon3	equ	0xFF0
   706                           
   707 ;; *************** function _init_debug *****************
   708 ;; Defined at:
   709 ;;		line 81 in file "main.c"
   710 ;; Parameters:    Size  Location     Type
   711 ;;		None
   712 ;; Auto vars:     Size  Location     Type
   713 ;;		None
   714 ;; Return value:  Size  Location     Type
   715 ;;                  1    wreg      void 
   716 ;; Registers used:
   717 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   718 ;; Tracked objects:
   719 ;;		On entry : 0/0
   720 ;;		On exit  : 0/0
   721 ;;		Unchanged: 0/0
   722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   727 ;;Total ram usage:        0 bytes
   728 ;; Hardware stack levels used:    1
   729 ;; Hardware stack levels required when called:   14
   730 ;; This function calls:
   731 ;;		_LCDClear
   732 ;;		_LCDGoto
   733 ;;		_LCDInit
   734 ;;		_LCDWriteStr
   735 ;;		_show_debug
   736 ;; This function is called by:
   737 ;;		_setup
   738 ;; This function uses a non-reentrant model
   739 ;;
   740                           
   741                           	psect	text2
   742  001768                     __ptext2:
   743                           	opt stack 0
   744  001768                     _init_debug:
   745                           	opt stack 15
   746                           
   747                           ;main.c: 82: LCDInit();
   748                           
   749                           ; BSR set to: 15
   750                           ;incstack = 0
   751  001768  EC0F  F008         	call	_LCDInit	;wreg free
   752                           
   753                           ;main.c: 83: LCDClear();
   754  00176C  ECC6  F00B         	call	_LCDClear	;wreg free
   755                           
   756                           ;main.c: 84: LCDGoto(0, 0);
   757  001770  0E00               	movlw	0
   758  001772  6E2B               	movwf	LCDGoto@row,c
   759  001774  0E00               	movlw	0
   760  001776  EC32  F00B         	call	_LCDGoto
   761                           
   762                           ;main.c: 85: LCDWriteStr("Nombre pas");
   763  00177A  0E12               	movlw	low STR_1
   764  00177C  6E2C               	movwf	LCDWriteStr@string,c
   765  00177E  0E10               	movlw	high STR_1
   766  001780  6E2D               	movwf	LCDWriteStr@string+1,c
   767  001782  EC74  F009         	call	_LCDWriteStr	;wreg free
   768                           
   769                           ;main.c: 86: show_debug();
   770  001786  EC22  F00C         	call	_show_debug	;wreg free
   771  00178A  0012               	return		;funcret
   772  00178C                     __end_of_init_debug:
   773                           	opt stack 0
   774                           tblptru	equ	0xFF8
   775                           tblptrh	equ	0xFF7
   776                           tblptrl	equ	0xFF6
   777                           tablat	equ	0xFF5
   778                           intcon	equ	0xFF2
   779                           intcon2	equ	0xFF1
   780                           intcon3	equ	0xFF0
   781                           
   782 ;; *************** function _show_debug *****************
   783 ;; Defined at:
   784 ;;		line 76 in file "main.c"
   785 ;; Parameters:    Size  Location     Type
   786 ;;		None
   787 ;; Auto vars:     Size  Location     Type
   788 ;;		None
   789 ;; Return value:  Size  Location     Type
   790 ;;                  1    wreg      void 
   791 ;; Registers used:
   792 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   793 ;; Tracked objects:
   794 ;;		On entry : 0/0
   795 ;;		On exit  : 0/0
   796 ;;		Unchanged: 0/0
   797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   802 ;;Total ram usage:        0 bytes
   803 ;; Hardware stack levels used:    1
   804 ;; Hardware stack levels required when called:   13
   805 ;; This function calls:
   806 ;;		_LCDWriteInt
   807 ;; This function is called by:
   808 ;;		_init_debug
   809 ;; This function uses a non-reentrant model
   810 ;;
   811                           
   812                           	psect	text3
   813  001844                     __ptext3:
   814                           	opt stack 0
   815  001844                     _show_debug:
   816                           	opt stack 15
   817                           
   818                           ;main.c: 77: LCDWriteInt(0, 1, steps);
   819                           
   820                           ;incstack = 0
   821  001844  0E01               	movlw	1
   822  001846  6E31               	movwf	LCDWriteInt@row,c
   823  001848  C036  F032         	movff	_steps,LCDWriteInt@value
   824  00184C  0E00               	movlw	0
   825  00184E  EC9B  F00A         	call	_LCDWriteInt
   826  001852  0012               	return		;funcret
   827  001854                     __end_of_show_debug:
   828                           	opt stack 0
   829                           tblptru	equ	0xFF8
   830                           tblptrh	equ	0xFF7
   831                           tblptrl	equ	0xFF6
   832                           tablat	equ	0xFF5
   833                           intcon	equ	0xFF2
   834                           intcon2	equ	0xFF1
   835                           intcon3	equ	0xFF0
   836                           
   837 ;; *************** function _LCDWriteInt *****************
   838 ;; Defined at:
   839 ;;		line 229 in file "lcd.c"
   840 ;; Parameters:    Size  Location     Type
   841 ;;  column          1    wreg     unsigned char 
   842 ;;  row             1   48[COMRAM] unsigned char 
   843 ;;  value           1   49[COMRAM] unsigned char 
   844 ;; Auto vars:     Size  Location     Type
   845 ;;  column          1    0[BANK0 ] unsigned char 
   846 ;;  string          3    1[BANK0 ] unsigned char [3]
   847 ;; Return value:  Size  Location     Type
   848 ;;                  1    wreg      void 
   849 ;; Registers used:
   850 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   851 ;; Tracked objects:
   852 ;;		On entry : 0/0
   853 ;;		On exit  : 0/0
   854 ;;		Unchanged: 0/0
   855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   856 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   857 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   859 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   860 ;;Total ram usage:        6 bytes
   861 ;; Hardware stack levels used:    1
   862 ;; Hardware stack levels required when called:   12
   863 ;; This function calls:
   864 ;;		_LCDGoto
   865 ;;		_LCDWriteStr
   866 ;;		___awdiv
   867 ;;		___awmod
   868 ;; This function is called by:
   869 ;;		_show_debug
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           	psect	text4
   874  001536                     __ptext4:
   875                           	opt stack 0
   876  001536                     _LCDWriteInt:
   877                           	opt stack 15
   878                           
   879                           ;incstack = 0
   880                           ;LCDWriteInt@column stored from wreg
   881  001536  0100               	movlb	0	; () banked
   882  001538  6F60               	movwf	LCDWriteInt@column& (0+255),b
   883                           
   884                           ;lcd.c: 230: char string[3];
   885                           ;lcd.c: 232: string[0] = value / 10 + '0';
   886  00153A  C032  F026         	movff	LCDWriteInt@value,___awdiv@dividend
   887  00153E  6A27               	clrf	___awdiv@dividend+1,c
   888  001540  0E00               	movlw	0
   889  001542  6E29               	movwf	___awdiv@divisor+1,c
   890  001544  0E0A               	movlw	10
   891  001546  6E28               	movwf	___awdiv@divisor,c
   892  001548  ECF0  F008         	call	___awdiv	;wreg free
   893  00154C  5026               	movf	?___awdiv,w,c
   894  00154E  0F30               	addlw	48
   895  001550  0100               	movlb	0	; () banked
   896  001552  6F61               	movwf	LCDWriteInt@string& (0+255),b
   897                           
   898                           ;lcd.c: 233: string[1] = value % 10 + '0';
   899  001554  C032  F026         	movff	LCDWriteInt@value,___awmod@dividend
   900  001558  6A27               	clrf	___awmod@dividend+1,c
   901  00155A  0E00               	movlw	0
   902  00155C  6E29               	movwf	___awmod@divisor+1,c
   903  00155E  0E0A               	movlw	10
   904  001560  6E28               	movwf	___awmod@divisor,c
   905  001562  ECF4  F009         	call	___awmod	;wreg free
   906  001566  5026               	movf	?___awmod,w,c
   907  001568  0F30               	addlw	48
   908  00156A  0100               	movlb	0	; () banked
   909  00156C  6F62               	movwf	(LCDWriteInt@string+1)& (0+255),b
   910                           
   911                           ; BSR set to: 0
   912                           ;lcd.c: 234: string[2] = '\0';
   913  00156E  0E00               	movlw	0
   914  001570  0100               	movlb	0	; () banked
   915  001572  6F63               	movwf	(LCDWriteInt@string+2)& (0+255),b
   916                           
   917                           ; BSR set to: 0
   918                           ;lcd.c: 236: LCDGoto(column, row);
   919  001574  C031  F02B         	movff	LCDWriteInt@row,LCDGoto@row
   920  001578  0100               	movlb	0	; () banked
   921  00157A  5160               	movf	LCDWriteInt@column& (0+255),w,b
   922  00157C  EC32  F00B         	call	_LCDGoto
   923                           
   924                           ;lcd.c: 237: LCDWriteStr(string);
   925  001580  0E61               	movlw	low LCDWriteInt@string
   926  001582  6E2C               	movwf	LCDWriteStr@string,c
   927  001584  0E00               	movlw	high LCDWriteInt@string
   928  001586  6E2D               	movwf	LCDWriteStr@string+1,c
   929  001588  EC74  F009         	call	_LCDWriteStr	;wreg free
   930  00158C  0012               	return		;funcret
   931  00158E                     __end_of_LCDWriteInt:
   932                           	opt stack 0
   933                           tblptru	equ	0xFF8
   934                           tblptrh	equ	0xFF7
   935                           tblptrl	equ	0xFF6
   936                           tablat	equ	0xFF5
   937                           intcon	equ	0xFF2
   938                           intcon2	equ	0xFF1
   939                           intcon3	equ	0xFF0
   940                           
   941 ;; *************** function ___awmod *****************
   942 ;; Defined at:
   943 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
   944 ;; Parameters:    Size  Location     Type
   945 ;;  dividend        2   37[COMRAM] int 
   946 ;;  divisor         2   39[COMRAM] int 
   947 ;; Auto vars:     Size  Location     Type
   948 ;;  sign            1   42[COMRAM] unsigned char 
   949 ;;  counter         1   41[COMRAM] unsigned char 
   950 ;; Return value:  Size  Location     Type
   951 ;;                  2   37[COMRAM] int 
   952 ;; Registers used:
   953 ;;		wreg, status,2, status,0
   954 ;; Tracked objects:
   955 ;;		On entry : 0/0
   956 ;;		On exit  : 0/0
   957 ;;		Unchanged: 0/0
   958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   959 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   960 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   962 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   963 ;;Total ram usage:        6 bytes
   964 ;; Hardware stack levels used:    1
   965 ;; Hardware stack levels required when called:    8
   966 ;; This function calls:
   967 ;;		Nothing
   968 ;; This function is called by:
   969 ;;		_LCDWriteInt
   970 ;;		_LCDPutByte
   971 ;; This function uses a non-reentrant model
   972 ;;
   973                           
   974                           	psect	text5
   975  0013E8                     __ptext5:
   976                           	opt stack 0
   977  0013E8                     ___awmod:
   978                           	opt stack 18
   979                           
   980                           ;incstack = 0
   981  0013E8  0E00               	movlw	0
   982  0013EA  6E2B               	movwf	___awmod@sign,c
   983  0013EC  AE27               	btfss	___awmod@dividend+1,7,c
   984  0013EE  D006               	goto	l2079
   985  0013F0  6C26               	negf	___awmod@dividend,c
   986  0013F2  1E27               	comf	___awmod@dividend+1,f,c
   987  0013F4  B0D8               	btfsc	status,0,c
   988  0013F6  2A27               	incf	___awmod@dividend+1,f,c
   989  0013F8  0E01               	movlw	1
   990  0013FA  6E2B               	movwf	___awmod@sign,c
   991  0013FC                     l2079:
   992  0013FC  AE29               	btfss	___awmod@divisor+1,7,c
   993  0013FE  D004               	goto	l2083
   994  001400  6C28               	negf	___awmod@divisor,c
   995  001402  1E29               	comf	___awmod@divisor+1,f,c
   996  001404  B0D8               	btfsc	status,0,c
   997  001406  2A29               	incf	___awmod@divisor+1,f,c
   998  001408                     l2083:
   999  001408  5028               	movf	___awmod@divisor,w,c
  1000  00140A  1029               	iorwf	___awmod@divisor+1,w,c
  1001  00140C  B4D8               	btfsc	status,2,c
  1002  00140E  D018               	goto	l2099
  1003  001410  0E01               	movlw	1
  1004  001412  6E2A               	movwf	___awmod@counter,c
  1005  001414  D004               	goto	l2089
  1006  001416                     l2087:
  1007  001416  90D8               	bcf	status,0,c
  1008  001418  3628               	rlcf	___awmod@divisor,f,c
  1009  00141A  3629               	rlcf	___awmod@divisor+1,f,c
  1010  00141C  2A2A               	incf	___awmod@counter,f,c
  1011  00141E                     l2089:
  1012  00141E  AE29               	btfss	___awmod@divisor+1,7,c
  1013  001420  D7FA               	goto	l2087
  1014  001422                     l2091:
  1015  001422  5028               	movf	___awmod@divisor,w,c
  1016  001424  5C26               	subwf	___awmod@dividend,w,c
  1017  001426  5029               	movf	___awmod@divisor+1,w,c
  1018  001428  5827               	subwfb	___awmod@dividend+1,w,c
  1019  00142A  A0D8               	btfss	status,0,c
  1020  00142C  D004               	goto	l2095
  1021  00142E  5028               	movf	___awmod@divisor,w,c
  1022  001430  5E26               	subwf	___awmod@dividend,f,c
  1023  001432  5029               	movf	___awmod@divisor+1,w,c
  1024  001434  5A27               	subwfb	___awmod@dividend+1,f,c
  1025  001436                     l2095:
  1026  001436  90D8               	bcf	status,0,c
  1027  001438  3229               	rrcf	___awmod@divisor+1,f,c
  1028  00143A  3228               	rrcf	___awmod@divisor,f,c
  1029  00143C  2E2A               	decfsz	___awmod@counter,f,c
  1030  00143E  D7F1               	goto	l2091
  1031  001440                     l2099:
  1032  001440  502B               	movf	___awmod@sign,w,c
  1033  001442  B4D8               	btfsc	status,2,c
  1034  001444  D004               	goto	l2103
  1035  001446  6C26               	negf	___awmod@dividend,c
  1036  001448  1E27               	comf	___awmod@dividend+1,f,c
  1037  00144A  B0D8               	btfsc	status,0,c
  1038  00144C  2A27               	incf	___awmod@dividend+1,f,c
  1039  00144E                     l2103:
  1040  00144E  C026  F026         	movff	___awmod@dividend,?___awmod
  1041  001452  C027  F027         	movff	___awmod@dividend+1,?___awmod+1
  1042  001456  0012               	return	
  1043  001458                     __end_of___awmod:
  1044                           	opt stack 0
  1045                           tblptru	equ	0xFF8
  1046                           tblptrh	equ	0xFF7
  1047                           tblptrl	equ	0xFF6
  1048                           tablat	equ	0xFF5
  1049                           intcon	equ	0xFF2
  1050                           intcon2	equ	0xFF1
  1051                           intcon3	equ	0xFF0
  1052                           status	equ	0xFD8
  1053                           
  1054 ;; *************** function ___awdiv *****************
  1055 ;; Defined at:
  1056 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;  dividend        2   37[COMRAM] int 
  1059 ;;  divisor         2   39[COMRAM] int 
  1060 ;; Auto vars:     Size  Location     Type
  1061 ;;  quotient        2   43[COMRAM] int 
  1062 ;;  sign            1   42[COMRAM] unsigned char 
  1063 ;;  counter         1   41[COMRAM] unsigned char 
  1064 ;; Return value:  Size  Location     Type
  1065 ;;                  2   37[COMRAM] int 
  1066 ;; Registers used:
  1067 ;;		wreg, status,2, status,0
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1073 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1074 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1076 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1077 ;;Total ram usage:        8 bytes
  1078 ;; Hardware stack levels used:    1
  1079 ;; Hardware stack levels required when called:    8
  1080 ;; This function calls:
  1081 ;;		Nothing
  1082 ;; This function is called by:
  1083 ;;		_LCDWriteInt
  1084 ;;		_LCDPutByte
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           	psect	text6
  1089  0011E0                     __ptext6:
  1090                           	opt stack 0
  1091  0011E0                     ___awdiv:
  1092                           	opt stack 18
  1093                           
  1094                           ;incstack = 0
  1095  0011E0  0E00               	movlw	0
  1096  0011E2  6E2B               	movwf	___awdiv@sign,c
  1097  0011E4  AE29               	btfss	___awdiv@divisor+1,7,c
  1098  0011E6  D006               	goto	l2035
  1099  0011E8  6C28               	negf	___awdiv@divisor,c
  1100  0011EA  1E29               	comf	___awdiv@divisor+1,f,c
  1101  0011EC  B0D8               	btfsc	status,0,c
  1102  0011EE  2A29               	incf	___awdiv@divisor+1,f,c
  1103  0011F0  0E01               	movlw	1
  1104  0011F2  6E2B               	movwf	___awdiv@sign,c
  1105  0011F4                     l2035:
  1106  0011F4  AE27               	btfss	___awdiv@dividend+1,7,c
  1107  0011F6  D006               	goto	l2041
  1108  0011F8  6C26               	negf	___awdiv@dividend,c
  1109  0011FA  1E27               	comf	___awdiv@dividend+1,f,c
  1110  0011FC  B0D8               	btfsc	status,0,c
  1111  0011FE  2A27               	incf	___awdiv@dividend+1,f,c
  1112  001200  0E01               	movlw	1
  1113  001202  1A2B               	xorwf	___awdiv@sign,f,c
  1114  001204                     l2041:
  1115  001204  0E00               	movlw	0
  1116  001206  6E2D               	movwf	___awdiv@quotient+1,c
  1117  001208  0E00               	movlw	0
  1118  00120A  6E2C               	movwf	___awdiv@quotient,c
  1119  00120C  5028               	movf	___awdiv@divisor,w,c
  1120  00120E  1029               	iorwf	___awdiv@divisor+1,w,c
  1121  001210  B4D8               	btfsc	status,2,c
  1122  001212  D01C               	goto	l2063
  1123  001214  0E01               	movlw	1
  1124  001216  6E2A               	movwf	___awdiv@counter,c
  1125  001218  D004               	goto	l2049
  1126  00121A                     l2047:
  1127  00121A  90D8               	bcf	status,0,c
  1128  00121C  3628               	rlcf	___awdiv@divisor,f,c
  1129  00121E  3629               	rlcf	___awdiv@divisor+1,f,c
  1130  001220  2A2A               	incf	___awdiv@counter,f,c
  1131  001222                     l2049:
  1132  001222  AE29               	btfss	___awdiv@divisor+1,7,c
  1133  001224  D7FA               	goto	l2047
  1134  001226                     l2051:
  1135  001226  90D8               	bcf	status,0,c
  1136  001228  362C               	rlcf	___awdiv@quotient,f,c
  1137  00122A  362D               	rlcf	___awdiv@quotient+1,f,c
  1138  00122C  5028               	movf	___awdiv@divisor,w,c
  1139  00122E  5C26               	subwf	___awdiv@dividend,w,c
  1140  001230  5029               	movf	___awdiv@divisor+1,w,c
  1141  001232  5827               	subwfb	___awdiv@dividend+1,w,c
  1142  001234  A0D8               	btfss	status,0,c
  1143  001236  D005               	goto	l2059
  1144  001238  5028               	movf	___awdiv@divisor,w,c
  1145  00123A  5E26               	subwf	___awdiv@dividend,f,c
  1146  00123C  5029               	movf	___awdiv@divisor+1,w,c
  1147  00123E  5A27               	subwfb	___awdiv@dividend+1,f,c
  1148  001240  802C               	bsf	___awdiv@quotient,0,c
  1149  001242                     l2059:
  1150  001242  90D8               	bcf	status,0,c
  1151  001244  3229               	rrcf	___awdiv@divisor+1,f,c
  1152  001246  3228               	rrcf	___awdiv@divisor,f,c
  1153  001248  2E2A               	decfsz	___awdiv@counter,f,c
  1154  00124A  D7ED               	goto	l2051
  1155  00124C                     l2063:
  1156  00124C  502B               	movf	___awdiv@sign,w,c
  1157  00124E  B4D8               	btfsc	status,2,c
  1158  001250  D004               	goto	l2067
  1159  001252  6C2C               	negf	___awdiv@quotient,c
  1160  001254  1E2D               	comf	___awdiv@quotient+1,f,c
  1161  001256  B0D8               	btfsc	status,0,c
  1162  001258  2A2D               	incf	___awdiv@quotient+1,f,c
  1163  00125A                     l2067:
  1164  00125A  C02C  F026         	movff	___awdiv@quotient,?___awdiv
  1165  00125E  C02D  F027         	movff	___awdiv@quotient+1,?___awdiv+1
  1166  001262  0012               	return	
  1167  001264                     __end_of___awdiv:
  1168                           	opt stack 0
  1169                           tblptru	equ	0xFF8
  1170                           tblptrh	equ	0xFF7
  1171                           tblptrl	equ	0xFF6
  1172                           tablat	equ	0xFF5
  1173                           intcon	equ	0xFF2
  1174                           intcon2	equ	0xFF1
  1175                           intcon3	equ	0xFF0
  1176                           status	equ	0xFD8
  1177                           
  1178 ;; *************** function _LCDWriteStr *****************
  1179 ;; Defined at:
  1180 ;;		line 193 in file "lcd.c"
  1181 ;; Parameters:    Size  Location     Type
  1182 ;;  string          2   43[COMRAM] PTR const unsigned char 
  1183 ;;		 -> LCDWriteInt@string(3), LCDWriteFloat@string(5), LCDWriteHexa@string(3), STR_1(11), 
  1184 ;; Auto vars:     Size  Location     Type
  1185 ;;  i               1   47[COMRAM] unsigned char 
  1186 ;; Return value:  Size  Location     Type
  1187 ;;                  1    wreg      void 
  1188 ;; Registers used:
  1189 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1190 ;; Tracked objects:
  1191 ;;		On entry : 0/0
  1192 ;;		On exit  : 0/0
  1193 ;;		Unchanged: 0/0
  1194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1195 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1196 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1197 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1198 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1199 ;;Total ram usage:        5 bytes
  1200 ;; Hardware stack levels used:    1
  1201 ;; Hardware stack levels required when called:   11
  1202 ;; This function calls:
  1203 ;;		_LCDPutChar
  1204 ;; This function is called by:
  1205 ;;		_init_debug
  1206 ;;		_LCDWriteInt
  1207 ;;		_LCDWriteHexa
  1208 ;;		_LCDWriteFloat
  1209 ;; This function uses a non-reentrant model
  1210 ;;
  1211                           
  1212                           	psect	text7
  1213  0012E8                     __ptext7:
  1214                           	opt stack 0
  1215  0012E8                     _LCDWriteStr:
  1216                           	opt stack 15
  1217                           
  1218                           ;lcd.c: 195: UINT8_T i = 0;
  1219                           
  1220                           ;incstack = 0
  1221  0012E8  0E00               	movlw	0
  1222  0012EA  6E30               	movwf	LCDWriteStr@i,c
  1223                           
  1224                           ;lcd.c: 197: while (string[i])
  1225  0012EC  D01E               	goto	l2025
  1226  0012EE                     l2021:
  1227                           
  1228                           ;lcd.c: 198: LCDPutChar(string[i++]);
  1229  0012EE  5030               	movf	LCDWriteStr@i,w,c
  1230  0012F0  0D01               	mullw	1
  1231  0012F2  C02C  F02E         	movff	LCDWriteStr@string,??_LCDWriteStr
  1232  0012F6  C02D  F02F         	movff	LCDWriteStr@string+1,??_LCDWriteStr+1
  1233  0012FA  50F3               	movf	prodl,w,c
  1234  0012FC  262E               	addwf	??_LCDWriteStr,f,c
  1235  0012FE  50F4               	movf	prodh,w,c
  1236  001300  222F               	addwfc	??_LCDWriteStr+1,f,c
  1237  001302  C02E  FFF6         	movff	??_LCDWriteStr,tblptrl
  1238  001306  C02F  FFF7         	movff	??_LCDWriteStr+1,tblptrh
  1239  00130A  0E00               	movlw	low (__smallconst shr (0+16))
  1240  00130C  6EF8               	movwf	tblptru,c
  1241  00130E  0E0F               	movlw	(high __ramtop+-1)
  1242  001310  64F7               	cpfsgt	tblptrh,c
  1243  001312  D003               	bra	u1207
  1244  001314  0008               	tblrd		*
  1245  001316  50F5               	movf	tablat,w,c
  1246  001318  D005               	bra	u1200
  1247  00131A                     u1207:
  1248  00131A  CFF6 FFE9          	movff	tblptrl,fsr0l
  1249  00131E  CFF7 FFEA          	movff	tblptrh,fsr0h
  1250  001322  50EF               	movf	indf0,w,c
  1251  001324                     u1200:
  1252  001324  ECFE  F00B         	call	_LCDPutChar
  1253  001328  2A30               	incf	LCDWriteStr@i,f,c
  1254  00132A                     l2025:
  1255  00132A  5030               	movf	LCDWriteStr@i,w,c
  1256  00132C  0D01               	mullw	1
  1257  00132E  C02C  F02E         	movff	LCDWriteStr@string,??_LCDWriteStr
  1258  001332  C02D  F02F         	movff	LCDWriteStr@string+1,??_LCDWriteStr+1
  1259  001336  50F3               	movf	prodl,w,c
  1260  001338  262E               	addwf	??_LCDWriteStr,f,c
  1261  00133A  50F4               	movf	prodh,w,c
  1262  00133C  222F               	addwfc	??_LCDWriteStr+1,f,c
  1263  00133E  C02E  FFF6         	movff	??_LCDWriteStr,tblptrl
  1264  001342  C02F  FFF7         	movff	??_LCDWriteStr+1,tblptrh
  1265  001346  0E00               	movlw	low (__smallconst shr (0+16))
  1266  001348  6EF8               	movwf	tblptru,c
  1267  00134A  0E0F               	movlw	(high __ramtop+-1)
  1268  00134C  64F7               	cpfsgt	tblptrh,c
  1269  00134E  D003               	bra	u1217
  1270  001350  0008               	tblrd		*
  1271  001352  50F5               	movf	tablat,w,c
  1272  001354  D005               	bra	u1210
  1273  001356                     u1217:
  1274  001356  CFF6 FFE9          	movff	tblptrl,fsr0l
  1275  00135A  CFF7 FFEA          	movff	tblptrh,fsr0h
  1276  00135E  50EF               	movf	indf0,w,c
  1277  001360                     u1210:
  1278  001360  0900               	iorlw	0
  1279  001362  B4D8               	btfsc	status,2,c
  1280  001364  0012               	return	
  1281  001366  D7C3               	goto	l2021
  1282  001368                     __end_of_LCDWriteStr:
  1283                           	opt stack 0
  1284                           tblptru	equ	0xFF8
  1285                           tblptrh	equ	0xFF7
  1286                           tblptrl	equ	0xFF6
  1287                           tablat	equ	0xFF5
  1288                           prodh	equ	0xFF4
  1289                           prodl	equ	0xFF3
  1290                           intcon	equ	0xFF2
  1291                           intcon2	equ	0xFF1
  1292                           intcon3	equ	0xFF0
  1293                           indf0	equ	0xFEF
  1294                           fsr0h	equ	0xFEA
  1295                           fsr0l	equ	0xFE9
  1296                           status	equ	0xFD8
  1297                           
  1298 ;; *************** function _LCDPutChar *****************
  1299 ;; Defined at:
  1300 ;;		line 180 in file "lcd.c"
  1301 ;; Parameters:    Size  Location     Type
  1302 ;;  data            1    wreg     unsigned char 
  1303 ;; Auto vars:     Size  Location     Type
  1304 ;;  data            1   42[COMRAM] unsigned char 
  1305 ;; Return value:  Size  Location     Type
  1306 ;;                  1    wreg      void 
  1307 ;; Registers used:
  1308 ;;		wreg, status,2, status,0, cstack
  1309 ;; Tracked objects:
  1310 ;;		On entry : 0/0
  1311 ;;		On exit  : 0/0
  1312 ;;		Unchanged: 0/0
  1313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1315 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1317 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1318 ;;Total ram usage:        1 bytes
  1319 ;; Hardware stack levels used:    1
  1320 ;; Hardware stack levels required when called:   10
  1321 ;; This function calls:
  1322 ;;		_WaitLCD
  1323 ;;		_WriteByte
  1324 ;; This function is called by:
  1325 ;;		_LCDWriteStr
  1326 ;;		_LCDPutByte
  1327 ;; This function uses a non-reentrant model
  1328 ;;
  1329                           
  1330                           	psect	text8
  1331  0017FC                     __ptext8:
  1332                           	opt stack 0
  1333  0017FC                     _LCDPutChar:
  1334                           	opt stack 15
  1335                           
  1336                           ;incstack = 0
  1337                           ;LCDPutChar@data stored from wreg
  1338  0017FC  6E2B               	movwf	LCDPutChar@data,c
  1339                           
  1340                           ;lcd.c: 182: WriteByte(0, data);
  1341  0017FE  C02B  F029         	movff	LCDPutChar@data,WriteByte@data
  1342  001802  0E00               	movlw	0
  1343  001804  ECE4  F00B         	call	_WriteByte
  1344                           
  1345                           ;lcd.c: 183: WaitLCD();
  1346  001808  EC07  F00C         	call	_WaitLCD	;wreg free
  1347  00180C  0012               	return		;funcret
  1348  00180E                     __end_of_LCDPutChar:
  1349                           	opt stack 0
  1350                           tblptru	equ	0xFF8
  1351                           tblptrh	equ	0xFF7
  1352                           tblptrl	equ	0xFF6
  1353                           tablat	equ	0xFF5
  1354                           prodh	equ	0xFF4
  1355                           prodl	equ	0xFF3
  1356                           intcon	equ	0xFF2
  1357                           intcon2	equ	0xFF1
  1358                           intcon3	equ	0xFF0
  1359                           indf0	equ	0xFEF
  1360                           fsr0h	equ	0xFEA
  1361                           fsr0l	equ	0xFE9
  1362                           status	equ	0xFD8
  1363                           
  1364 ;; *************** function _LCDGoto *****************
  1365 ;; Defined at:
  1366 ;;		line 171 in file "lcd.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;  column          1    wreg     unsigned char 
  1369 ;;  row             1   42[COMRAM] unsigned char 
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;  column          1   47[COMRAM] unsigned char 
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2, status,0, cstack
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1381 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1382 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1383 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1384 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1385 ;;Total ram usage:        6 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:   10
  1388 ;; This function calls:
  1389 ;;		_WaitLCD
  1390 ;;		_WriteByte
  1391 ;; This function is called by:
  1392 ;;		_init_debug
  1393 ;;		_LCDWriteInt
  1394 ;;		_LCDWriteHexa
  1395 ;;		_LCDWriteFloat
  1396 ;; This function uses a non-reentrant model
  1397 ;;
  1398                           
  1399                           	psect	text9
  1400  001664                     __ptext9:
  1401                           	opt stack 0
  1402  001664                     _LCDGoto:
  1403                           	opt stack 16
  1404                           
  1405                           ;incstack = 0
  1406                           ;LCDGoto@column stored from wreg
  1407  001664  6E30               	movwf	LCDGoto@column,c
  1408                           
  1409                           ;lcd.c: 173: if ((row > (2 - 1)) || (column > (16 - 1)))
  1410  001666  0E02               	movlw	2
  1411  001668  602B               	cpfslt	LCDGoto@row,c
  1412  00166A  0012               	return	
  1413  00166C  0E0F               	movlw	15
  1414  00166E  6430               	cpfsgt	LCDGoto@column,c
  1415  001670  D001               	goto	l2009
  1416  001672  0012               	return	
  1417  001674                     l2009:
  1418                           
  1419                           ;lcd.c: 176: WriteByte(1, (row == 1) ? (0xC0 | column) : (0x80 | column));
  1420  001674  042B               	decf	LCDGoto@row,w,c
  1421  001676  B4D8               	btfsc	status,2,c
  1422  001678  D002               	goto	l2013
  1423  00167A  0E80               	movlw	128
  1424  00167C  D001               	goto	L1
  1425  00167E                     l2013:
  1426  00167E  0EC0               	movlw	192
  1427  001680                     L1:
  1428  001680  C030  F02C         	movff	LCDGoto@column,??_LCDGoto
  1429  001684  6A2D               	clrf	(??_LCDGoto+1)& (0+255),c
  1430  001686  102C               	iorwf	??_LCDGoto,w,c
  1431  001688  6E2E               	movwf	_LCDGoto$669,c
  1432  00168A  502D               	movf	??_LCDGoto+1,w,c
  1433  00168C  6E2F               	movwf	_LCDGoto$669+1,c
  1434  00168E  C02E  F029         	movff	_LCDGoto$669,WriteByte@data
  1435  001692  0E01               	movlw	1
  1436  001694  ECE4  F00B         	call	_WriteByte
  1437                           
  1438                           ;lcd.c: 177: WaitLCD();
  1439  001698  EC07  F00C         	call	_WaitLCD	;wreg free
  1440  00169C  0012               	return		;funcret
  1441  00169E                     __end_of_LCDGoto:
  1442                           	opt stack 0
  1443                           tblptru	equ	0xFF8
  1444                           tblptrh	equ	0xFF7
  1445                           tblptrl	equ	0xFF6
  1446                           tablat	equ	0xFF5
  1447                           prodh	equ	0xFF4
  1448                           prodl	equ	0xFF3
  1449                           intcon	equ	0xFF2
  1450                           intcon2	equ	0xFF1
  1451                           intcon3	equ	0xFF0
  1452                           indf0	equ	0xFEF
  1453                           fsr0h	equ	0xFEA
  1454                           fsr0l	equ	0xFE9
  1455                           status	equ	0xFD8
  1456                           
  1457 ;; *************** function _LCDInit *****************
  1458 ;; Defined at:
  1459 ;;		line 89 in file "lcd.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;		None
  1462 ;; Auto vars:     Size  Location     Type
  1463 ;;		None
  1464 ;; Return value:  Size  Location     Type
  1465 ;;                  1    wreg      void 
  1466 ;; Registers used:
  1467 ;;		wreg, status,2, status,0, cstack
  1468 ;; Tracked objects:
  1469 ;;		On entry : 0/0
  1470 ;;		On exit  : 0/0
  1471 ;;		Unchanged: 0/0
  1472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1475 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1476 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1477 ;;Total ram usage:        1 bytes
  1478 ;; Hardware stack levels used:    1
  1479 ;; Hardware stack levels required when called:   10
  1480 ;; This function calls:
  1481 ;;		_WaitLCD
  1482 ;;		_WriteNibble
  1483 ;; This function is called by:
  1484 ;;		_init_debug
  1485 ;; This function uses a non-reentrant model
  1486 ;;
  1487                           
  1488                           	psect	text10
  1489  00101E                     __ptext10:
  1490                           	opt stack 0
  1491  00101E                     _LCDInit:
  1492                           	opt stack 18
  1493                           
  1494                           ;lcd.c: 91: TRISDbits.TRISD7 = 0;
  1495                           
  1496                           ;incstack = 0
  1497  00101E  9E95               	bcf	3989,7,c	;volatile
  1498                           
  1499                           ;lcd.c: 92: TRISDbits.TRISD6 = 0;
  1500  001020  9C95               	bcf	3989,6,c	;volatile
  1501                           
  1502                           ;lcd.c: 93: TRISDbits.TRISD5 = 0;
  1503  001022  9A95               	bcf	3989,5,c	;volatile
  1504                           
  1505                           ;lcd.c: 94: TRISDbits.TRISD4 = 0;
  1506  001024  9895               	bcf	3989,4,c	;volatile
  1507                           
  1508                           ;lcd.c: 95: TRISDbits.TRISD0 = 0;
  1509  001026  9095               	bcf	3989,0,c	;volatile
  1510                           
  1511                           ;lcd.c: 96: TRISDbits.TRISD1 = 0;
  1512  001028  9295               	bcf	3989,1,c	;volatile
  1513                           
  1514                           ;lcd.c: 97: TRISDbits.TRISD2 = 0;
  1515  00102A  9495               	bcf	3989,2,c	;volatile
  1516                           
  1517                           ;lcd.c: 98: TRISDbits.TRISD3 = 0;
  1518  00102C  9695               	bcf	3989,3,c	;volatile
  1519                           
  1520                           ;lcd.c: 136: LATDbits.LATD7 = 1;
  1521  00102E  8E8C               	bsf	3980,7,c	;volatile
  1522                           
  1523                           ;lcd.c: 137: _delay(30000);
  1524  001030  0E27               	movlw	39
  1525  001032  6E29               	movwf	??_LCDInit& (0+255),c
  1526  001034  0EF5               	movlw	245
  1527  001036                     u1657:
  1528  001036  2EE8               	decfsz	wreg,f,c
  1529  001038  D7FE               	bra	u1657
  1530  00103A  2E29               	decfsz	??_LCDInit& (0+255),f,c
  1531  00103C  D7FC               	bra	u1657
  1532  00103E  F000               	nop	
  1533                           
  1534                           ;lcd.c: 138: WriteNibble(1, 0x03);
  1535  001040  0E03               	movlw	3
  1536  001042  6E26               	movwf	WriteNibble@data,c
  1537  001044  0E01               	movlw	1
  1538  001046  ECEE  F00A         	call	_WriteNibble
  1539                           
  1540                           ;lcd.c: 139: _delay(3000);
  1541  00104A  0E04               	movlw	4
  1542  00104C  6E29               	movwf	??_LCDInit& (0+255),c
  1543  00104E  0EE4               	movlw	228
  1544  001050                     u1667:
  1545  001050  2EE8               	decfsz	wreg,f,c
  1546  001052  D7FE               	bra	u1667
  1547  001054  2E29               	decfsz	??_LCDInit& (0+255),f,c
  1548  001056  D7FC               	bra	u1667
  1549  001058  D000               	nop2	
  1550                           
  1551                           ;lcd.c: 140: WriteNibble(1, 0x03);
  1552  00105A  0E03               	movlw	3
  1553  00105C  6E26               	movwf	WriteNibble@data,c
  1554  00105E  0E01               	movlw	1
  1555  001060  ECEE  F00A         	call	_WriteNibble
  1556                           
  1557                           ;lcd.c: 141: _delay(100);
  1558  001064  0E21               	movlw	33
  1559  001066                     u1677:
  1560  001066  2EE8               	decfsz	wreg,f,c
  1561  001068  D7FE               	bra	u1677
  1562  00106A  F000               	nop	
  1563                           
  1564                           ;lcd.c: 142: WriteNibble(1, 0x03);
  1565  00106C  0E03               	movlw	3
  1566  00106E  6E26               	movwf	WriteNibble@data,c
  1567  001070  0E01               	movlw	1
  1568  001072  ECEE  F00A         	call	_WriteNibble
  1569                           
  1570                           ;lcd.c: 143: _delay(100);
  1571  001076  0E21               	movlw	33
  1572  001078                     u1687:
  1573  001078  2EE8               	decfsz	wreg,f,c
  1574  00107A  D7FE               	bra	u1687
  1575  00107C  F000               	nop	
  1576                           
  1577                           ;lcd.c: 144: WriteNibble(1, 0b00000010);
  1578  00107E  0E02               	movlw	2
  1579  001080  6E26               	movwf	WriteNibble@data,c
  1580  001082  0E01               	movlw	1
  1581  001084  ECEE  F00A         	call	_WriteNibble
  1582                           
  1583                           ;lcd.c: 145: WaitLCD();
  1584  001088  EC07  F00C         	call	_WaitLCD	;wreg free
  1585                           
  1586                           ;lcd.c: 146: WriteNibble(1, 0b00000010);
  1587  00108C  0E02               	movlw	2
  1588  00108E  6E26               	movwf	WriteNibble@data,c
  1589  001090  0E01               	movlw	1
  1590  001092  ECEE  F00A         	call	_WriteNibble
  1591                           
  1592                           ;lcd.c: 147: WriteNibble(1, 0b00001000);
  1593  001096  0E08               	movlw	8
  1594  001098  6E26               	movwf	WriteNibble@data,c
  1595  00109A  0E01               	movlw	1
  1596  00109C  ECEE  F00A         	call	_WriteNibble
  1597                           
  1598                           ;lcd.c: 148: WaitLCD();
  1599  0010A0  EC07  F00C         	call	_WaitLCD	;wreg free
  1600                           
  1601                           ;lcd.c: 149: WriteNibble(1, 0b00000000);
  1602  0010A4  0E00               	movlw	0
  1603  0010A6  6E26               	movwf	WriteNibble@data,c
  1604  0010A8  0E01               	movlw	1
  1605  0010AA  ECEE  F00A         	call	_WriteNibble
  1606                           
  1607                           ;lcd.c: 150: WriteNibble(1, 0b00001000);
  1608  0010AE  0E08               	movlw	8
  1609  0010B0  6E26               	movwf	WriteNibble@data,c
  1610  0010B2  0E01               	movlw	1
  1611  0010B4  ECEE  F00A         	call	_WriteNibble
  1612                           
  1613                           ;lcd.c: 151: WaitLCD();
  1614  0010B8  EC07  F00C         	call	_WaitLCD	;wreg free
  1615                           
  1616                           ;lcd.c: 152: WriteNibble(1, 0b00000000);
  1617  0010BC  0E00               	movlw	0
  1618  0010BE  6E26               	movwf	WriteNibble@data,c
  1619  0010C0  0E01               	movlw	1
  1620  0010C2  ECEE  F00A         	call	_WriteNibble
  1621                           
  1622                           ;lcd.c: 153: WriteNibble(1, 0b00001100);
  1623  0010C6  0E0C               	movlw	12
  1624  0010C8  6E26               	movwf	WriteNibble@data,c
  1625  0010CA  0E01               	movlw	1
  1626  0010CC  ECEE  F00A         	call	_WriteNibble
  1627                           
  1628                           ;lcd.c: 155: WaitLCD();
  1629  0010D0  EC07  F00C         	call	_WaitLCD	;wreg free
  1630                           
  1631                           ;lcd.c: 156: WriteNibble(1, 0b00000000);
  1632  0010D4  0E00               	movlw	0
  1633  0010D6  6E26               	movwf	WriteNibble@data,c
  1634  0010D8  0E01               	movlw	1
  1635  0010DA  ECEE  F00A         	call	_WriteNibble
  1636                           
  1637                           ;lcd.c: 157: WriteNibble(1, 0b00000001);
  1638  0010DE  0E01               	movlw	1
  1639  0010E0  6E26               	movwf	WriteNibble@data,c
  1640  0010E2  0E01               	movlw	1
  1641  0010E4  ECEE  F00A         	call	_WriteNibble
  1642                           
  1643                           ;lcd.c: 158: WaitLCD();
  1644  0010E8  EC07  F00C         	call	_WaitLCD	;wreg free
  1645                           
  1646                           ;lcd.c: 159: WriteNibble(1, 0b00000000);
  1647  0010EC  0E00               	movlw	0
  1648  0010EE  6E26               	movwf	WriteNibble@data,c
  1649  0010F0  0E01               	movlw	1
  1650  0010F2  ECEE  F00A         	call	_WriteNibble
  1651                           
  1652                           ;lcd.c: 160: WriteNibble(1, 0b00000110);
  1653  0010F6  0E06               	movlw	6
  1654  0010F8  6E26               	movwf	WriteNibble@data,c
  1655  0010FA  0E01               	movlw	1
  1656  0010FC  ECEE  F00A         	call	_WriteNibble
  1657                           
  1658                           ;lcd.c: 161: WaitLCD();
  1659  001100  EC07  F00C         	call	_WaitLCD	;wreg free
  1660  001104  0012               	return		;funcret
  1661  001106                     __end_of_LCDInit:
  1662                           	opt stack 0
  1663                           tblptru	equ	0xFF8
  1664                           tblptrh	equ	0xFF7
  1665                           tblptrl	equ	0xFF6
  1666                           tablat	equ	0xFF5
  1667                           prodh	equ	0xFF4
  1668                           prodl	equ	0xFF3
  1669                           intcon	equ	0xFF2
  1670                           intcon2	equ	0xFF1
  1671                           intcon3	equ	0xFF0
  1672                           indf0	equ	0xFEF
  1673                           fsr0h	equ	0xFEA
  1674                           fsr0l	equ	0xFE9
  1675                           wreg	equ	0xFE8
  1676                           status	equ	0xFD8
  1677                           
  1678 ;; *************** function _LCDClear *****************
  1679 ;; Defined at:
  1680 ;;		line 164 in file "lcd.c"
  1681 ;; Parameters:    Size  Location     Type
  1682 ;;		None
  1683 ;; Auto vars:     Size  Location     Type
  1684 ;;		None
  1685 ;; Return value:  Size  Location     Type
  1686 ;;                  1    wreg      void 
  1687 ;; Registers used:
  1688 ;;		wreg, status,2, status,0, cstack
  1689 ;; Tracked objects:
  1690 ;;		On entry : 0/0
  1691 ;;		On exit  : 0/0
  1692 ;;		Unchanged: 0/0
  1693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1696 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1697 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1698 ;;Total ram usage:        1 bytes
  1699 ;; Hardware stack levels used:    1
  1700 ;; Hardware stack levels required when called:   10
  1701 ;; This function calls:
  1702 ;;		_WaitLCD
  1703 ;;		_WriteByte
  1704 ;; This function is called by:
  1705 ;;		_init_debug
  1706 ;; This function uses a non-reentrant model
  1707 ;;
  1708                           
  1709                           	psect	text11
  1710  00178C                     __ptext11:
  1711                           	opt stack 0
  1712  00178C                     _LCDClear:
  1713                           	opt stack 18
  1714                           
  1715                           ;lcd.c: 166: WriteByte(1, 0x01);
  1716                           
  1717                           ;incstack = 0
  1718  00178C  0E01               	movlw	1
  1719  00178E  6E29               	movwf	WriteByte@data,c
  1720  001790  0E01               	movlw	1
  1721  001792  ECE4  F00B         	call	_WriteByte
  1722                           
  1723                           ;lcd.c: 167: _delay(12500);
  1724  001796  0E11               	movlw	17
  1725  001798  6E2B               	movwf	??_LCDClear& (0+255),c
  1726  00179A  0E3A               	movlw	58
  1727  00179C                     u1697:
  1728  00179C  2EE8               	decfsz	wreg,f,c
  1729  00179E  D7FE               	bra	u1697
  1730  0017A0  2E2B               	decfsz	??_LCDClear& (0+255),f,c
  1731  0017A2  D7FC               	bra	u1697
  1732  0017A4  D000               	nop2	
  1733                           
  1734                           ;lcd.c: 168: WaitLCD();
  1735  0017A6  EC07  F00C         	call	_WaitLCD	;wreg free
  1736  0017AA  0012               	return		;funcret
  1737  0017AC                     __end_of_LCDClear:
  1738                           	opt stack 0
  1739                           tblptru	equ	0xFF8
  1740                           tblptrh	equ	0xFF7
  1741                           tblptrl	equ	0xFF6
  1742                           tablat	equ	0xFF5
  1743                           prodh	equ	0xFF4
  1744                           prodl	equ	0xFF3
  1745                           intcon	equ	0xFF2
  1746                           intcon2	equ	0xFF1
  1747                           intcon3	equ	0xFF0
  1748                           indf0	equ	0xFEF
  1749                           fsr0h	equ	0xFEA
  1750                           fsr0l	equ	0xFE9
  1751                           wreg	equ	0xFE8
  1752                           status	equ	0xFD8
  1753                           
  1754 ;; *************** function _WriteByte *****************
  1755 ;; Defined at:
  1756 ;;		line 83 in file "lcd.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  cmd             1    wreg     unsigned char 
  1759 ;;  data            1   40[COMRAM] unsigned char 
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;  cmd             1   41[COMRAM] unsigned char 
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  1    wreg      void 
  1764 ;; Registers used:
  1765 ;;		wreg, status,2, status,0, cstack
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1771 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1772 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1774 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1775 ;;Total ram usage:        2 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; Hardware stack levels required when called:    9
  1778 ;; This function calls:
  1779 ;;		_WriteNibble
  1780 ;; This function is called by:
  1781 ;;		_LCDClear
  1782 ;;		_LCDGoto
  1783 ;;		_LCDPutChar
  1784 ;;		_LCDShiftDisplay
  1785 ;; This function uses a non-reentrant model
  1786 ;;
  1787                           
  1788                           	psect	text12
  1789  0017C8                     __ptext12:
  1790                           	opt stack 0
  1791  0017C8                     _WriteByte:
  1792                           	opt stack 15
  1793                           
  1794                           ;incstack = 0
  1795                           ;WriteByte@cmd stored from wreg
  1796  0017C8  6E2A               	movwf	WriteByte@cmd,c
  1797                           
  1798                           ;lcd.c: 85: WriteNibble(cmd, data >> 4);
  1799  0017CA  3829               	swapf	WriteByte@data,w,c
  1800  0017CC  0B0F               	andlw	15
  1801  0017CE  6E26               	movwf	WriteNibble@data,c
  1802  0017D0  502A               	movf	WriteByte@cmd,w,c
  1803  0017D2  ECEE  F00A         	call	_WriteNibble
  1804                           
  1805                           ;lcd.c: 86: WriteNibble(cmd, data);
  1806  0017D6  C029  F026         	movff	WriteByte@data,WriteNibble@data
  1807  0017DA  502A               	movf	WriteByte@cmd,w,c
  1808  0017DC  ECEE  F00A         	call	_WriteNibble
  1809  0017E0  0012               	return		;funcret
  1810  0017E2                     __end_of_WriteByte:
  1811                           	opt stack 0
  1812                           tblptru	equ	0xFF8
  1813                           tblptrh	equ	0xFF7
  1814                           tblptrl	equ	0xFF6
  1815                           tablat	equ	0xFF5
  1816                           prodh	equ	0xFF4
  1817                           prodl	equ	0xFF3
  1818                           intcon	equ	0xFF2
  1819                           intcon2	equ	0xFF1
  1820                           intcon3	equ	0xFF0
  1821                           indf0	equ	0xFEF
  1822                           fsr0h	equ	0xFEA
  1823                           fsr0l	equ	0xFE9
  1824                           wreg	equ	0xFE8
  1825                           status	equ	0xFD8
  1826                           
  1827 ;; *************** function _WriteNibble *****************
  1828 ;; Defined at:
  1829 ;;		line 66 in file "lcd.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;  cmd             1    wreg     unsigned char 
  1832 ;;  data            1   37[COMRAM] unsigned char 
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;  cmd             1   39[COMRAM] unsigned char 
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  1    wreg      void 
  1837 ;; Registers used:
  1838 ;;		wreg, status,2, status,0
  1839 ;; Tracked objects:
  1840 ;;		On entry : 0/0
  1841 ;;		On exit  : 0/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1844 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1847 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1848 ;;Total ram usage:        3 bytes
  1849 ;; Hardware stack levels used:    1
  1850 ;; Hardware stack levels required when called:    8
  1851 ;; This function calls:
  1852 ;;		Nothing
  1853 ;; This function is called by:
  1854 ;;		_WriteByte
  1855 ;;		_LCDInit
  1856 ;; This function uses a non-reentrant model
  1857 ;;
  1858                           
  1859                           	psect	text13
  1860  0015DC                     __ptext13:
  1861                           	opt stack 0
  1862  0015DC                     _WriteNibble:
  1863                           	opt stack 15
  1864                           
  1865                           ;incstack = 0
  1866                           ;WriteNibble@cmd stored from wreg
  1867  0015DC  6E28               	movwf	WriteNibble@cmd,c
  1868                           
  1869                           ;lcd.c: 68: LATDbits.LATD4 = (cmd ? 0 : 1);
  1870  0015DE  5028               	movf	WriteNibble@cmd,w,c
  1871  0015E0  A4D8               	btfss	status,2,c
  1872  0015E2  D003               	goto	u1110
  1873  0015E4  6A27               	clrf	??_WriteNibble& (0+255),c
  1874  0015E6  2A27               	incf	??_WriteNibble& (0+255),f,c
  1875  0015E8  D001               	goto	u1128
  1876  0015EA                     u1110:
  1877  0015EA  6A27               	clrf	??_WriteNibble& (0+255),c
  1878  0015EC                     u1128:
  1879  0015EC  3A27               	swapf	??_WriteNibble,f,c
  1880  0015EE  508C               	movf	3980,w,c	;volatile
  1881  0015F0  1827               	xorwf	??_WriteNibble,w,c
  1882  0015F2  0BEF               	andlw	-17
  1883  0015F4  1827               	xorwf	??_WriteNibble,w,c
  1884  0015F6  6E8C               	movwf	3980,c	;volatile
  1885                           
  1886                           ;lcd.c: 69: LATDbits.LATD5 = 0;
  1887  0015F8  9A8C               	bcf	3980,5,c	;volatile
  1888                           
  1889                           ;lcd.c: 70: LATDbits.LATD6 = 1;
  1890  0015FA  8C8C               	bsf	3980,6,c	;volatile
  1891                           
  1892                           ;lcd.c: 72: LATDbits.LATD0 = LATDbits.LATD1 = LATDbits.LATD2 = LATDbits.LATD3 = 0;
  1893  0015FC  968C               	bcf	3980,3,c	;volatile
  1894  0015FE  948C               	bcf	3980,2,c	;volatile
  1895  001600  928C               	bcf	3980,1,c	;volatile
  1896  001602  908C               	bcf	3980,0,c	;volatile
  1897                           
  1898                           ;lcd.c: 73: __nop();
  1899  001604  F000               	nop	
  1900                           
  1901                           ;lcd.c: 74: __nop();
  1902  001606  F000               	nop	
  1903                           
  1904                           ;lcd.c: 76: LATD = (LATD & 0xF0) | (data & 0x0F);
  1905  001608  C026  F027         	movff	WriteNibble@data,??_WriteNibble
  1906  00160C  0E0F               	movlw	15
  1907  00160E  1627               	andwf	??_WriteNibble,f,c
  1908  001610  508C               	movf	3980,w,c	;volatile
  1909  001612  0BF0               	andlw	240
  1910  001614  1027               	iorwf	??_WriteNibble,w,c
  1911  001616  6E8C               	movwf	3980,c	;volatile
  1912                           
  1913                           ;lcd.c: 77: __nop();
  1914  001618  F000               	nop	
  1915                           
  1916                           ;lcd.c: 78: __nop();
  1917  00161A  F000               	nop	
  1918                           
  1919                           ;lcd.c: 80: LATDbits.LATD6 = 0;
  1920  00161C  9C8C               	bcf	3980,6,c	;volatile
  1921  00161E  0012               	return		;funcret
  1922  001620                     __end_of_WriteNibble:
  1923                           	opt stack 0
  1924                           tblptru	equ	0xFF8
  1925                           tblptrh	equ	0xFF7
  1926                           tblptrl	equ	0xFF6
  1927                           tablat	equ	0xFF5
  1928                           prodh	equ	0xFF4
  1929                           prodl	equ	0xFF3
  1930                           intcon	equ	0xFF2
  1931                           intcon2	equ	0xFF1
  1932                           intcon3	equ	0xFF0
  1933                           indf0	equ	0xFEF
  1934                           fsr0h	equ	0xFEA
  1935                           fsr0l	equ	0xFE9
  1936                           wreg	equ	0xFE8
  1937                           status	equ	0xFD8
  1938                           
  1939 ;; *************** function _WaitLCD *****************
  1940 ;; Defined at:
  1941 ;;		line 52 in file "lcd.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;		None
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;  status          1   38[COMRAM] unsigned char 
  1946 ;; Return value:  Size  Location     Type
  1947 ;;                  1    wreg      void 
  1948 ;; Registers used:
  1949 ;;		wreg, status,2, status,0, cstack
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1956 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1958 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;Total ram usage:        1 bytes
  1960 ;; Hardware stack levels used:    1
  1961 ;; Hardware stack levels required when called:    9
  1962 ;; This function calls:
  1963 ;;		_ReadByte
  1964 ;; This function is called by:
  1965 ;;		_LCDInit
  1966 ;;		_LCDClear
  1967 ;;		_LCDGoto
  1968 ;;		_LCDPutChar
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text14
  1973  00180E                     __ptext14:
  1974                           	opt stack 0
  1975  00180E                     _WaitLCD:
  1976                           	opt stack 15
  1977                           
  1978                           ;lcd.c: 54: UINT8_T status;
  1979                           ;lcd.c: 56: LATDbits.LATD4 = 0;
  1980                           
  1981                           ;incstack = 0
  1982  00180E  988C               	bcf	3980,4,c	;volatile
  1983                           
  1984                           ;lcd.c: 57: LATDbits.LATD5 = 1;
  1985  001810  8A8C               	bsf	3980,5,c	;volatile
  1986  001812                     l1945:
  1987                           
  1988                           ;lcd.c: 60: status = ReadByte();
  1989  001812  EC84  F00B         	call	_ReadByte	;wreg free
  1990  001816  6E27               	movwf	WaitLCD@status,c
  1991                           
  1992                           ;lcd.c: 61: } while (status & 0x80);
  1993  001818  BE27               	btfsc	WaitLCD@status,7,c
  1994  00181A  D7FB               	goto	l1945
  1995                           
  1996                           ;lcd.c: 63: LATDbits.LATD5 = 0;
  1997  00181C  9A8C               	bcf	3980,5,c	;volatile
  1998  00181E  0012               	return		;funcret
  1999  001820                     __end_of_WaitLCD:
  2000                           	opt stack 0
  2001                           tblptru	equ	0xFF8
  2002                           tblptrh	equ	0xFF7
  2003                           tblptrl	equ	0xFF6
  2004                           tablat	equ	0xFF5
  2005                           prodh	equ	0xFF4
  2006                           prodl	equ	0xFF3
  2007                           intcon	equ	0xFF2
  2008                           intcon2	equ	0xFF1
  2009                           intcon3	equ	0xFF0
  2010                           indf0	equ	0xFEF
  2011                           fsr0h	equ	0xFEA
  2012                           fsr0l	equ	0xFE9
  2013                           wreg	equ	0xFE8
  2014                           status	equ	0xFD8
  2015                           
  2016 ;; *************** function _ReadByte *****************
  2017 ;; Defined at:
  2018 ;;		line 21 in file "lcd.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;		None
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;  status          1   37[COMRAM] unsigned char 
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  1    wreg      unsigned char 
  2025 ;; Registers used:
  2026 ;;		wreg, status,2, status,0
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2033 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2035 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2036 ;;Total ram usage:        1 bytes
  2037 ;; Hardware stack levels used:    1
  2038 ;; Hardware stack levels required when called:    8
  2039 ;; This function calls:
  2040 ;;		Nothing
  2041 ;; This function is called by:
  2042 ;;		_WaitLCD
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           	psect	text15
  2047  001708                     __ptext15:
  2048                           	opt stack 0
  2049  001708                     _ReadByte:
  2050                           	opt stack 15
  2051                           
  2052                           ;lcd.c: 23: UINT8_T status;
  2053                           ;lcd.c: 25: TRISDbits.TRISD0 = 1;
  2054                           
  2055                           ;incstack = 0
  2056  001708  8095               	bsf	3989,0,c	;volatile
  2057                           
  2058                           ;lcd.c: 26: TRISDbits.TRISD1 = 1;
  2059  00170A  8295               	bsf	3989,1,c	;volatile
  2060                           
  2061                           ;lcd.c: 27: TRISDbits.TRISD2 = 1;
  2062  00170C  8495               	bsf	3989,2,c	;volatile
  2063                           
  2064                           ;lcd.c: 28: TRISDbits.TRISD3 = 1;
  2065  00170E  8695               	bsf	3989,3,c	;volatile
  2066                           
  2067                           ;lcd.c: 30: LATDbits.LATD6 = 1;
  2068  001710  8C8C               	bsf	3980,6,c	;volatile
  2069                           
  2070                           ;lcd.c: 31: __nop();
  2071  001712  F000               	nop	
  2072                           
  2073                           ;lcd.c: 32: __nop();
  2074  001714  F000               	nop	
  2075                           
  2076                           ;lcd.c: 34: status = PORTD << 4;
  2077  001716  3883               	swapf	3971,w,c	;volatile
  2078  001718  0BF0               	andlw	240
  2079  00171A  6E26               	movwf	ReadByte@status,c
  2080                           
  2081                           ;lcd.c: 35: LATDbits.LATD6 = 0;
  2082  00171C  9C8C               	bcf	3980,6,c	;volatile
  2083                           
  2084                           ;lcd.c: 37: LATDbits.LATD6 = 1;
  2085  00171E  8C8C               	bsf	3980,6,c	;volatile
  2086                           
  2087                           ;lcd.c: 38: __nop();
  2088  001720  F000               	nop	
  2089                           
  2090                           ;lcd.c: 39: __nop();
  2091  001722  F000               	nop	
  2092                           
  2093                           ;lcd.c: 41: status |= PORTD & 0x0F;
  2094  001724  5083               	movf	3971,w,c	;volatile
  2095  001726  0B0F               	andlw	15
  2096  001728  1226               	iorwf	ReadByte@status,f,c
  2097                           
  2098                           ;lcd.c: 42: LATDbits.LATD6 = 0;
  2099  00172A  9C8C               	bcf	3980,6,c	;volatile
  2100                           
  2101                           ;lcd.c: 44: TRISDbits.TRISD0 = 0;
  2102  00172C  9095               	bcf	3989,0,c	;volatile
  2103                           
  2104                           ;lcd.c: 45: TRISDbits.TRISD1 = 0;
  2105  00172E  9295               	bcf	3989,1,c	;volatile
  2106                           
  2107                           ;lcd.c: 46: TRISDbits.TRISD2 = 0;
  2108  001730  9495               	bcf	3989,2,c	;volatile
  2109                           
  2110                           ;lcd.c: 47: TRISDbits.TRISD3 = 0;
  2111  001732  9695               	bcf	3989,3,c	;volatile
  2112                           
  2113                           ;lcd.c: 49: return(status);
  2114  001734  5026               	movf	ReadByte@status,w,c
  2115  001736  0012               	return	
  2116  001738                     __end_of_ReadByte:
  2117                           	opt stack 0
  2118                           tblptru	equ	0xFF8
  2119                           tblptrh	equ	0xFF7
  2120                           tblptrl	equ	0xFF6
  2121                           tablat	equ	0xFF5
  2122                           prodh	equ	0xFF4
  2123                           prodl	equ	0xFF3
  2124                           intcon	equ	0xFF2
  2125                           intcon2	equ	0xFF1
  2126                           intcon3	equ	0xFF0
  2127                           indf0	equ	0xFEF
  2128                           fsr0h	equ	0xFEA
  2129                           fsr0l	equ	0xFE9
  2130                           wreg	equ	0xFE8
  2131                           status	equ	0xFD8
  2132                           
  2133 ;; *************** function _ISR *****************
  2134 ;; Defined at:
  2135 ;;		line 202 in file "main.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;		None
  2138 ;; Auto vars:     Size  Location     Type
  2139 ;;  i               2   35[COMRAM] int 
  2140 ;; Return value:  Size  Location     Type
  2141 ;;                  1    wreg      void 
  2142 ;; Registers used:
  2143 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2144 ;; Tracked objects:
  2145 ;;		On entry : 0/0
  2146 ;;		On exit  : 0/0
  2147 ;;		Unchanged: 0/0
  2148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2150 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2151 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2152 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2153 ;;Total ram usage:       17 bytes
  2154 ;; Hardware stack levels used:    1
  2155 ;; Hardware stack levels required when called:    7
  2156 ;; This function calls:
  2157 ;;		_flashlight
  2158 ;;		_pedometer
  2159 ;;		_searched
  2160 ;;		_synchronize
  2161 ;; This function is called by:
  2162 ;;		Interrupt level 2
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           	psect	intcode
  2167  000008                     __pintcode:
  2168                           	opt stack 0
  2169  000008                     _ISR:
  2170                           	opt stack 15
  2171                           
  2172                           ;incstack = 0
  2173  000008  8238               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2174  00000A  CFFA F016          	movff	pclath,??_ISR+1
  2175  00000E  CFFB F017          	movff	pclatu,??_ISR+2
  2176  000012  CFE9 F018          	movff	fsr0l,??_ISR+3
  2177  000016  CFEA F019          	movff	fsr0h,??_ISR+4
  2178  00001A  CFE1 F01A          	movff	fsr1l,??_ISR+5
  2179  00001E  CFE2 F01B          	movff	fsr1h,??_ISR+6
  2180  000022  CFD9 F01C          	movff	fsr2l,??_ISR+7
  2181  000026  CFDA F01D          	movff	fsr2h,??_ISR+8
  2182  00002A  CFF3 F01E          	movff	prodl,??_ISR+9
  2183  00002E  CFF4 F01F          	movff	prodh,??_ISR+10
  2184  000032  CFF6 F020          	movff	tblptrl,??_ISR+11
  2185  000036  CFF7 F021          	movff	tblptrh,??_ISR+12
  2186  00003A  CFF8 F022          	movff	tblptru,??_ISR+13
  2187  00003E  CFF5 F023          	movff	tablat,??_ISR+14
  2188                           
  2189                           ;main.c: 204: if (INTCONbits.INT0IF) { pedometer(); }
  2190  000042  B2F2               	btfsc	intcon,1,c	;volatile
  2191  000044  EC32  F00C         	call	_pedometer	;wreg free
  2192                           
  2193                           ;main.c: 205: if (INTCON3bits.INT1IF) { searched(); }
  2194  000048  B0F0               	btfsc	intcon3,0,c	;volatile
  2195  00004A  EC83  F008         	call	_searched	;wreg free
  2196                           
  2197                           ;main.c: 207: if (INTCON3bits.INT2IF) {
  2198  00004E  A2F0               	btfss	intcon3,1,c	;volatile
  2199  000050  D027               	goto	i2l82
  2200                           
  2201                           ;main.c: 209: int i = 0;
  2202  000052  0E00               	movlw	0
  2203  000054  6E25               	movwf	ISR@i+1,c
  2204  000056  0E00               	movlw	0
  2205  000058  6E24               	movwf	ISR@i,c
  2206                           
  2207                           ;main.c: 210: for (i = 0; i < 30; i++) {
  2208  00005A  0E00               	movlw	0
  2209  00005C  6E25               	movwf	ISR@i+1,c
  2210  00005E  0E00               	movlw	0
  2211  000060  6E24               	movwf	ISR@i,c
  2212  000062                     i2l2403:
  2213  000062  BE25               	btfsc	ISR@i+1,7,c
  2214  000064  D006               	goto	i2l77
  2215  000066  5025               	movf	ISR@i+1,w,c
  2216  000068  E111               	bnz	i2l2413
  2217  00006A  0E1E               	movlw	30
  2218  00006C  5C24               	subwf	ISR@i,w,c
  2219  00006E  B0D8               	btfsc	status,0,c
  2220  000070  D00D               	goto	i2l2413
  2221  000072                     i2l77:
  2222                           
  2223                           ;main.c: 211: if (!LATBbits.LATB2) { break ; }
  2224  000072  A48A               	btfss	3978,2,c	;volatile
  2225  000074  D00B               	goto	i2l2413
  2226                           
  2227                           ;main.c: 212: _delay(25000);
  2228  000076  0E21               	movlw	33
  2229  000078  6E15               	movwf	??_ISR& (0+255),c
  2230  00007A  0E76               	movlw	118
  2231  00007C                     i2u170_47:
  2232  00007C  2EE8               	decfsz	wreg,f,c
  2233  00007E  D7FE               	bra	i2u170_47
  2234  000080  2E15               	decfsz	??_ISR& (0+255),f,c
  2235  000082  D7FC               	bra	i2u170_47
  2236  000084  D000               	nop2	
  2237  000086  4A24               	infsnz	ISR@i,f,c
  2238  000088  2A25               	incf	ISR@i+1,f,c
  2239  00008A  D7EB               	goto	i2l2403
  2240  00008C                     i2l2413:
  2241                           
  2242                           ;main.c: 213: }
  2243                           ;main.c: 215: if (i == 30) { synchronize(); }
  2244  00008C  0E1E               	movlw	30
  2245  00008E  1824               	xorwf	ISR@i,w,c
  2246  000090  1025               	iorwf	ISR@i+1,w,c
  2247  000092  A4D8               	btfss	status,2,c
  2248  000094  D003               	goto	i2l2417
  2249  000096  EC38  F00C         	call	_synchronize	;wreg free
  2250  00009A  D002               	goto	i2l82
  2251  00009C                     i2l2417:
  2252                           
  2253                           ;main.c: 217: else { flashlight(); }
  2254  00009C  ECD6  F00B         	call	_flashlight	;wreg free
  2255  0000A0                     i2l82:
  2256  0000A0  C023  FFF5         	movff	??_ISR+14,tablat
  2257  0000A4  C022  FFF8         	movff	??_ISR+13,tblptru
  2258  0000A8  C021  FFF7         	movff	??_ISR+12,tblptrh
  2259  0000AC  C020  FFF6         	movff	??_ISR+11,tblptrl
  2260  0000B0  C01F  FFF4         	movff	??_ISR+10,prodh
  2261  0000B4  C01E  FFF3         	movff	??_ISR+9,prodl
  2262  0000B8  C01D  FFDA         	movff	??_ISR+8,fsr2h
  2263  0000BC  C01C  FFD9         	movff	??_ISR+7,fsr2l
  2264  0000C0  C01B  FFE2         	movff	??_ISR+6,fsr1h
  2265  0000C4  C01A  FFE1         	movff	??_ISR+5,fsr1l
  2266  0000C8  C019  FFEA         	movff	??_ISR+4,fsr0h
  2267  0000CC  C018  FFE9         	movff	??_ISR+3,fsr0l
  2268  0000D0  C017  FFFB         	movff	??_ISR+2,pclatu
  2269  0000D4  C016  FFFA         	movff	??_ISR+1,pclath
  2270  0000D8  9238               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2271  0000DA  0011               	retfie		f
  2272  0000DC                     __end_of_ISR:
  2273                           	opt stack 0
  2274                           pclatu	equ	0xFFB
  2275                           pclath	equ	0xFFA
  2276                           tblptru	equ	0xFF8
  2277                           tblptrh	equ	0xFF7
  2278                           tblptrl	equ	0xFF6
  2279                           tablat	equ	0xFF5
  2280                           prodh	equ	0xFF4
  2281                           prodl	equ	0xFF3
  2282                           intcon	equ	0xFF2
  2283                           intcon2	equ	0xFF1
  2284                           intcon3	equ	0xFF0
  2285                           indf0	equ	0xFEF
  2286                           fsr0h	equ	0xFEA
  2287                           fsr0l	equ	0xFE9
  2288                           wreg	equ	0xFE8
  2289                           fsr1h	equ	0xFE2
  2290                           fsr1l	equ	0xFE1
  2291                           fsr2h	equ	0xFDA
  2292                           fsr2l	equ	0xFD9
  2293                           status	equ	0xFD8
  2294                           
  2295 ;; *************** function _synchronize *****************
  2296 ;; Defined at:
  2297 ;;		line 195 in file "main.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;		None
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;		None
  2302 ;; Return value:  Size  Location     Type
  2303 ;;                  1    wreg      void 
  2304 ;; Registers used:
  2305 ;;		wreg, status,2
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2315 ;;Total ram usage:        0 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; This function calls:
  2318 ;;		Nothing
  2319 ;; This function is called by:
  2320 ;;		_ISR
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323                           
  2324                           	psect	text17
  2325  001870                     __ptext17:
  2326                           	opt stack 0
  2327  001870                     _synchronize:
  2328                           	opt stack 21
  2329                           
  2330                           ;main.c: 198: steps = 0;
  2331                           
  2332                           ;incstack = 0
  2333  001870  0E00               	movlw	0
  2334  001872  6E37               	movwf	_steps+1,c
  2335  001874  0E00               	movlw	0
  2336  001876  6E36               	movwf	_steps,c
  2337  001878  0012               	return		;funcret
  2338  00187A                     __end_of_synchronize:
  2339                           	opt stack 0
  2340                           pclatu	equ	0xFFB
  2341                           pclath	equ	0xFFA
  2342                           tblptru	equ	0xFF8
  2343                           tblptrh	equ	0xFF7
  2344                           tblptrl	equ	0xFF6
  2345                           tablat	equ	0xFF5
  2346                           prodh	equ	0xFF4
  2347                           prodl	equ	0xFF3
  2348                           intcon	equ	0xFF2
  2349                           intcon2	equ	0xFF1
  2350                           intcon3	equ	0xFF0
  2351                           indf0	equ	0xFEF
  2352                           fsr0h	equ	0xFEA
  2353                           fsr0l	equ	0xFE9
  2354                           wreg	equ	0xFE8
  2355                           fsr1h	equ	0xFE2
  2356                           fsr1l	equ	0xFE1
  2357                           fsr2h	equ	0xFDA
  2358                           fsr2l	equ	0xFD9
  2359                           status	equ	0xFD8
  2360                           
  2361 ;; *************** function _searched *****************
  2362 ;; Defined at:
  2363 ;;		line 169 in file "main.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;		None
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;  time            2   18[COMRAM] int 
  2368 ;;  i               2   16[COMRAM] int 
  2369 ;; Return value:  Size  Location     Type
  2370 ;;                  1    wreg      void 
  2371 ;; Registers used:
  2372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2373 ;; Tracked objects:
  2374 ;;		On entry : 0/0
  2375 ;;		On exit  : 0/0
  2376 ;;		Unchanged: 0/0
  2377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2379 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2380 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2381 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2382 ;;Total ram usage:        6 bytes
  2383 ;; Hardware stack levels used:    1
  2384 ;; Hardware stack levels required when called:    1
  2385 ;; This function calls:
  2386 ;;		_flashlight
  2387 ;;		i2___awdiv
  2388 ;;		i2___awmod
  2389 ;; This function is called by:
  2390 ;;		_ISR
  2391 ;; This function uses a non-reentrant model
  2392 ;;
  2393                           
  2394                           	psect	text18
  2395  001106                     __ptext18:
  2396                           	opt stack 0
  2397  001106                     _searched:
  2398                           	opt stack 20
  2399                           
  2400                           ;main.c: 171: int time = 10, i = 0;
  2401                           
  2402                           ;incstack = 0
  2403  001106  0E00               	movlw	0
  2404  001108  6E14               	movwf	searched@time+1,c
  2405  00110A  0E0A               	movlw	10
  2406  00110C  6E13               	movwf	searched@time,c
  2407  00110E  0E00               	movlw	0
  2408  001110  6E12               	movwf	searched@i+1,c
  2409  001112  0E00               	movlw	0
  2410  001114  6E11               	movwf	searched@i,c
  2411                           
  2412                           ;main.c: 174: while (time-- > 0) {
  2413  001116  D050               	goto	i2l2383
  2414  001118                     i2l2367:
  2415                           
  2416                           ;main.c: 177: PR2bits.PR2 = kiwi_frequence[time%kiwi_length];
  2417  001118  C013  F001         	movff	searched@time,i2___awmod@dividend
  2418  00111C  C014  F002         	movff	searched@time+1,i2___awmod@dividend+1
  2419  001120  C035  F003         	movff	_kiwi_length,i2___awmod@divisor
  2420  001124  6A04               	clrf	i2___awmod@divisor+1,c
  2421  001126  EC2C  F00A         	call	i2___awmod	;wreg free
  2422  00112A  0E33               	movlw	low _kiwi_frequence
  2423  00112C  2401               	addwf	?i2___awmod,w,c
  2424  00112E  6ED9               	movwf	fsr2l,c
  2425  001130  0E00               	movlw	high _kiwi_frequence
  2426  001132  2002               	addwfc	?i2___awmod+1,w,c
  2427  001134  6EDA               	movwf	fsr2h,c
  2428  001136  50DF               	movf	indf2,w,c
  2429  001138  6EBB               	movwf	4027,c	;volatile
  2430                           
  2431                           ;main.c: 178: CCPR1Lbits.CCPR1L = (unsigned char) ((kiwi_frequence[time%kiwi_length] + 1
      +                          )/2) ;
  2432  00113A  C035  F003         	movff	_kiwi_length,i2___awmod@divisor
  2433  00113E  6A04               	clrf	i2___awmod@divisor+1,c
  2434  001140  C013  F001         	movff	searched@time,i2___awmod@dividend
  2435  001144  C014  F002         	movff	searched@time+1,i2___awmod@dividend+1
  2436  001148  EC2C  F00A         	call	i2___awmod	;wreg free
  2437  00114C  0E33               	movlw	low _kiwi_frequence
  2438  00114E  2401               	addwf	?i2___awmod,w,c
  2439  001150  6ED9               	movwf	fsr2l,c
  2440  001152  0E00               	movlw	high _kiwi_frequence
  2441  001154  2002               	addwfc	?i2___awmod+1,w,c
  2442  001156  6EDA               	movwf	fsr2h,c
  2443  001158  50DF               	movf	indf2,w,c
  2444  00115A  6E0F               	movwf	??_searched& (0+255),c
  2445  00115C  0E01               	movlw	1
  2446  00115E  240F               	addwf	??_searched,w,c
  2447  001160  6E07               	movwf	i2___awdiv@dividend,c
  2448  001162  6A08               	clrf	i2___awdiv@dividend+1,c
  2449  001164  0E00               	movlw	0
  2450  001166  2208               	addwfc	i2___awdiv@dividend+1,f,c
  2451  001168  0E00               	movlw	0
  2452  00116A  6E0A               	movwf	i2___awdiv@divisor+1,c
  2453  00116C  0E02               	movlw	2
  2454  00116E  6E09               	movwf	i2___awdiv@divisor,c
  2455  001170  EC32  F009         	call	i2___awdiv	;wreg free
  2456  001174  5007               	movf	?i2___awdiv,w,c
  2457  001176  6EBE               	movwf	4030,c	;volatile
  2458                           
  2459                           ;main.c: 180: flashlight();
  2460  001178  ECD6  F00B         	call	_flashlight	;wreg free
  2461                           
  2462                           ;main.c: 182: for (i = 0; i < 10; i++) {
  2463  00117C  0E00               	movlw	0
  2464  00117E  6E12               	movwf	searched@i+1,c
  2465  001180  0E00               	movlw	0
  2466  001182  6E11               	movwf	searched@i,c
  2467  001184                     i2l2373:
  2468  001184  BE12               	btfsc	searched@i+1,7,c
  2469  001186  D006               	goto	i2l62
  2470  001188  5012               	movf	searched@i+1,w,c
  2471  00118A  E116               	bnz	i2l2383
  2472  00118C  0E0A               	movlw	10
  2473  00118E  5C11               	subwf	searched@i,w,c
  2474  001190  B0D8               	btfsc	status,0,c
  2475  001192  D012               	goto	i2l2383
  2476  001194                     i2l62:
  2477                           
  2478                           ;main.c: 183: if (INTCON3bits.INT2IF) { time = 0; break ; }
  2479  001194  A2F0               	btfss	intcon3,1,c	;volatile
  2480  001196  D005               	goto	i2l2379
  2481  001198  0E00               	movlw	0
  2482  00119A  6E14               	movwf	searched@time+1,c
  2483  00119C  0E00               	movlw	0
  2484  00119E  6E13               	movwf	searched@time,c
  2485  0011A0  D00B               	goto	i2l2383
  2486  0011A2                     i2l2379:
  2487                           
  2488                           ;main.c: 184: _delay(25000);
  2489  0011A2  0E21               	movlw	33
  2490  0011A4  6E0F               	movwf	??_searched& (0+255),c
  2491  0011A6  0E76               	movlw	118
  2492  0011A8                     i2u171_47:
  2493  0011A8  2EE8               	decfsz	wreg,f,c
  2494  0011AA  D7FE               	bra	i2u171_47
  2495  0011AC  2E0F               	decfsz	??_searched& (0+255),f,c
  2496  0011AE  D7FC               	bra	i2u171_47
  2497  0011B0  D000               	nop2	
  2498  0011B2  4A11               	infsnz	searched@i,f,c
  2499  0011B4  2A12               	incf	searched@i+1,f,c
  2500  0011B6  D7E6               	goto	i2l2373
  2501  0011B8                     i2l2383:
  2502  0011B8  5013               	movf	searched@time,w,c
  2503  0011BA  6E0F               	movwf	??_searched& (0+255),c
  2504  0011BC  5014               	movf	searched@time+1,w,c
  2505  0011BE  6E10               	movwf	(??_searched+1)& (0+255),c
  2506  0011C0  0E01               	movlw	1
  2507  0011C2  5E13               	subwf	searched@time,f,c
  2508  0011C4  0E00               	movlw	0
  2509  0011C6  5A14               	subwfb	searched@time+1,f,c
  2510  0011C8  BE10               	btfsc	??_searched+1,7,c
  2511  0011CA  D005               	goto	i2l2385
  2512  0011CC  5010               	movf	??_searched+1,w,c
  2513  0011CE  E1A4               	bnz	i2l2367
  2514  0011D0  040F               	decf	??_searched,w,c
  2515  0011D2  B0D8               	btfsc	status,0,c
  2516  0011D4  D7A1               	goto	i2l2367
  2517  0011D6                     i2l2385:
  2518                           
  2519                           ;main.c: 185: }
  2520                           ;main.c: 186: }
  2521                           ;main.c: 189: CCPR1Lbits.CCPR1L = 0 ;
  2522  0011D6  0E00               	movlw	0
  2523  0011D8  6EBE               	movwf	4030,c	;volatile
  2524                           
  2525                           ;main.c: 190: LATCbits.LATC1 = 0;
  2526  0011DA  928B               	bcf	3979,1,c	;volatile
  2527                           
  2528                           ;main.c: 191: INTCON3bits.INT2IF = 0;
  2529  0011DC  92F0               	bcf	intcon3,1,c	;volatile
  2530  0011DE  0012               	return		;funcret
  2531  0011E0                     __end_of_searched:
  2532                           	opt stack 0
  2533                           pclatu	equ	0xFFB
  2534                           pclath	equ	0xFFA
  2535                           tblptru	equ	0xFF8
  2536                           tblptrh	equ	0xFF7
  2537                           tblptrl	equ	0xFF6
  2538                           tablat	equ	0xFF5
  2539                           prodh	equ	0xFF4
  2540                           prodl	equ	0xFF3
  2541                           intcon	equ	0xFF2
  2542                           intcon2	equ	0xFF1
  2543                           intcon3	equ	0xFF0
  2544                           indf0	equ	0xFEF
  2545                           fsr0h	equ	0xFEA
  2546                           fsr0l	equ	0xFE9
  2547                           wreg	equ	0xFE8
  2548                           fsr1h	equ	0xFE2
  2549                           fsr1l	equ	0xFE1
  2550                           indf2	equ	0xFDF
  2551                           fsr2h	equ	0xFDA
  2552                           fsr2l	equ	0xFD9
  2553                           status	equ	0xFD8
  2554                           
  2555 ;; *************** function _flashlight *****************
  2556 ;; Defined at:
  2557 ;;		line 157 in file "main.c"
  2558 ;; Parameters:    Size  Location     Type
  2559 ;;		None
  2560 ;; Auto vars:     Size  Location     Type
  2561 ;;		None
  2562 ;; Return value:  Size  Location     Type
  2563 ;;                  1    wreg      void 
  2564 ;; Registers used:
  2565 ;;		wreg, status,2, status,0
  2566 ;; Tracked objects:
  2567 ;;		On entry : 0/0
  2568 ;;		On exit  : 0/0
  2569 ;;		Unchanged: 0/0
  2570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2573 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2574 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2575 ;;Total ram usage:        1 bytes
  2576 ;; Hardware stack levels used:    1
  2577 ;; This function calls:
  2578 ;;		Nothing
  2579 ;; This function is called by:
  2580 ;;		_searched
  2581 ;;		_ISR
  2582 ;; This function uses a non-reentrant model
  2583 ;;
  2584                           
  2585                           	psect	text19
  2586  0017AC                     __ptext19:
  2587                           	opt stack 0
  2588  0017AC                     _flashlight:
  2589                           	opt stack 20
  2590                           
  2591                           ;main.c: 159: LATCbits.LATC1 = (unsigned char) !LATCbits.LATC1;
  2592                           
  2593                           ;incstack = 0
  2594  0017AC  B28B               	btfsc	3979,1,c	;volatile
  2595  0017AE  D003               	goto	i2u43_40
  2596  0017B0  6A01               	clrf	??_flashlight& (0+255),c
  2597  0017B2  2A01               	incf	??_flashlight& (0+255),f,c
  2598  0017B4  D001               	goto	i2u44_48
  2599  0017B6                     i2u43_40:
  2600  0017B6  6A01               	clrf	??_flashlight& (0+255),c
  2601  0017B8                     i2u44_48:
  2602  0017B8  4601               	rlncf	??_flashlight,f,c
  2603  0017BA  508B               	movf	3979,w,c	;volatile
  2604  0017BC  1801               	xorwf	??_flashlight,w,c
  2605  0017BE  0BFD               	andlw	-3
  2606  0017C0  1801               	xorwf	??_flashlight,w,c
  2607  0017C2  6E8B               	movwf	3979,c	;volatile
  2608                           
  2609                           ;main.c: 161: INTCON3bits.INT1IF = 0;
  2610  0017C4  90F0               	bcf	intcon3,0,c	;volatile
  2611  0017C6  0012               	return		;funcret
  2612  0017C8                     __end_of_flashlight:
  2613                           	opt stack 0
  2614                           pclatu	equ	0xFFB
  2615                           pclath	equ	0xFFA
  2616                           tblptru	equ	0xFF8
  2617                           tblptrh	equ	0xFF7
  2618                           tblptrl	equ	0xFF6
  2619                           tablat	equ	0xFF5
  2620                           prodh	equ	0xFF4
  2621                           prodl	equ	0xFF3
  2622                           intcon	equ	0xFF2
  2623                           intcon2	equ	0xFF1
  2624                           intcon3	equ	0xFF0
  2625                           indf0	equ	0xFEF
  2626                           fsr0h	equ	0xFEA
  2627                           fsr0l	equ	0xFE9
  2628                           wreg	equ	0xFE8
  2629                           fsr1h	equ	0xFE2
  2630                           fsr1l	equ	0xFE1
  2631                           indf2	equ	0xFDF
  2632                           fsr2h	equ	0xFDA
  2633                           fsr2l	equ	0xFD9
  2634                           status	equ	0xFD8
  2635                           
  2636 ;; *************** function _pedometer *****************
  2637 ;; Defined at:
  2638 ;;		line 146 in file "main.c"
  2639 ;; Parameters:    Size  Location     Type
  2640 ;;		None
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;		None
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  1    wreg      void 
  2645 ;; Registers used:
  2646 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2656 ;;Total ram usage:        0 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    6
  2659 ;; This function calls:
  2660 ;;		i2_show_debug
  2661 ;; This function is called by:
  2662 ;;		_ISR
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           	psect	text20
  2667  001864                     __ptext20:
  2668                           	opt stack 0
  2669  001864                     _pedometer:
  2670                           	opt stack 15
  2671                           
  2672                           ;main.c: 148: steps++;
  2673                           
  2674                           ;incstack = 0
  2675  001864  4A36               	infsnz	_steps,f,c
  2676  001866  2A37               	incf	_steps+1,f,c
  2677                           
  2678                           ;main.c: 150: INTCONbits.INT0IF = 0 ;
  2679  001868  92F2               	bcf	intcon,1,c	;volatile
  2680                           
  2681                           ;main.c: 153: show_debug();
  2682  00186A  EC2A  F00C         	call	i2_show_debug	;wreg free
  2683  00186E  0012               	return		;funcret
  2684  001870                     __end_of_pedometer:
  2685                           	opt stack 0
  2686                           pclatu	equ	0xFFB
  2687                           pclath	equ	0xFFA
  2688                           tblptru	equ	0xFF8
  2689                           tblptrh	equ	0xFF7
  2690                           tblptrl	equ	0xFF6
  2691                           tablat	equ	0xFF5
  2692                           prodh	equ	0xFF4
  2693                           prodl	equ	0xFF3
  2694                           intcon	equ	0xFF2
  2695                           intcon2	equ	0xFF1
  2696                           intcon3	equ	0xFF0
  2697                           indf0	equ	0xFEF
  2698                           fsr0h	equ	0xFEA
  2699                           fsr0l	equ	0xFE9
  2700                           wreg	equ	0xFE8
  2701                           fsr1h	equ	0xFE2
  2702                           fsr1l	equ	0xFE1
  2703                           indf2	equ	0xFDF
  2704                           fsr2h	equ	0xFDA
  2705                           fsr2l	equ	0xFD9
  2706                           status	equ	0xFD8
  2707                           
  2708 ;; *************** function i2_show_debug *****************
  2709 ;; Defined at:
  2710 ;;		line 76 in file "main.c"
  2711 ;; Parameters:    Size  Location     Type
  2712 ;;		None
  2713 ;; Auto vars:     Size  Location     Type
  2714 ;;		None
  2715 ;; Return value:  Size  Location     Type
  2716 ;;                  1    wreg      void 
  2717 ;; Registers used:
  2718 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2719 ;; Tracked objects:
  2720 ;;		On entry : 0/0
  2721 ;;		On exit  : 0/0
  2722 ;;		Unchanged: 0/0
  2723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;Total ram usage:        0 bytes
  2729 ;; Hardware stack levels used:    1
  2730 ;; Hardware stack levels required when called:    5
  2731 ;; This function calls:
  2732 ;;		i2_LCDWriteInt
  2733 ;; This function is called by:
  2734 ;;		_pedometer
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           	psect	text21
  2739  001854                     __ptext21:
  2740                           	opt stack 0
  2741  001854                     i2_show_debug:
  2742                           	opt stack 15
  2743                           
  2744                           ;main.c: 77: LCDWriteInt(0, 1, steps);
  2745                           
  2746                           ;incstack = 0
  2747  001854  0E01               	movlw	1
  2748  001856  6E0F               	movwf	i2LCDWriteInt@row,c
  2749  001858  C036  F010         	movff	_steps,i2LCDWriteInt@value
  2750  00185C  0E00               	movlw	0
  2751  00185E  ECC7  F00A         	call	i2_LCDWriteInt
  2752  001862  0012               	return		;funcret
  2753  001864                     __end_ofi2_show_debug:
  2754                           	opt stack 0
  2755                           pclatu	equ	0xFFB
  2756                           pclath	equ	0xFFA
  2757                           tblptru	equ	0xFF8
  2758                           tblptrh	equ	0xFF7
  2759                           tblptrl	equ	0xFF6
  2760                           tablat	equ	0xFF5
  2761                           prodh	equ	0xFF4
  2762                           prodl	equ	0xFF3
  2763                           intcon	equ	0xFF2
  2764                           intcon2	equ	0xFF1
  2765                           intcon3	equ	0xFF0
  2766                           indf0	equ	0xFEF
  2767                           fsr0h	equ	0xFEA
  2768                           fsr0l	equ	0xFE9
  2769                           wreg	equ	0xFE8
  2770                           fsr1h	equ	0xFE2
  2771                           fsr1l	equ	0xFE1
  2772                           indf2	equ	0xFDF
  2773                           fsr2h	equ	0xFDA
  2774                           fsr2l	equ	0xFD9
  2775                           status	equ	0xFD8
  2776                           
  2777 ;; *************** function i2_LCDWriteInt *****************
  2778 ;; Defined at:
  2779 ;;		line 229 in file "lcd.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;  column          1    wreg     unsigned char 
  2782 ;;  row             1   14[COMRAM] unsigned char 
  2783 ;;  value           1   15[COMRAM] unsigned char 
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;  column          1   19[COMRAM] unsigned char 
  2786 ;;  LCDWriteInt     3   16[COMRAM] unsigned char [3]
  2787 ;; Return value:  Size  Location     Type
  2788 ;;                  1    wreg      void 
  2789 ;; Registers used:
  2790 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2796 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2797 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;Total ram usage:        6 bytes
  2801 ;; Hardware stack levels used:    1
  2802 ;; Hardware stack levels required when called:    4
  2803 ;; This function calls:
  2804 ;;		i2_LCDGoto
  2805 ;;		i2_LCDWriteStr
  2806 ;;		i2___awdiv
  2807 ;;		i2___awmod
  2808 ;; This function is called by:
  2809 ;;		i2_show_debug
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           	psect	text22
  2814  00158E                     __ptext22:
  2815                           	opt stack 0
  2816  00158E                     i2_LCDWriteInt:
  2817                           	opt stack 15
  2818                           
  2819                           ;incstack = 0
  2820                           ;i2LCDWriteInt@column stored from wreg
  2821  00158E  6E14               	movwf	i2LCDWriteInt@column,c
  2822                           
  2823                           ;lcd.c: 230: char string[3];
  2824                           ;lcd.c: 232: string[0] = value / 10 + '0';
  2825  001590  C010  F007         	movff	i2LCDWriteInt@value,i2___awdiv@dividend
  2826  001594  6A08               	clrf	i2___awdiv@dividend+1,c
  2827  001596  0E00               	movlw	0
  2828  001598  6E0A               	movwf	i2___awdiv@divisor+1,c
  2829  00159A  0E0A               	movlw	10
  2830  00159C  6E09               	movwf	i2___awdiv@divisor,c
  2831  00159E  EC32  F009         	call	i2___awdiv	;wreg free
  2832  0015A2  5007               	movf	?i2___awdiv,w,c
  2833  0015A4  0F30               	addlw	48
  2834  0015A6  6E11               	movwf	i2LCDWriteInt@string,c
  2835                           
  2836                           ;lcd.c: 233: string[1] = value % 10 + '0';
  2837  0015A8  C010  F001         	movff	i2LCDWriteInt@value,i2___awmod@dividend
  2838  0015AC  6A02               	clrf	i2___awmod@dividend+1,c
  2839  0015AE  0E00               	movlw	0
  2840  0015B0  6E04               	movwf	i2___awmod@divisor+1,c
  2841  0015B2  0E0A               	movlw	10
  2842  0015B4  6E03               	movwf	i2___awmod@divisor,c
  2843  0015B6  EC2C  F00A         	call	i2___awmod	;wreg free
  2844  0015BA  5001               	movf	?i2___awmod,w,c
  2845  0015BC  0F30               	addlw	48
  2846  0015BE  6E12               	movwf	i2LCDWriteInt@string+1,c
  2847                           
  2848                           ;lcd.c: 234: string[2] = '\0';
  2849  0015C0  0E00               	movlw	0
  2850  0015C2  6E13               	movwf	i2LCDWriteInt@string+2,c
  2851                           
  2852                           ;lcd.c: 236: LCDGoto(column, row);
  2853  0015C4  C00F  F006         	movff	i2LCDWriteInt@row,i2LCDGoto@row
  2854  0015C8  5014               	movf	i2LCDWriteInt@column,w,c
  2855  0015CA  EC4F  F00B         	call	i2_LCDGoto
  2856                           
  2857                           ;lcd.c: 237: LCDWriteStr(string);
  2858  0015CE  0E11               	movlw	low i2LCDWriteInt@string
  2859  0015D0  6E07               	movwf	i2LCDWriteStr@string,c
  2860  0015D2  0E00               	movlw	high i2LCDWriteInt@string
  2861  0015D4  6E08               	movwf	i2LCDWriteStr@string+1,c
  2862  0015D6  ECB4  F009         	call	i2_LCDWriteStr	;wreg free
  2863  0015DA  0012               	return		;funcret
  2864  0015DC                     __end_ofi2_LCDWriteInt:
  2865                           	opt stack 0
  2866                           pclatu	equ	0xFFB
  2867                           pclath	equ	0xFFA
  2868                           tblptru	equ	0xFF8
  2869                           tblptrh	equ	0xFF7
  2870                           tblptrl	equ	0xFF6
  2871                           tablat	equ	0xFF5
  2872                           prodh	equ	0xFF4
  2873                           prodl	equ	0xFF3
  2874                           intcon	equ	0xFF2
  2875                           intcon2	equ	0xFF1
  2876                           intcon3	equ	0xFF0
  2877                           indf0	equ	0xFEF
  2878                           fsr0h	equ	0xFEA
  2879                           fsr0l	equ	0xFE9
  2880                           wreg	equ	0xFE8
  2881                           fsr1h	equ	0xFE2
  2882                           fsr1l	equ	0xFE1
  2883                           indf2	equ	0xFDF
  2884                           fsr2h	equ	0xFDA
  2885                           fsr2l	equ	0xFD9
  2886                           status	equ	0xFD8
  2887                           
  2888 ;; *************** function i2___awmod *****************
  2889 ;; Defined at:
  2890 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;  dividend        2    0[COMRAM] int 
  2893 ;;  divisor         2    2[COMRAM] int 
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;  __awmod         1    5[COMRAM] unsigned char 
  2896 ;;  __awmod         1    4[COMRAM] unsigned char 
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  2    0[COMRAM] int 
  2899 ;; Registers used:
  2900 ;;		wreg, status,2, status,0
  2901 ;; Tracked objects:
  2902 ;;		On entry : 0/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2906 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;Total ram usage:        6 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; This function calls:
  2913 ;;		Nothing
  2914 ;; This function is called by:
  2915 ;;		_searched
  2916 ;;		i2_LCDWriteInt
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           	psect	text23
  2921  001458                     __ptext23:
  2922                           	opt stack 0
  2923  001458                     i2___awmod:
  2924                           	opt stack 20
  2925                           
  2926                           ;incstack = 0
  2927  001458  0E00               	movlw	0
  2928  00145A  6E06               	movwf	i2___awmod@sign,c
  2929  00145C  AE02               	btfss	i2___awmod@dividend+1,7,c
  2930  00145E  D006               	goto	i2l2191
  2931  001460  6C01               	negf	i2___awmod@dividend,c
  2932  001462  1E02               	comf	i2___awmod@dividend+1,f,c
  2933  001464  B0D8               	btfsc	status,0,c
  2934  001466  2A02               	incf	i2___awmod@dividend+1,f,c
  2935  001468  0E01               	movlw	1
  2936  00146A  6E06               	movwf	i2___awmod@sign,c
  2937  00146C                     i2l2191:
  2938  00146C  AE04               	btfss	i2___awmod@divisor+1,7,c
  2939  00146E  D004               	goto	i2l2195
  2940  001470  6C03               	negf	i2___awmod@divisor,c
  2941  001472  1E04               	comf	i2___awmod@divisor+1,f,c
  2942  001474  B0D8               	btfsc	status,0,c
  2943  001476  2A04               	incf	i2___awmod@divisor+1,f,c
  2944  001478                     i2l2195:
  2945  001478  5003               	movf	i2___awmod@divisor,w,c
  2946  00147A  1004               	iorwf	i2___awmod@divisor+1,w,c
  2947  00147C  B4D8               	btfsc	status,2,c
  2948  00147E  D018               	goto	i2l2211
  2949  001480  0E01               	movlw	1
  2950  001482  6E05               	movwf	i2___awmod@counter,c
  2951  001484  D004               	goto	i2l2201
  2952  001486                     i2l2199:
  2953  001486  90D8               	bcf	status,0,c
  2954  001488  3603               	rlcf	i2___awmod@divisor,f,c
  2955  00148A  3604               	rlcf	i2___awmod@divisor+1,f,c
  2956  00148C  2A05               	incf	i2___awmod@counter,f,c
  2957  00148E                     i2l2201:
  2958  00148E  AE04               	btfss	i2___awmod@divisor+1,7,c
  2959  001490  D7FA               	goto	i2l2199
  2960  001492                     i2l2203:
  2961  001492  5003               	movf	i2___awmod@divisor,w,c
  2962  001494  5C01               	subwf	i2___awmod@dividend,w,c
  2963  001496  5004               	movf	i2___awmod@divisor+1,w,c
  2964  001498  5802               	subwfb	i2___awmod@dividend+1,w,c
  2965  00149A  A0D8               	btfss	status,0,c
  2966  00149C  D004               	goto	i2l2207
  2967  00149E  5003               	movf	i2___awmod@divisor,w,c
  2968  0014A0  5E01               	subwf	i2___awmod@dividend,f,c
  2969  0014A2  5004               	movf	i2___awmod@divisor+1,w,c
  2970  0014A4  5A02               	subwfb	i2___awmod@dividend+1,f,c
  2971  0014A6                     i2l2207:
  2972  0014A6  90D8               	bcf	status,0,c
  2973  0014A8  3204               	rrcf	i2___awmod@divisor+1,f,c
  2974  0014AA  3203               	rrcf	i2___awmod@divisor,f,c
  2975  0014AC  2E05               	decfsz	i2___awmod@counter,f,c
  2976  0014AE  D7F1               	goto	i2l2203
  2977  0014B0                     i2l2211:
  2978  0014B0  5006               	movf	i2___awmod@sign,w,c
  2979  0014B2  B4D8               	btfsc	status,2,c
  2980  0014B4  D004               	goto	i2l2215
  2981  0014B6  6C01               	negf	i2___awmod@dividend,c
  2982  0014B8  1E02               	comf	i2___awmod@dividend+1,f,c
  2983  0014BA  B0D8               	btfsc	status,0,c
  2984  0014BC  2A02               	incf	i2___awmod@dividend+1,f,c
  2985  0014BE                     i2l2215:
  2986  0014BE  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  2987  0014C2  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  2988  0014C6  0012               	return	
  2989  0014C8                     __end_ofi2___awmod:
  2990                           	opt stack 0
  2991                           pclatu	equ	0xFFB
  2992                           pclath	equ	0xFFA
  2993                           tblptru	equ	0xFF8
  2994                           tblptrh	equ	0xFF7
  2995                           tblptrl	equ	0xFF6
  2996                           tablat	equ	0xFF5
  2997                           prodh	equ	0xFF4
  2998                           prodl	equ	0xFF3
  2999                           intcon	equ	0xFF2
  3000                           intcon2	equ	0xFF1
  3001                           intcon3	equ	0xFF0
  3002                           indf0	equ	0xFEF
  3003                           fsr0h	equ	0xFEA
  3004                           fsr0l	equ	0xFE9
  3005                           wreg	equ	0xFE8
  3006                           fsr1h	equ	0xFE2
  3007                           fsr1l	equ	0xFE1
  3008                           indf2	equ	0xFDF
  3009                           fsr2h	equ	0xFDA
  3010                           fsr2l	equ	0xFD9
  3011                           status	equ	0xFD8
  3012                           
  3013 ;; *************** function i2___awdiv *****************
  3014 ;; Defined at:
  3015 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;  dividend        2    6[COMRAM] int 
  3018 ;;  divisor         2    8[COMRAM] int 
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;  __awdiv         2   12[COMRAM] int 
  3021 ;;  __awdiv         1   11[COMRAM] unsigned char 
  3022 ;;  __awdiv         1   10[COMRAM] unsigned char 
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  2    6[COMRAM] int 
  3025 ;; Registers used:
  3026 ;;		wreg, status,2, status,0
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3032 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3036 ;;Total ram usage:        8 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; This function calls:
  3039 ;;		Nothing
  3040 ;; This function is called by:
  3041 ;;		_searched
  3042 ;;		i2_LCDWriteInt
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           	psect	text24
  3047  001264                     __ptext24:
  3048                           	opt stack 0
  3049  001264                     i2___awdiv:
  3050                           	opt stack 20
  3051                           
  3052                           ;incstack = 0
  3053  001264  0E00               	movlw	0
  3054  001266  6E0C               	movwf	i2___awdiv@sign,c
  3055  001268  AE0A               	btfss	i2___awdiv@divisor+1,7,c
  3056  00126A  D006               	goto	i2l2147
  3057  00126C  6C09               	negf	i2___awdiv@divisor,c
  3058  00126E  1E0A               	comf	i2___awdiv@divisor+1,f,c
  3059  001270  B0D8               	btfsc	status,0,c
  3060  001272  2A0A               	incf	i2___awdiv@divisor+1,f,c
  3061  001274  0E01               	movlw	1
  3062  001276  6E0C               	movwf	i2___awdiv@sign,c
  3063  001278                     i2l2147:
  3064  001278  AE08               	btfss	i2___awdiv@dividend+1,7,c
  3065  00127A  D006               	goto	i2l2153
  3066  00127C  6C07               	negf	i2___awdiv@dividend,c
  3067  00127E  1E08               	comf	i2___awdiv@dividend+1,f,c
  3068  001280  B0D8               	btfsc	status,0,c
  3069  001282  2A08               	incf	i2___awdiv@dividend+1,f,c
  3070  001284  0E01               	movlw	1
  3071  001286  1A0C               	xorwf	i2___awdiv@sign,f,c
  3072  001288                     i2l2153:
  3073  001288  0E00               	movlw	0
  3074  00128A  6E0E               	movwf	i2___awdiv@quotient+1,c
  3075  00128C  0E00               	movlw	0
  3076  00128E  6E0D               	movwf	i2___awdiv@quotient,c
  3077  001290  5009               	movf	i2___awdiv@divisor,w,c
  3078  001292  100A               	iorwf	i2___awdiv@divisor+1,w,c
  3079  001294  B4D8               	btfsc	status,2,c
  3080  001296  D01C               	goto	i2l2175
  3081  001298  0E01               	movlw	1
  3082  00129A  6E0B               	movwf	i2___awdiv@counter,c
  3083  00129C  D004               	goto	i2l2161
  3084  00129E                     i2l2159:
  3085  00129E  90D8               	bcf	status,0,c
  3086  0012A0  3609               	rlcf	i2___awdiv@divisor,f,c
  3087  0012A2  360A               	rlcf	i2___awdiv@divisor+1,f,c
  3088  0012A4  2A0B               	incf	i2___awdiv@counter,f,c
  3089  0012A6                     i2l2161:
  3090  0012A6  AE0A               	btfss	i2___awdiv@divisor+1,7,c
  3091  0012A8  D7FA               	goto	i2l2159
  3092  0012AA                     i2l2163:
  3093  0012AA  90D8               	bcf	status,0,c
  3094  0012AC  360D               	rlcf	i2___awdiv@quotient,f,c
  3095  0012AE  360E               	rlcf	i2___awdiv@quotient+1,f,c
  3096  0012B0  5009               	movf	i2___awdiv@divisor,w,c
  3097  0012B2  5C07               	subwf	i2___awdiv@dividend,w,c
  3098  0012B4  500A               	movf	i2___awdiv@divisor+1,w,c
  3099  0012B6  5808               	subwfb	i2___awdiv@dividend+1,w,c
  3100  0012B8  A0D8               	btfss	status,0,c
  3101  0012BA  D005               	goto	i2l2171
  3102  0012BC  5009               	movf	i2___awdiv@divisor,w,c
  3103  0012BE  5E07               	subwf	i2___awdiv@dividend,f,c
  3104  0012C0  500A               	movf	i2___awdiv@divisor+1,w,c
  3105  0012C2  5A08               	subwfb	i2___awdiv@dividend+1,f,c
  3106  0012C4  800D               	bsf	i2___awdiv@quotient,0,c
  3107  0012C6                     i2l2171:
  3108  0012C6  90D8               	bcf	status,0,c
  3109  0012C8  320A               	rrcf	i2___awdiv@divisor+1,f,c
  3110  0012CA  3209               	rrcf	i2___awdiv@divisor,f,c
  3111  0012CC  2E0B               	decfsz	i2___awdiv@counter,f,c
  3112  0012CE  D7ED               	goto	i2l2163
  3113  0012D0                     i2l2175:
  3114  0012D0  500C               	movf	i2___awdiv@sign,w,c
  3115  0012D2  B4D8               	btfsc	status,2,c
  3116  0012D4  D004               	goto	i2l2179
  3117  0012D6  6C0D               	negf	i2___awdiv@quotient,c
  3118  0012D8  1E0E               	comf	i2___awdiv@quotient+1,f,c
  3119  0012DA  B0D8               	btfsc	status,0,c
  3120  0012DC  2A0E               	incf	i2___awdiv@quotient+1,f,c
  3121  0012DE                     i2l2179:
  3122  0012DE  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
  3123  0012E2  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  3124  0012E6  0012               	return	
  3125  0012E8                     __end_ofi2___awdiv:
  3126                           	opt stack 0
  3127                           pclatu	equ	0xFFB
  3128                           pclath	equ	0xFFA
  3129                           tblptru	equ	0xFF8
  3130                           tblptrh	equ	0xFF7
  3131                           tblptrl	equ	0xFF6
  3132                           tablat	equ	0xFF5
  3133                           prodh	equ	0xFF4
  3134                           prodl	equ	0xFF3
  3135                           intcon	equ	0xFF2
  3136                           intcon2	equ	0xFF1
  3137                           intcon3	equ	0xFF0
  3138                           indf0	equ	0xFEF
  3139                           fsr0h	equ	0xFEA
  3140                           fsr0l	equ	0xFE9
  3141                           wreg	equ	0xFE8
  3142                           fsr1h	equ	0xFE2
  3143                           fsr1l	equ	0xFE1
  3144                           indf2	equ	0xFDF
  3145                           fsr2h	equ	0xFDA
  3146                           fsr2l	equ	0xFD9
  3147                           status	equ	0xFD8
  3148                           
  3149 ;; *************** function i2_LCDWriteStr *****************
  3150 ;; Defined at:
  3151 ;;		line 193 in file "lcd.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;  string          2    6[COMRAM] PTR const unsigned char 
  3154 ;;		 -> LCDWriteInt@string(3), LCDWriteFloat@string(5), LCDWriteHexa@string(3), STR_1(11), 
  3155 ;; Auto vars:     Size  Location     Type
  3156 ;;  LCDWriteStr     1   10[COMRAM] unsigned char 
  3157 ;; Return value:  Size  Location     Type
  3158 ;;                  1    wreg      void 
  3159 ;; Registers used:
  3160 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3166 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3167 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3168 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3169 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3170 ;;Total ram usage:        5 bytes
  3171 ;; Hardware stack levels used:    1
  3172 ;; Hardware stack levels required when called:    3
  3173 ;; This function calls:
  3174 ;;		i2_LCDPutChar
  3175 ;; This function is called by:
  3176 ;;		i2_LCDWriteInt
  3177 ;; This function uses a non-reentrant model
  3178 ;;
  3179                           
  3180                           	psect	text25
  3181  001368                     __ptext25:
  3182                           	opt stack 0
  3183  001368                     i2_LCDWriteStr:
  3184                           	opt stack 15
  3185                           
  3186                           ;lcd.c: 195: UINT8_T i = 0;
  3187                           
  3188                           ;incstack = 0
  3189  001368  0E00               	movlw	0
  3190  00136A  6E0B               	movwf	i2LCDWriteStr@i,c
  3191                           
  3192                           ;lcd.c: 197: while (string[i])
  3193  00136C  D01E               	goto	i2l2137
  3194  00136E                     i2l2133:
  3195                           
  3196                           ;lcd.c: 198: LCDPutChar(string[i++]);
  3197  00136E  500B               	movf	i2LCDWriteStr@i,w,c
  3198  001370  0D01               	mullw	1
  3199  001372  C007  F009         	movff	i2LCDWriteStr@string,??i2_LCDWriteStr
  3200  001376  C008  F00A         	movff	i2LCDWriteStr@string+1,??i2_LCDWriteStr+1
  3201  00137A  50F3               	movf	prodl,w,c
  3202  00137C  2609               	addwf	??i2_LCDWriteStr,f,c
  3203  00137E  50F4               	movf	prodh,w,c
  3204  001380  220A               	addwfc	??i2_LCDWriteStr+1,f,c
  3205  001382  C009  FFF6         	movff	??i2_LCDWriteStr,tblptrl
  3206  001386  C00A  FFF7         	movff	??i2_LCDWriteStr+1,tblptrh
  3207  00138A  0E00               	movlw	low (__smallconst shr (0+16))
  3208  00138C  6EF8               	movwf	tblptru,c
  3209  00138E  0E0F               	movlw	(high __ramtop+-1)
  3210  001390  64F7               	cpfsgt	tblptrh,c
  3211  001392  D003               	bra	i2u138_47
  3212  001394  0008               	tblrd		*
  3213  001396  50F5               	movf	tablat,w,c
  3214  001398  D005               	bra	i2u138_40
  3215  00139A                     i2u138_47:
  3216  00139A  CFF6 FFE9          	movff	tblptrl,fsr0l
  3217  00139E  CFF7 FFEA          	movff	tblptrh,fsr0h
  3218  0013A2  50EF               	movf	indf0,w,c
  3219  0013A4                     i2u138_40:
  3220  0013A4  EC10  F00C         	call	i2_LCDPutChar
  3221  0013A8  2A0B               	incf	i2LCDWriteStr@i,f,c
  3222  0013AA                     i2l2137:
  3223  0013AA  500B               	movf	i2LCDWriteStr@i,w,c
  3224  0013AC  0D01               	mullw	1
  3225  0013AE  C007  F009         	movff	i2LCDWriteStr@string,??i2_LCDWriteStr
  3226  0013B2  C008  F00A         	movff	i2LCDWriteStr@string+1,??i2_LCDWriteStr+1
  3227  0013B6  50F3               	movf	prodl,w,c
  3228  0013B8  2609               	addwf	??i2_LCDWriteStr,f,c
  3229  0013BA  50F4               	movf	prodh,w,c
  3230  0013BC  220A               	addwfc	??i2_LCDWriteStr+1,f,c
  3231  0013BE  C009  FFF6         	movff	??i2_LCDWriteStr,tblptrl
  3232  0013C2  C00A  FFF7         	movff	??i2_LCDWriteStr+1,tblptrh
  3233  0013C6  0E00               	movlw	low (__smallconst shr (0+16))
  3234  0013C8  6EF8               	movwf	tblptru,c
  3235  0013CA  0E0F               	movlw	(high __ramtop+-1)
  3236  0013CC  64F7               	cpfsgt	tblptrh,c
  3237  0013CE  D003               	bra	i2u139_47
  3238  0013D0  0008               	tblrd		*
  3239  0013D2  50F5               	movf	tablat,w,c
  3240  0013D4  D005               	bra	i2u139_40
  3241  0013D6                     i2u139_47:
  3242  0013D6  CFF6 FFE9          	movff	tblptrl,fsr0l
  3243  0013DA  CFF7 FFEA          	movff	tblptrh,fsr0h
  3244  0013DE  50EF               	movf	indf0,w,c
  3245  0013E0                     i2u139_40:
  3246  0013E0  0900               	iorlw	0
  3247  0013E2  B4D8               	btfsc	status,2,c
  3248  0013E4  0012               	return	
  3249  0013E6  D7C3               	goto	i2l2133
  3250  0013E8                     __end_ofi2_LCDWriteStr:
  3251                           	opt stack 0
  3252                           pclatu	equ	0xFFB
  3253                           pclath	equ	0xFFA
  3254                           tblptru	equ	0xFF8
  3255                           tblptrh	equ	0xFF7
  3256                           tblptrl	equ	0xFF6
  3257                           tablat	equ	0xFF5
  3258                           prodh	equ	0xFF4
  3259                           prodl	equ	0xFF3
  3260                           intcon	equ	0xFF2
  3261                           intcon2	equ	0xFF1
  3262                           intcon3	equ	0xFF0
  3263                           indf0	equ	0xFEF
  3264                           fsr0h	equ	0xFEA
  3265                           fsr0l	equ	0xFE9
  3266                           wreg	equ	0xFE8
  3267                           fsr1h	equ	0xFE2
  3268                           fsr1l	equ	0xFE1
  3269                           indf2	equ	0xFDF
  3270                           fsr2h	equ	0xFDA
  3271                           fsr2l	equ	0xFD9
  3272                           status	equ	0xFD8
  3273                           
  3274 ;; *************** function i2_LCDPutChar *****************
  3275 ;; Defined at:
  3276 ;;		line 180 in file "lcd.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;  data            1    wreg     unsigned char 
  3279 ;; Auto vars:     Size  Location     Type
  3280 ;;  data            1    5[COMRAM] unsigned char 
  3281 ;; Return value:  Size  Location     Type
  3282 ;;                  1    wreg      void 
  3283 ;; Registers used:
  3284 ;;		wreg, status,2, status,0, cstack
  3285 ;; Tracked objects:
  3286 ;;		On entry : 0/0
  3287 ;;		On exit  : 0/0
  3288 ;;		Unchanged: 0/0
  3289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3294 ;;Total ram usage:        1 bytes
  3295 ;; Hardware stack levels used:    1
  3296 ;; Hardware stack levels required when called:    2
  3297 ;; This function calls:
  3298 ;;		i2_WaitLCD
  3299 ;;		i2_WriteByte
  3300 ;; This function is called by:
  3301 ;;		i2_LCDWriteStr
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           	psect	text26
  3306  001820                     __ptext26:
  3307                           	opt stack 0
  3308  001820                     i2_LCDPutChar:
  3309                           	opt stack 15
  3310                           
  3311                           ;incstack = 0
  3312                           ;i2LCDPutChar@data stored from wreg
  3313  001820  6E06               	movwf	i2LCDPutChar@data,c
  3314                           
  3315                           ;lcd.c: 182: WriteByte(0, data);
  3316  001822  C006  F004         	movff	i2LCDPutChar@data,i2WriteByte@data
  3317  001826  0E00               	movlw	0
  3318  001828  ECF1  F00B         	call	i2_WriteByte
  3319                           
  3320                           ;lcd.c: 183: WaitLCD();
  3321  00182C  EC19  F00C         	call	i2_WaitLCD	;wreg free
  3322  001830  0012               	return		;funcret
  3323  001832                     __end_ofi2_LCDPutChar:
  3324                           	opt stack 0
  3325                           pclatu	equ	0xFFB
  3326                           pclath	equ	0xFFA
  3327                           tblptru	equ	0xFF8
  3328                           tblptrh	equ	0xFF7
  3329                           tblptrl	equ	0xFF6
  3330                           tablat	equ	0xFF5
  3331                           prodh	equ	0xFF4
  3332                           prodl	equ	0xFF3
  3333                           intcon	equ	0xFF2
  3334                           intcon2	equ	0xFF1
  3335                           intcon3	equ	0xFF0
  3336                           indf0	equ	0xFEF
  3337                           fsr0h	equ	0xFEA
  3338                           fsr0l	equ	0xFE9
  3339                           wreg	equ	0xFE8
  3340                           fsr1h	equ	0xFE2
  3341                           fsr1l	equ	0xFE1
  3342                           indf2	equ	0xFDF
  3343                           fsr2h	equ	0xFDA
  3344                           fsr2l	equ	0xFD9
  3345                           status	equ	0xFD8
  3346                           
  3347 ;; *************** function i2_LCDGoto *****************
  3348 ;; Defined at:
  3349 ;;		line 171 in file "lcd.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;  column          1    wreg     unsigned char 
  3352 ;;  row             1    5[COMRAM] unsigned char 
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;  column          1   10[COMRAM] unsigned char 
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  1    wreg      void 
  3357 ;; Registers used:
  3358 ;;		wreg, status,2, status,0, cstack
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3364 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3365 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3366 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;Total ram usage:        6 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    2
  3371 ;; This function calls:
  3372 ;;		i2_WaitLCD
  3373 ;;		i2_WriteByte
  3374 ;; This function is called by:
  3375 ;;		i2_LCDWriteInt
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           	psect	text27
  3380  00169E                     __ptext27:
  3381                           	opt stack 0
  3382  00169E                     i2_LCDGoto:
  3383                           	opt stack 16
  3384                           
  3385                           ;incstack = 0
  3386                           ;i2LCDGoto@column stored from wreg
  3387  00169E  6E0B               	movwf	i2LCDGoto@column,c
  3388                           
  3389                           ;lcd.c: 173: if ((row > (2 - 1)) || (column > (16 - 1)))
  3390  0016A0  0E02               	movlw	2
  3391  0016A2  6006               	cpfslt	i2LCDGoto@row,c
  3392  0016A4  0012               	return	
  3393  0016A6  0E0F               	movlw	15
  3394  0016A8  640B               	cpfsgt	i2LCDGoto@column,c
  3395  0016AA  D001               	goto	i2l2121
  3396  0016AC  0012               	return	
  3397  0016AE                     i2l2121:
  3398                           
  3399                           ;lcd.c: 176: WriteByte(1, (row == 1) ? (0xC0 | column) : (0x80 | column));
  3400  0016AE  0406               	decf	i2LCDGoto@row,w,c
  3401  0016B0  B4D8               	btfsc	status,2,c
  3402  0016B2  D002               	goto	i2l2125
  3403  0016B4  0E80               	movlw	128
  3404  0016B6  D001               	goto	L2
  3405  0016B8                     i2l2125:
  3406  0016B8  0EC0               	movlw	192
  3407  0016BA                     L2:
  3408  0016BA  C00B  F007         	movff	i2LCDGoto@column,??i2_LCDGoto
  3409  0016BE  6A08               	clrf	(??i2_LCDGoto+1)& (0+255),c
  3410  0016C0  1007               	iorwf	??i2_LCDGoto,w,c
  3411  0016C2  6E09               	movwf	i2_LCDGoto$669,c
  3412  0016C4  5008               	movf	??i2_LCDGoto+1,w,c
  3413  0016C6  6E0A               	movwf	i2_LCDGoto$669+1,c
  3414  0016C8  C009  F004         	movff	i2_LCDGoto$669,i2WriteByte@data
  3415  0016CC  0E01               	movlw	1
  3416  0016CE  ECF1  F00B         	call	i2_WriteByte
  3417                           
  3418                           ;lcd.c: 177: WaitLCD();
  3419  0016D2  EC19  F00C         	call	i2_WaitLCD	;wreg free
  3420  0016D6  0012               	return		;funcret
  3421  0016D8                     __end_ofi2_LCDGoto:
  3422                           	opt stack 0
  3423                           pclatu	equ	0xFFB
  3424                           pclath	equ	0xFFA
  3425                           tblptru	equ	0xFF8
  3426                           tblptrh	equ	0xFF7
  3427                           tblptrl	equ	0xFF6
  3428                           tablat	equ	0xFF5
  3429                           prodh	equ	0xFF4
  3430                           prodl	equ	0xFF3
  3431                           intcon	equ	0xFF2
  3432                           intcon2	equ	0xFF1
  3433                           intcon3	equ	0xFF0
  3434                           indf0	equ	0xFEF
  3435                           fsr0h	equ	0xFEA
  3436                           fsr0l	equ	0xFE9
  3437                           wreg	equ	0xFE8
  3438                           fsr1h	equ	0xFE2
  3439                           fsr1l	equ	0xFE1
  3440                           indf2	equ	0xFDF
  3441                           fsr2h	equ	0xFDA
  3442                           fsr2l	equ	0xFD9
  3443                           status	equ	0xFD8
  3444                           
  3445 ;; *************** function i2_WriteByte *****************
  3446 ;; Defined at:
  3447 ;;		line 83 in file "lcd.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;  cmd             1    wreg     unsigned char 
  3450 ;;  data            1    3[COMRAM] unsigned char 
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;  cmd             1    4[COMRAM] unsigned char 
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  1    wreg      void 
  3455 ;; Registers used:
  3456 ;;		wreg, status,2, status,0, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3462 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3463 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3466 ;;Total ram usage:        2 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; Hardware stack levels required when called:    1
  3469 ;; This function calls:
  3470 ;;		i2_WriteNibble
  3471 ;; This function is called by:
  3472 ;;		i2_LCDGoto
  3473 ;;		i2_LCDPutChar
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           	psect	text28
  3478  0017E2                     __ptext28:
  3479                           	opt stack 0
  3480  0017E2                     i2_WriteByte:
  3481                           	opt stack 15
  3482                           
  3483                           ;incstack = 0
  3484                           ;i2WriteByte@cmd stored from wreg
  3485  0017E2  6E05               	movwf	i2WriteByte@cmd,c
  3486                           
  3487                           ;lcd.c: 85: WriteNibble(cmd, data >> 4);
  3488  0017E4  3804               	swapf	i2WriteByte@data,w,c
  3489  0017E6  0B0F               	andlw	15
  3490  0017E8  6E01               	movwf	i2WriteNibble@data,c
  3491  0017EA  5005               	movf	i2WriteByte@cmd,w,c
  3492  0017EC  EC10  F00B         	call	i2_WriteNibble
  3493                           
  3494                           ;lcd.c: 86: WriteNibble(cmd, data);
  3495  0017F0  C004  F001         	movff	i2WriteByte@data,i2WriteNibble@data
  3496  0017F4  5005               	movf	i2WriteByte@cmd,w,c
  3497  0017F6  EC10  F00B         	call	i2_WriteNibble
  3498  0017FA  0012               	return		;funcret
  3499  0017FC                     __end_ofi2_WriteByte:
  3500                           	opt stack 0
  3501                           pclatu	equ	0xFFB
  3502                           pclath	equ	0xFFA
  3503                           tblptru	equ	0xFF8
  3504                           tblptrh	equ	0xFF7
  3505                           tblptrl	equ	0xFF6
  3506                           tablat	equ	0xFF5
  3507                           prodh	equ	0xFF4
  3508                           prodl	equ	0xFF3
  3509                           intcon	equ	0xFF2
  3510                           intcon2	equ	0xFF1
  3511                           intcon3	equ	0xFF0
  3512                           indf0	equ	0xFEF
  3513                           fsr0h	equ	0xFEA
  3514                           fsr0l	equ	0xFE9
  3515                           wreg	equ	0xFE8
  3516                           fsr1h	equ	0xFE2
  3517                           fsr1l	equ	0xFE1
  3518                           indf2	equ	0xFDF
  3519                           fsr2h	equ	0xFDA
  3520                           fsr2l	equ	0xFD9
  3521                           status	equ	0xFD8
  3522                           
  3523 ;; *************** function i2_WriteNibble *****************
  3524 ;; Defined at:
  3525 ;;		line 66 in file "lcd.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;  cmd             1    wreg     unsigned char 
  3528 ;;  data            1    0[COMRAM] unsigned char 
  3529 ;; Auto vars:     Size  Location     Type
  3530 ;;  cmd             1    2[COMRAM] unsigned char 
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  1    wreg      void 
  3533 ;; Registers used:
  3534 ;;		wreg, status,2, status,0
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3540 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;Total ram usage:        3 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; This function calls:
  3547 ;;		Nothing
  3548 ;; This function is called by:
  3549 ;;		i2_WriteByte
  3550 ;; This function uses a non-reentrant model
  3551 ;;
  3552                           
  3553                           	psect	text29
  3554  001620                     __ptext29:
  3555                           	opt stack 0
  3556  001620                     i2_WriteNibble:
  3557                           	opt stack 15
  3558                           
  3559                           ;incstack = 0
  3560                           ;i2WriteNibble@cmd stored from wreg
  3561  001620  6E03               	movwf	i2WriteNibble@cmd,c
  3562                           
  3563                           ;lcd.c: 68: LATDbits.LATD4 = (cmd ? 0 : 1);
  3564  001622  5003               	movf	i2WriteNibble@cmd,w,c
  3565  001624  A4D8               	btfss	status,2,c
  3566  001626  D003               	goto	i2u114_40
  3567  001628  6A02               	clrf	??i2_WriteNibble& (0+255),c
  3568  00162A  2A02               	incf	??i2_WriteNibble& (0+255),f,c
  3569  00162C  D001               	goto	i2u115_48
  3570  00162E                     i2u114_40:
  3571  00162E  6A02               	clrf	??i2_WriteNibble& (0+255),c
  3572  001630                     i2u115_48:
  3573  001630  3A02               	swapf	??i2_WriteNibble,f,c
  3574  001632  508C               	movf	3980,w,c	;volatile
  3575  001634  1802               	xorwf	??i2_WriteNibble,w,c
  3576  001636  0BEF               	andlw	-17
  3577  001638  1802               	xorwf	??i2_WriteNibble,w,c
  3578  00163A  6E8C               	movwf	3980,c	;volatile
  3579                           
  3580                           ;lcd.c: 69: LATDbits.LATD5 = 0;
  3581  00163C  9A8C               	bcf	3980,5,c	;volatile
  3582                           
  3583                           ;lcd.c: 70: LATDbits.LATD6 = 1;
  3584  00163E  8C8C               	bsf	3980,6,c	;volatile
  3585                           
  3586                           ;lcd.c: 72: LATDbits.LATD0 = LATDbits.LATD1 = LATDbits.LATD2 = LATDbits.LATD3 = 0;
  3587  001640  968C               	bcf	3980,3,c	;volatile
  3588  001642  948C               	bcf	3980,2,c	;volatile
  3589  001644  928C               	bcf	3980,1,c	;volatile
  3590  001646  908C               	bcf	3980,0,c	;volatile
  3591                           
  3592                           ;lcd.c: 73: __nop();
  3593  001648  F000               	nop	
  3594                           
  3595                           ;lcd.c: 74: __nop();
  3596  00164A  F000               	nop	
  3597                           
  3598                           ;lcd.c: 76: LATD = (LATD & 0xF0) | (data & 0x0F);
  3599  00164C  C001  F002         	movff	i2WriteNibble@data,??i2_WriteNibble
  3600  001650  0E0F               	movlw	15
  3601  001652  1602               	andwf	??i2_WriteNibble,f,c
  3602  001654  508C               	movf	3980,w,c	;volatile
  3603  001656  0BF0               	andlw	240
  3604  001658  1002               	iorwf	??i2_WriteNibble,w,c
  3605  00165A  6E8C               	movwf	3980,c	;volatile
  3606                           
  3607                           ;lcd.c: 77: __nop();
  3608  00165C  F000               	nop	
  3609                           
  3610                           ;lcd.c: 78: __nop();
  3611  00165E  F000               	nop	
  3612                           
  3613                           ;lcd.c: 80: LATDbits.LATD6 = 0;
  3614  001660  9C8C               	bcf	3980,6,c	;volatile
  3615  001662  0012               	return		;funcret
  3616  001664                     __end_ofi2_WriteNibble:
  3617                           	opt stack 0
  3618                           pclatu	equ	0xFFB
  3619                           pclath	equ	0xFFA
  3620                           tblptru	equ	0xFF8
  3621                           tblptrh	equ	0xFF7
  3622                           tblptrl	equ	0xFF6
  3623                           tablat	equ	0xFF5
  3624                           prodh	equ	0xFF4
  3625                           prodl	equ	0xFF3
  3626                           intcon	equ	0xFF2
  3627                           intcon2	equ	0xFF1
  3628                           intcon3	equ	0xFF0
  3629                           indf0	equ	0xFEF
  3630                           fsr0h	equ	0xFEA
  3631                           fsr0l	equ	0xFE9
  3632                           wreg	equ	0xFE8
  3633                           fsr1h	equ	0xFE2
  3634                           fsr1l	equ	0xFE1
  3635                           indf2	equ	0xFDF
  3636                           fsr2h	equ	0xFDA
  3637                           fsr2l	equ	0xFD9
  3638                           status	equ	0xFD8
  3639                           
  3640 ;; *************** function i2_WaitLCD *****************
  3641 ;; Defined at:
  3642 ;;		line 52 in file "lcd.c"
  3643 ;; Parameters:    Size  Location     Type
  3644 ;;		None
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;  WaitLCD         1    1[COMRAM] unsigned char 
  3647 ;; Return value:  Size  Location     Type
  3648 ;;                  1    wreg      void 
  3649 ;; Registers used:
  3650 ;;		wreg, status,2, status,0, cstack
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 0/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;Total ram usage:        1 bytes
  3661 ;; Hardware stack levels used:    1
  3662 ;; Hardware stack levels required when called:    1
  3663 ;; This function calls:
  3664 ;;		i2_ReadByte
  3665 ;; This function is called by:
  3666 ;;		i2_LCDGoto
  3667 ;;		i2_LCDPutChar
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           	psect	text30
  3672  001832                     __ptext30:
  3673                           	opt stack 0
  3674  001832                     i2_WaitLCD:
  3675                           	opt stack 15
  3676                           
  3677                           ;lcd.c: 54: UINT8_T status;
  3678                           ;lcd.c: 56: LATDbits.LATD4 = 0;
  3679                           
  3680                           ;incstack = 0
  3681  001832  988C               	bcf	3980,4,c	;volatile
  3682                           
  3683                           ;lcd.c: 57: LATDbits.LATD5 = 1;
  3684  001834  8A8C               	bsf	3980,5,c	;volatile
  3685  001836                     i2l1999:
  3686                           
  3687                           ;lcd.c: 60: status = ReadByte();
  3688  001836  EC9C  F00B         	call	i2_ReadByte	;wreg free
  3689  00183A  6E02               	movwf	i2WaitLCD@status,c
  3690                           
  3691                           ;lcd.c: 61: } while (status & 0x80);
  3692  00183C  BE02               	btfsc	i2WaitLCD@status,7,c
  3693  00183E  D7FB               	goto	i2l1999
  3694                           
  3695                           ;lcd.c: 63: LATDbits.LATD5 = 0;
  3696  001840  9A8C               	bcf	3980,5,c	;volatile
  3697  001842  0012               	return		;funcret
  3698  001844                     __end_ofi2_WaitLCD:
  3699                           	opt stack 0
  3700                           pclatu	equ	0xFFB
  3701                           pclath	equ	0xFFA
  3702                           tblptru	equ	0xFF8
  3703                           tblptrh	equ	0xFF7
  3704                           tblptrl	equ	0xFF6
  3705                           tablat	equ	0xFF5
  3706                           prodh	equ	0xFF4
  3707                           prodl	equ	0xFF3
  3708                           intcon	equ	0xFF2
  3709                           intcon2	equ	0xFF1
  3710                           intcon3	equ	0xFF0
  3711                           indf0	equ	0xFEF
  3712                           fsr0h	equ	0xFEA
  3713                           fsr0l	equ	0xFE9
  3714                           wreg	equ	0xFE8
  3715                           fsr1h	equ	0xFE2
  3716                           fsr1l	equ	0xFE1
  3717                           indf2	equ	0xFDF
  3718                           fsr2h	equ	0xFDA
  3719                           fsr2l	equ	0xFD9
  3720                           status	equ	0xFD8
  3721                           
  3722 ;; *************** function i2_ReadByte *****************
  3723 ;; Defined at:
  3724 ;;		line 21 in file "lcd.c"
  3725 ;; Parameters:    Size  Location     Type
  3726 ;;		None
  3727 ;; Auto vars:     Size  Location     Type
  3728 ;;  ReadByte        1    0[COMRAM] unsigned char 
  3729 ;; Return value:  Size  Location     Type
  3730 ;;                  1    wreg      unsigned char 
  3731 ;; Registers used:
  3732 ;;		wreg, status,2, status,0
  3733 ;; Tracked objects:
  3734 ;;		On entry : 0/0
  3735 ;;		On exit  : 0/0
  3736 ;;		Unchanged: 0/0
  3737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3739 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3741 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3742 ;;Total ram usage:        1 bytes
  3743 ;; Hardware stack levels used:    1
  3744 ;; This function calls:
  3745 ;;		Nothing
  3746 ;; This function is called by:
  3747 ;;		i2_WaitLCD
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           	psect	text31
  3752  001738                     __ptext31:
  3753                           	opt stack 0
  3754  001738                     i2_ReadByte:
  3755                           	opt stack 15
  3756                           
  3757                           ;lcd.c: 23: UINT8_T status;
  3758                           ;lcd.c: 25: TRISDbits.TRISD0 = 1;
  3759                           
  3760                           ;incstack = 0
  3761  001738  8095               	bsf	3989,0,c	;volatile
  3762                           
  3763                           ;lcd.c: 26: TRISDbits.TRISD1 = 1;
  3764  00173A  8295               	bsf	3989,1,c	;volatile
  3765                           
  3766                           ;lcd.c: 27: TRISDbits.TRISD2 = 1;
  3767  00173C  8495               	bsf	3989,2,c	;volatile
  3768                           
  3769                           ;lcd.c: 28: TRISDbits.TRISD3 = 1;
  3770  00173E  8695               	bsf	3989,3,c	;volatile
  3771                           
  3772                           ;lcd.c: 30: LATDbits.LATD6 = 1;
  3773  001740  8C8C               	bsf	3980,6,c	;volatile
  3774                           
  3775                           ;lcd.c: 31: __nop();
  3776  001742  F000               	nop	
  3777                           
  3778                           ;lcd.c: 32: __nop();
  3779  001744  F000               	nop	
  3780                           
  3781                           ;lcd.c: 34: status = PORTD << 4;
  3782  001746  3883               	swapf	3971,w,c	;volatile
  3783  001748  0BF0               	andlw	240
  3784  00174A  6E01               	movwf	i2ReadByte@status,c
  3785                           
  3786                           ;lcd.c: 35: LATDbits.LATD6 = 0;
  3787  00174C  9C8C               	bcf	3980,6,c	;volatile
  3788                           
  3789                           ;lcd.c: 37: LATDbits.LATD6 = 1;
  3790  00174E  8C8C               	bsf	3980,6,c	;volatile
  3791                           
  3792                           ;lcd.c: 38: __nop();
  3793  001750  F000               	nop	
  3794                           
  3795                           ;lcd.c: 39: __nop();
  3796  001752  F000               	nop	
  3797                           
  3798                           ;lcd.c: 41: status |= PORTD & 0x0F;
  3799  001754  5083               	movf	3971,w,c	;volatile
  3800  001756  0B0F               	andlw	15
  3801  001758  1201               	iorwf	i2ReadByte@status,f,c
  3802                           
  3803                           ;lcd.c: 42: LATDbits.LATD6 = 0;
  3804  00175A  9C8C               	bcf	3980,6,c	;volatile
  3805                           
  3806                           ;lcd.c: 44: TRISDbits.TRISD0 = 0;
  3807  00175C  9095               	bcf	3989,0,c	;volatile
  3808                           
  3809                           ;lcd.c: 45: TRISDbits.TRISD1 = 0;
  3810  00175E  9295               	bcf	3989,1,c	;volatile
  3811                           
  3812                           ;lcd.c: 46: TRISDbits.TRISD2 = 0;
  3813  001760  9495               	bcf	3989,2,c	;volatile
  3814                           
  3815                           ;lcd.c: 47: TRISDbits.TRISD3 = 0;
  3816  001762  9695               	bcf	3989,3,c	;volatile
  3817                           
  3818                           ;lcd.c: 49: return(status);
  3819  001764  5001               	movf	i2ReadByte@status,w,c
  3820  001766  0012               	return	
  3821  001768                     __end_ofi2_ReadByte:
  3822                           	opt stack 0
  3823                           pclatu	equ	0xFFB
  3824                           pclath	equ	0xFFA
  3825                           tblptru	equ	0xFF8
  3826                           tblptrh	equ	0xFF7
  3827                           tblptrl	equ	0xFF6
  3828                           tablat	equ	0xFF5
  3829                           prodh	equ	0xFF4
  3830                           prodl	equ	0xFF3
  3831                           intcon	equ	0xFF2
  3832                           intcon2	equ	0xFF1
  3833                           intcon3	equ	0xFF0
  3834                           indf0	equ	0xFEF
  3835                           fsr0h	equ	0xFEA
  3836                           fsr0l	equ	0xFE9
  3837                           wreg	equ	0xFE8
  3838                           fsr1h	equ	0xFE2
  3839                           fsr1l	equ	0xFE1
  3840                           indf2	equ	0xFDF
  3841                           fsr2h	equ	0xFDA
  3842                           fsr2l	equ	0xFD9
  3843                           status	equ	0xFD8
  3844                           pclatu	equ	0xFFB
  3845                           pclath	equ	0xFFA
  3846                           tblptru	equ	0xFF8
  3847                           tblptrh	equ	0xFF7
  3848                           tblptrl	equ	0xFF6
  3849                           tablat	equ	0xFF5
  3850                           prodh	equ	0xFF4
  3851                           prodl	equ	0xFF3
  3852                           intcon	equ	0xFF2
  3853                           intcon2	equ	0xFF1
  3854                           intcon3	equ	0xFF0
  3855                           indf0	equ	0xFEF
  3856                           fsr0h	equ	0xFEA
  3857                           fsr0l	equ	0xFE9
  3858                           wreg	equ	0xFE8
  3859                           fsr1h	equ	0xFE2
  3860                           fsr1l	equ	0xFE1
  3861                           indf2	equ	0xFDF
  3862                           fsr2h	equ	0xFDA
  3863                           fsr2l	equ	0xFD9
  3864                           status	equ	0xFD8
  3865                           
  3866                           	psect	rparam
  3867  0000                     pclatu	equ	0xFFB
  3868                           pclath	equ	0xFFA
  3869                           tblptru	equ	0xFF8
  3870                           tblptrh	equ	0xFF7
  3871                           tblptrl	equ	0xFF6
  3872                           tablat	equ	0xFF5
  3873                           prodh	equ	0xFF4
  3874                           prodl	equ	0xFF3
  3875                           intcon	equ	0xFF2
  3876                           intcon2	equ	0xFF1
  3877                           intcon3	equ	0xFF0
  3878                           indf0	equ	0xFEF
  3879                           fsr0h	equ	0xFEA
  3880                           fsr0l	equ	0xFE9
  3881                           wreg	equ	0xFE8
  3882                           fsr1h	equ	0xFE2
  3883                           fsr1l	equ	0xFE1
  3884                           indf2	equ	0xFDF
  3885                           fsr2h	equ	0xFDA
  3886                           fsr2l	equ	0xFD9
  3887                           status	equ	0xFD8
  3888                           
  3889                           	psect	temp
  3890  000038                     btemp:
  3891                           	opt stack 0
  3892  000038                     	ds	1
  3893  0000                     int$flags	set	btemp
  3894                           pclatu	equ	0xFFB
  3895                           pclath	equ	0xFFA
  3896                           tblptru	equ	0xFF8
  3897                           tblptrh	equ	0xFF7
  3898                           tblptrl	equ	0xFF6
  3899                           tablat	equ	0xFF5
  3900                           prodh	equ	0xFF4
  3901                           prodl	equ	0xFF3
  3902                           intcon	equ	0xFF2
  3903                           intcon2	equ	0xFF1
  3904                           intcon3	equ	0xFF0
  3905                           indf0	equ	0xFEF
  3906                           fsr0h	equ	0xFEA
  3907                           fsr0l	equ	0xFE9
  3908                           wreg	equ	0xFE8
  3909                           fsr1h	equ	0xFE2
  3910                           fsr1l	equ	0xFE1
  3911                           indf2	equ	0xFDF
  3912                           fsr2h	equ	0xFDA
  3913                           fsr2l	equ	0xFD9
  3914                           status	equ	0xFD8


Data Sizes:
    Strings     28
    Constant    0
    Data        3
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     50      55
    BANK0           160      9       9
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    LCDWriteStr@string	PTR const unsigned char  size(2) Largest target is 11
		 -> LCDWriteInt@string(BANK0[3]), LCDWriteFloat@string(COMRAM[5]), LCDWriteHexa@string(COMRAM[3]), STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _show_debug->_LCDWriteInt
    _LCDWriteInt->_LCDGoto
    _LCDWriteInt->_LCDWriteStr
    _LCDWriteStr->_LCDPutChar
    _LCDPutChar->_WriteByte
    _LCDGoto->_WriteByte
    _LCDInit->_WriteNibble
    _LCDClear->_WriteByte
    _WriteByte->_WriteNibble
    _WaitLCD->_ReadByte

Critical Paths under _ISR in COMRAM

    _ISR->_searched
    _searched->i2___awdiv
    i2_show_debug->i2_LCDWriteInt
    i2_LCDWriteInt->i2___awdiv
    i2___awdiv->i2___awmod
    i2_LCDWriteStr->i2_LCDPutChar
    i2_LCDPutChar->i2_WriteByte
    i2_LCDGoto->i2_WriteByte
    i2_WriteByte->i2_WriteNibble
    i2_WaitLCD->i2_ReadByte

Critical Paths under _main in BANK0

    _show_debug->_LCDWriteInt

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5   16728
                                              4 BANK0      5     0      5
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0   16728
                         _init_debug
 ---------------------------------------------------------------------------------
 (2) _init_debug                                           0     0      0   16728
                           _LCDClear
                            _LCDGoto
                            _LCDInit
                        _LCDWriteStr
                         _show_debug
 ---------------------------------------------------------------------------------
 (3) _show_debug                                           0     0      0    7911
                        _LCDWriteInt
 ---------------------------------------------------------------------------------
 (4) _LCDWriteInt                                          6     4      2    7911
                                             48 COMRAM     2     0      2
                                              0 BANK0      4     4      0
                            _LCDGoto
                        _LCDWriteStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1193
                                             37 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1095
                                             37 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _LCDWriteStr                                          5     3      2    2578
                                             43 COMRAM     5     3      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (6) _LCDPutChar                                           1     1      0    2088
                                             42 COMRAM     1     1      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (5) _LCDGoto                                              6     5      1    2609
                                             42 COMRAM     6     5      1
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (3) _LCDInit                                              1     1      0    1573
                                             40 COMRAM     1     1      0
                            _WaitLCD
                        _WriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDClear                                             1     1      0    2057
                                             42 COMRAM     1     1      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (7) _WriteByte                                            2     1      1    1986
                                             40 COMRAM     2     1      1
                        _WriteNibble
 ---------------------------------------------------------------------------------
 (8) _WriteNibble                                          3     2      1    1502
                                             37 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _WaitLCD                                              1     1      0      71
                                             38 COMRAM     1     1      0
                           _ReadByte
 ---------------------------------------------------------------------------------
 (8) _ReadByte                                             1     1      0      37
                                             37 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                 17    17      0    4235
                                             20 COMRAM    17    17      0
                         _flashlight
                          _pedometer
                           _searched
                        _synchronize
 ---------------------------------------------------------------------------------
 (10) _synchronize                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _searched                                            6     6      0    1398
                                             14 COMRAM     6     6      0
                         _flashlight
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (11) _flashlight                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _pedometer                                           0     0      0    2735
                       i2_show_debug
 ---------------------------------------------------------------------------------
 (11) i2_show_debug                                        0     0      0    2735
                      i2_LCDWriteInt
 ---------------------------------------------------------------------------------
 (12) i2_LCDWriteInt                                       6     4      2    2735
                                             14 COMRAM     6     4      2
                          i2_LCDGoto
                      i2_LCDWriteStr
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (11) i2___awmod                                           6     2      4     643
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___awdiv                                           8     4      4     585
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (13) i2_LCDWriteStr                                       5     3      2     593
                                              6 COMRAM     5     3      2
                       i2_LCDPutChar
 ---------------------------------------------------------------------------------
 (14) i2_LCDPutChar                                        1     1      0     428
                                              5 COMRAM     1     1      0
                          i2_WaitLCD
                        i2_WriteByte
 ---------------------------------------------------------------------------------
 (13) i2_LCDGoto                                           6     5      1     624
                                              5 COMRAM     6     5      1
                          i2_WaitLCD
                        i2_WriteByte
 ---------------------------------------------------------------------------------
 (15) i2_WriteByte                                         2     1      1     326
                                              3 COMRAM     2     1      1
                      i2_WriteNibble
 ---------------------------------------------------------------------------------
 (16) i2_WriteNibble                                       3     2      1     132
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (15) i2_WaitLCD                                           1     1      0      71
                                              1 COMRAM     1     1      0
                         i2_ReadByte
 ---------------------------------------------------------------------------------
 (16) i2_ReadByte                                          1     1      0      37
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _init_debug
       _LCDClear
         _WaitLCD
           _ReadByte
         _WriteByte
           _WriteNibble
       _LCDGoto
         _WaitLCD
           _ReadByte
         _WriteByte
           _WriteNibble
       _LCDInit
         _WaitLCD
           _ReadByte
         _WriteNibble
       _LCDWriteStr
         _LCDPutChar
           _WaitLCD
             _ReadByte
           _WriteByte
             _WriteNibble
       _show_debug
         _LCDWriteInt
           _LCDGoto
             _WaitLCD
               _ReadByte
             _WriteByte
               _WriteNibble
           _LCDWriteStr
             _LCDPutChar
               _WaitLCD
                 _ReadByte
               _WriteByte
                 _WriteNibble
           ___awdiv
           ___awmod

 _ISR (ROOT)
   _flashlight
   _pedometer
     i2_show_debug
       i2_LCDWriteInt
         i2_LCDGoto
           i2_WaitLCD
             i2_ReadByte
           i2_WriteByte
             i2_WriteNibble
         i2_LCDWriteStr
           i2_LCDPutChar
             i2_WaitLCD
               i2_ReadByte
             i2_WriteByte
               i2_WriteNibble
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
   _searched
     _flashlight
     i2___awdiv
       i2___awmod (ARG)
     i2___awmod
   _synchronize

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      9       9       5        5.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     32      37       1       58.5%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      40      12        0.0%
DATA                 0      0      40       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed May 31 20:58:50 2017

            __CFG_CP0$ON 000000              __CFG_CP1$ON 000000              __CFG_CP2$ON 000000  
            __CFG_CP3$ON 000000              ?_LCDPutChar 0001                       l87 187E  
            __CFG_CPB$ON 000000              __CFG_CPD$ON 000000             ___awdiv@sign 002B  
   __size_of_WriteNibble 0044                      _ISR 0008       i2LCDWriteInt@value 0010  
           ___awmod@sign 002B                      wreg 000FE8              i2_WriteByte 17E2  
        __end_of_LCDInit 1106             __CFG_LVP$OFF 000000          __end_of_LCDGoto 169E  
           ?_LCDWriteInt 0031                     ?_ISR 0001             ?_LCDWriteStr 002C  
                   ISR@i 0024                     l2013 167E                     l2021 12EE  
                   l2103 144E                     l2009 1674                     l2025 132A  
                   l2041 1204                     l2051 1226                     l2035 11F4  
                   l2047 121A                     l2063 124C                     l2049 1222  
                   l2067 125A                     l2059 1242                     l2091 1422  
                   l2083 1408                     l2095 1436                     l2087 1416  
                   l2079 13FC                     l2089 141E                     l2099 1440  
                   l1945 1812                     STR_1 1012                     STR_2 1001  
                   u1110 15EA                     u1200 1324                     u1210 1360  
                   u1207 131A                     u1128 15EC                     u1217 1356  
                   _LATD 000F8C                     u1657 1036                     u1667 1050  
                   u1677 1066                     u1687 1078                     u1697 179C  
                   i2l62 1194                     i2l82 00A0                     i2l77 0072  
    i2LCDWriteInt@column 0014          i2WriteByte@data 0004             __CFG_WRT0$ON 000000  
           __CFG_WRT1$ON 000000             __CFG_WRT2$ON 000000             __CFG_WRT3$ON 000000  
          __CFG_EBTR0$ON 000000            __CFG_EBTR1$ON 000000            __CFG_EBTR2$ON 000000  
          __CFG_EBTR3$ON 000000             __CFG_WRTB$ON 000000             __CFG_WRTC$ON 000000  
           __CFG_WRTD$ON 000000   __size_ofi2_WriteNibble 0044            __CFG_EBTRB$ON 000000  
                   _main 187A     __end_ofi2_show_debug 1864                     fsr0h 000FEA  
                   fsr1h 000FE2                     indf0 000FEF                     fsr2h 000FDA  
                   fsr0l 000FE9                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 0038            __CFG_BORV$190 000000  
    i2LCDWriteInt@string 0011                     prodh 000FF4                     prodl 000FF3  
                   start 00DC            __CFG_IESO$OFF 000000             ___param_bank 000000  
                  ??_ISR 0015         __end_of_LCDClear 17AC          __end_of_WaitLCD 1820  
     __size_ofi2_LCDGoto 003A                    ?_main 0064          __end_of___awdiv 1264  
        __end_of___awmod 1458          ___awdiv@divisor 0028              _synchronize 1870  
        ___awdiv@counter 002A                    _PORTD 000F83           __CFG_FCMEN$OFF 000000  
       i2WriteNibble@cmd 0003       __CFG_MCLRE$EXTMCLR 000000                    _setup 14C8  
                  _steps 0036                    pclath 000FFA                    tablat 000FF5  
    __size_of_LCDPutChar 0012       __size_ofi2_WaitLCD 0012              ?i2_ReadByte 0001  
                  status 000FD8           __CFG_HFOFST$ON 000000            WaitLCD@status 0027  
     __size_ofi2___awdiv 0084       __size_ofi2___awmod 0070           __CFG_PBADEN$ON 000000  
        __initialization 16D8             __end_of_main 1880         __end_of_ReadByte 1738  
          i2_WriteNibble 1620                   ??_main 0033            __activetblptr 000002  
              ??_LCDInit 0029                ??_LCDGoto 002C      i2LCDWriteStr@string 0007  
       ___awdiv@dividend 0026                   ?_setup 0001            LCDGoto@column 0030  
      __end_ofi2_LCDGoto 16D8                   i2l2121 16AE                   i2l2201 148E  
                 i2l2203 1492                   i2l2211 14B0                   i2l2125 16B8  
                 i2l2133 136E                   i2l2215 14BE                   i2l2207 14A6  
                 i2l2137 13AA                   i2l2161 12A6                   i2l2153 1288  
                 i2l2171 12C6                   i2l2163 12AA                   i2l2147 1278  
                 i2l2403 0062                   i2l2413 008C                   i2l2159 129E  
                 i2l2175 12D0                   i2l2191 146C                   i2l2417 009C  
                 i2l2179 12DE                   i2l2195 1478                   i2l2373 1184  
         __CFG_WDTEN$OFF 000000                   i2l2199 1486                   i2l2367 1118  
                 i2l2383 11B8                   i2l2385 11D6                   i2l2379 11A2  
                 i2l1999 1836                ??_WaitLCD 0027           __CFG_PWRTEN$ON 000000  
         __CFG_XINST$OFF 000000                ??___awdiv 002A           __CFG_STVREN$ON 000000  
              ??___awmod 002A            ?i2_LCDPutChar 0001        i2WriteNibble@data 0001  
         ?i2_WriteNibble 0001         ___awdiv@quotient 002C          ___awmod@divisor 0028  
        ___awmod@counter 002A        __end_ofi2_WaitLCD 1844         __end_of_searched 11E0  
         i2___awdiv@sign 000C      __size_ofi2_ReadByte 0030             __pdataCOMRAM 0033  
      __end_ofi2___awdiv 12E8        __end_ofi2___awmod 14C8             __mediumconst 0000  
                 tblptrh 000FF7             LCDWriteStr@i 0030                   tblptrl 000FF6  
                 tblptru 000FF8           i2___awmod@sign 0006    __size_ofi2_show_debug 0010  
              ?_LCDClear 0001     __size_of_LCDWriteInt 0058     __size_of_LCDWriteStr 0080  
             __accesstop 0060  __end_of__initialization 16FA       __size_of_WriteByte 001A  
          ___rparam_used 000001           __pcstackCOMRAM 0001           WriteNibble@cmd 0028  
         ??i2_LCDPutChar 0006             ??_LCDPutChar 002B            __end_of_setup 1536  
 __size_ofi2_LCDWriteInt 004E   __size_ofi2_LCDWriteStr 0080             i2_show_debug 1854  
           ?i2_WriteByte 0004                  ??_setup 0033             WriteByte@cmd 002A  
             ??_LCDClear 002B          __CFG_PLLCFG$OFF 000000                ?_ReadByte 0001  
     __end_of_LCDPutChar 180E             i2LCDGoto@row 0006       __size_of_pedometer 000C  
     __CFG_CCP2MX$PORTC1 000000            i2_LCDGoto$669 0009          ??i2_WriteNibble 0002  
     __CFG_CCP3MX$PORTB5 000000            ??_WriteNibble 0027        LCDWriteInt@column 0060  
      LCDWriteInt@string 0061             ?_synchronize 0001        __end_of_WriteByte 17E2  
                _LCDInit 101E                  _LCDGoto 1664               _flashlight 17AC  
                i2u43_40 17B6                  i2u44_48 17B8                  _PR2bits 000FBB  
          i2_LCDWriteInt 158E            i2_LCDWriteStr 1368             ??i2_ReadByte 0001  
             ??_ReadByte 0026                ?_searched 0001                  __Hparam 0000  
                _WaitLCD 180E                  __Lparam 0000                  ___awdiv 11E0  
                ___awmod 13E8               _init_debug 1768             __psmallconst 1000  
                __pcinit 16D8                  __ramtop 1000                  __ptext0 187A  
                __ptext1 14C8                  __ptext2 1768                  __ptext3 1844  
                __ptext4 1536                  __ptext5 13E8                  __ptext6 11E0  
                __ptext7 12E8                  __ptext8 17FC                  __ptext9 1664  
           __size_of_ISR 00D4       __end_ofi2_ReadByte 1768                _T2CONbits 000FBA  
    __end_of_WriteNibble 1620         ___awmod@dividend 0026        __end_of_pedometer 1870  
         ?i2_LCDWriteInt 000F           i2LCDWriteStr@i 000B           ?i2_LCDWriteStr 0007  
   end_of_initialization 16FA     __end_ofi2_LCDPutChar 1832            __Lmediumconst 0000  
              i2_LCDGoto 169E               ??_searched 000F        LCDWriteStr@string 002C  
       i2LCDPutChar@data 0006               _show_debug 1844         __CFG_FOSC$INTIO7 000000  
              i2_WaitLCD 1832                _TRISBbits 000F93                _TRISCbits 000F94  
              _TRISDbits 000F95              ?_flashlight 0001                i2___awdiv 1264  
              i2___awmod 1458     __size_ofi2_WriteByte 001A              _CCP1CONbits 000FBD  
             LCDGoto@row 002B           i2WriteByte@cmd 0005        __size_of_LCDClear 0020  
     i2___awdiv@dividend 0007               ?i2_LCDGoto 0006          WriteNibble@data 0026  
            ?_init_debug 0001          i2WaitLCD@status 0002              _WriteNibble 15DC  
          __pidataCOMRAM 1880      start_initialization 16D8               ?i2_WaitLCD 0001  
     i2___awdiv@quotient 000D              __end_of_ISR 00DC     __size_of_synchronize 000A  
        ??i2_LCDWriteInt 0011          ??i2_LCDWriteStr 0009            ??_LCDWriteInt 0033  
          ??_LCDWriteStr 002E               ?i2___awdiv 0007               ?i2___awmod 0001  
      __size_of_ReadByte 0030          i2LCDGoto@column 000B      __size_of_flashlight 001C  
            ?_show_debug 0001                 ?_LCDInit 0001                 ?_LCDGoto 002B  
          WriteByte@data 0029              __pbssCOMRAM 0036    __size_ofi2_LCDPutChar 0012  
          __pcstackBANK0 0060                _WriteByte 17C8           LCDPutChar@data 002B  
    __size_of_init_debug 0024      __end_of_LCDWriteInt 158E      __end_of_LCDWriteStr 1368  
           searched@time 0013              ??i2_LCDGoto 0007                 ?_WaitLCD 0001  
      __size_of_searched 00DA                __pintcode 0008                 ?___awdiv 0026  
               ?___awmod 0026         LCDWriteInt@value 0032    __end_ofi2_WriteNibble 1664  
           i2_LCDPutChar 1820         __CFG_PRICLKEN$ON 000000              __smallconst 1000  
            ??i2_WaitLCD 0002               ?_WriteByte 0029              ??i2___awdiv 000B  
            ??i2___awmod 0005           __size_of_setup 006E         i2ReadByte@status 0001  
              _pedometer 1864                 _LCDClear 178C                 _LATBbits 000F8A  
               _LATCbits 000F8B                 _LATDbits 000F8C      __size_of_show_debug 0010  
            _LCDGoto$669 002E                 i2u114_40 162E                 i2u115_48 1630  
               i2u138_40 13A4                 i2u138_47 139A                 i2u170_47 007C  
               i2u139_40 13E0                 i2u139_47 13D6                 i2u171_47 11A8  
       __CFG_WDTPS$32768 000000         i2LCDWriteInt@row 000F         __size_of_LCDInit 00E8  
       __size_of_LCDGoto 003A        i2___awdiv@divisor 0009             ??_flashlight 0001  
      i2___awdiv@counter 000B              _LCDWriteInt 1536              _LCDWriteStr 12E8  
            _INTCON2bits 000FF1              _INTCON3bits 000FF0       i2___awmod@dividend 0001  
             ?_pedometer 0001                 _ReadByte 1708               _CCPR1Lbits 000FBE  
               __Hrparam 0000                 __Lrparam 0000       __CFG_BOREN$SBORDIS 000000  
       __size_of_WaitLCD 0012        __CFG_P2BMX$PORTD2 000000       __end_of_flashlight 17C8  
           ??_init_debug 0033         __size_of___awdiv 0084             ?_WriteNibble 0026  
       __size_of___awmod 0070            ?i2_show_debug 0001               _ANSELBbits 000F39  
              searched@i 0011            ??i2_WriteByte 0005              ??_WriteByte 002A  
               __ptext10 101E                 __ptext11 178C                 __ptext20 1864  
               __ptext12 17C8                 __ptext21 1854                 __ptext13 15DC  
               __ptext30 1832                 __ptext22 158E                 __ptext14 180E  
               __ptext31 1738                 __ptext23 1458                 __ptext15 1708  
               __ptext24 1264                 __ptext25 1368                 __ptext17 1870  
               __ptext26 1820                 __ptext18 1106                 __ptext27 169E  
               __ptext19 17AC                 __ptext28 17E2                 __ptext29 1620  
         _kiwi_frequence 0033       __end_of_init_debug 178C            __size_of_main 0006  
            _kiwi_length 0035                 _searched 1106           ReadByte@status 0026  
               int$flags 0038               _LCDPutChar 17FC                 main@argc 0064  
               main@argv 0066           ??i2_show_debug 0015             ??_show_debug 0033  
          ??_synchronize 0001        i2___awmod@divisor 0003        i2___awmod@counter 0005  
             _INTCONbits 000FF2    __end_ofi2_LCDWriteInt 15DC    __end_ofi2_LCDWriteStr 13E8  
               intlevel2 0000              ??_pedometer 0015           LCDWriteInt@row 0031  
    __end_ofi2_WriteByte 17FC       __end_of_show_debug 1854        __CFG_T3CMX$PORTC0 000000  
    __end_of_synchronize 187A               i2_ReadByte 1738  
