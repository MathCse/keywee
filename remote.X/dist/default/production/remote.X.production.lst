

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Jun 02 10:50:08 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           ; Version 1.41
    49                           ; Generated 25/01/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F46K22 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	idataCOMRAM
    84  00193E                     __pidataCOMRAM:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _kiwi_frequence
    88  00193E  23                 	db	35
    89  00193F  23                 	db	35
    90  001940  23                 	db	35
    91                           
    92                           ;initializer for _kiwi_length
    93  001941  03                 	db	3
    94  0000                     _ANSELBbits	set	3897
    95  0000                     _LATD	set	3980
    96  0000                     _PORTD	set	3971
    97  0000                     _LATDbits	set	3980
    98  0000                     _TRISDbits	set	3989
    99  0000                     _PORTBbits	set	3969
   100  0000                     _PR2bits	set	4027
   101  0000                     _CCPR1Lbits	set	4030
   102  0000                     _CCP1CONbits	set	4029
   103  0000                     _T2CONbits	set	4026
   104  0000                     _LATCbits	set	3979
   105  0000                     _TRISCbits	set	3988
   106  0000                     _INTCON3bits	set	4080
   107  0000                     _LATBbits	set	3978
   108  0000                     _TRISBbits	set	3987
   109  0000                     _INTCONbits	set	4082
   110  0000                     _INTCON2bits	set	4081
   111                           
   112                           	psect	smallconst
   113  001000                     __psmallconst:
   114                           	opt stack 0
   115  001000  00                 	db	0
   116  001001  30                 	db	48	;'0'
   117  001002  31                 	db	49	;'1'
   118  001003  32                 	db	50	;'2'
   119  001004  33                 	db	51	;'3'
   120  001005  34                 	db	52	;'4'
   121  001006  35                 	db	53	;'5'
   122  001007  36                 	db	54	;'6'
   123  001008  37                 	db	55	;'7'
   124  001009  38                 	db	56	;'8'
   125  00100A  39                 	db	57	;'9'
   126  00100B  41                 	db	65	;'A'
   127  00100C  42                 	db	66	;'B'
   128  00100D  43                 	db	67	;'C'
   129  00100E  44                 	db	68	;'D'
   130  00100F  45                 	db	69	;'E'
   131  001010  46                 	db	70	;'F'
   132  001011  00                 	db	0
   133  001012                     STR_2:
   134  001012  4E                 	db	78	;'N'
   135  001013  6F                 	db	111	;'o'
   136  001014  6D                 	db	109	;'m'
   137  001015  62                 	db	98	;'b'
   138  001016  72                 	db	114	;'r'
   139  001017  65                 	db	101	;'e'
   140  001018  20                 	db	32
   141  001019  70                 	db	112	;'p'
   142  00101A  61                 	db	97	;'a'
   143  00101B  73                 	db	115	;'s'
   144  00101C  00                 	db	0
   145  00101D                     STR_3:
   146  00101D  20                 	db	32
   147  00101E  20                 	db	32
   148  00101F  20                 	db	32
   149  001020  20                 	db	32
   150  001021  00                 	db	0
   151  001022                     STR_1:
   152  001022  53                 	db	83	;'S'
   153  001023  79                 	db	121	;'y'
   154  001024  6E                 	db	110	;'n'
   155  001025  63                 	db	99	;'c'
   156  001026  00                 	db	0
   157  0000                     
   158                           ; #config settings
   159  001027  00                 	db	0	; dummy byte at the end
   160  0000                     
   161                           	psect	cinit
   162  001762                     __pcinit:
   163                           	opt stack 0
   164  001762                     start_initialization:
   165                           	opt stack 0
   166  001762                     __initialization:
   167                           	opt stack 0
   168                           
   169                           ; Initialize objects allocated to COMRAM (4 bytes)
   170                           ; load TBLPTR registers with __pidataCOMRAM
   171  001762  0E3E               	movlw	low __pidataCOMRAM
   172  001764  6EF6               	movwf	tblptrl,c
   173  001766  0E19               	movlw	high __pidataCOMRAM
   174  001768  6EF7               	movwf	tblptrh,c
   175  00176A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   176  00176C  6EF8               	movwf	tblptru,c
   177  00176E  EE00  F031         	lfsr	0,__pdataCOMRAM
   178  001772  EE10 F004          	lfsr	1,4
   179  001776                     copy_data0:
   180  001776  0009               	tblrd		*+
   181  001778  CFF5 FFEE          	movff	tablat,postinc0
   182  00177C  50E5               	movf	postdec1,w,c
   183  00177E  50E1               	movf	fsr1l,w,c
   184  001780  E1FA               	bnz	copy_data0
   185                           
   186                           ; Clear objects allocated to COMRAM (3 bytes)
   187  001782  6A37               	clrf	(__pbssCOMRAM+2)& (0+255),c
   188  001784  6A36               	clrf	(__pbssCOMRAM+1)& (0+255),c
   189  001786  6A35               	clrf	__pbssCOMRAM& (0+255),c
   190  001788                     end_of_initialization:
   191                           	opt stack 0
   192  001788                     __end_of__initialization:
   193                           	opt stack 0
   194  001788  9038               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   195  00178A  9238               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   196  00178C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   197  00178E  6EF8               	movwf	tblptru,c
   198  001790  0100               	movlb	0
   199  001792  EF9C  F00C         	goto	_main	;jump to C main() function
   200                           tblptru	equ	0xFF8
   201                           tblptrh	equ	0xFF7
   202                           tblptrl	equ	0xFF6
   203                           tablat	equ	0xFF5
   204                           postinc0	equ	0xFEE
   205                           postdec1	equ	0xFE5
   206                           fsr1l	equ	0xFE1
   207                           
   208                           	psect	bssCOMRAM
   209  000035                     __pbssCOMRAM:
   210                           	opt stack 0
   211  000035                     _steps:
   212                           	opt stack 0
   213  000035                     	ds	2
   214  000037                     _synchronization:
   215                           	opt stack 0
   216  000037                     	ds	1
   217                           tblptru	equ	0xFF8
   218                           tblptrh	equ	0xFF7
   219                           tblptrl	equ	0xFF6
   220                           tablat	equ	0xFF5
   221                           postinc0	equ	0xFEE
   222                           postdec1	equ	0xFE5
   223                           fsr1l	equ	0xFE1
   224                           
   225                           	psect	dataCOMRAM
   226  000031                     __pdataCOMRAM:
   227                           	opt stack 0
   228  000031                     _kiwi_frequence:
   229                           	opt stack 0
   230  000031                     	ds	3
   231  000034                     _kiwi_length:
   232                           	opt stack 0
   233  000034                     	ds	1
   234                           tblptru	equ	0xFF8
   235                           tblptrh	equ	0xFF7
   236                           tblptrl	equ	0xFF6
   237                           tablat	equ	0xFF5
   238                           postinc0	equ	0xFEE
   239                           postdec1	equ	0xFE5
   240                           fsr1l	equ	0xFE1
   241                           
   242                           	psect	cstackBANK0
   243  000060                     __pcstackBANK0:
   244                           	opt stack 0
   245  000060                     ??_LCDWriteStr:
   246  000060                     _LCDGoto$794:
   247                           	opt stack 0
   248                           
   249                           ; 2 bytes @ 0x0
   250  000060                     	ds	2
   251  000062                     LCDGoto@column:
   252                           	opt stack 0
   253                           
   254                           ; 1 bytes @ 0x2
   255  000062                     	ds	1
   256  000063                     LCDWriteInt@row:
   257                           	opt stack 0
   258                           
   259                           ; 1 bytes @ 0x3
   260  000063                     	ds	1
   261  000064                     LCDWriteInt@value:
   262                           	opt stack 0
   263                           
   264                           ; 1 bytes @ 0x4
   265  000064                     	ds	1
   266  000065                     LCDWriteInt@column:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x5
   270  000065                     	ds	1
   271  000066                     LCDWriteInt@string:
   272                           	opt stack 0
   273                           
   274                           ; 3 bytes @ 0x6
   275  000066                     	ds	3
   276  000069                     
   277                           ; 2 bytes @ 0x9
   278  000069                     	ds	2
   279  00006B                     
   280                           ; 3 bytes @ 0xB
   281  00006B                     	ds	3
   282                           tblptru	equ	0xFF8
   283                           tblptrh	equ	0xFF7
   284                           tblptrl	equ	0xFF6
   285                           tablat	equ	0xFF5
   286                           postinc0	equ	0xFEE
   287                           postdec1	equ	0xFE5
   288                           fsr1l	equ	0xFE1
   289                           
   290                           	psect	cstackCOMRAM
   291  000001                     __pcstackCOMRAM:
   292                           	opt stack 0
   293  000001                     ??_flashlight:
   294  000001                     ?i2___awmod:
   295                           	opt stack 0
   296  000001                     i2ReadByte@status:
   297                           	opt stack 0
   298  000001                     i2WriteNibble@data:
   299                           	opt stack 0
   300  000001                     i2___awmod@dividend:
   301                           	opt stack 0
   302                           
   303                           ; 2 bytes @ 0x0
   304  000001                     	ds	1
   305  000002                     ??i2_WriteNibble:
   306  000002                     i2WaitLCD@status:
   307                           	opt stack 0
   308                           
   309                           ; 1 bytes @ 0x1
   310  000002                     	ds	1
   311  000003                     i2WriteNibble@cmd:
   312                           	opt stack 0
   313  000003                     i2___awmod@divisor:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x2
   317  000003                     	ds	1
   318  000004                     i2WriteByte@data:
   319                           	opt stack 0
   320                           
   321                           ; 1 bytes @ 0x3
   322  000004                     	ds	1
   323  000005                     i2WriteByte@cmd:
   324                           	opt stack 0
   325  000005                     i2___awmod@counter:
   326                           	opt stack 0
   327                           
   328                           ; 1 bytes @ 0x4
   329  000005                     	ds	1
   330  000006                     i2LCDGoto@row:
   331                           	opt stack 0
   332  000006                     i2LCDPutChar@data:
   333                           	opt stack 0
   334  000006                     i2___awmod@sign:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0x5
   338  000006                     	ds	1
   339  000007                     ??i2_LCDGoto:
   340  000007                     ?i2___awdiv:
   341                           	opt stack 0
   342  000007                     i2LCDWriteStr@string:
   343                           	opt stack 0
   344  000007                     i2___awdiv@dividend:
   345                           	opt stack 0
   346                           
   347                           ; 2 bytes @ 0x6
   348  000007                     	ds	2
   349  000009                     ??i2_LCDWriteStr:
   350  000009                     i2LCDGoto@column:
   351                           	opt stack 0
   352  000009                     i2___awdiv@divisor:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x8
   356  000009                     	ds	1
   357  00000A                     i2_LCDGoto$794:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x9
   361  00000A                     	ds	1
   362  00000B                     i2LCDWriteStr@i:
   363                           	opt stack 0
   364  00000B                     i2___awdiv@counter:
   365                           	opt stack 0
   366                           
   367                           ; 1 bytes @ 0xA
   368  00000B                     	ds	1
   369  00000C                     i2___awdiv@sign:
   370                           	opt stack 0
   371                           
   372                           ; 1 bytes @ 0xB
   373  00000C                     	ds	1
   374  00000D                     i2___awdiv@quotient:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0xC
   378  00000D                     	ds	2
   379  00000F                     ??_searched:
   380  00000F                     i2LCDWriteInt@row:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0xE
   384  00000F                     	ds	1
   385  000010                     i2LCDWriteInt@value:
   386                           	opt stack 0
   387                           
   388                           ; 1 bytes @ 0xF
   389  000010                     	ds	1
   390  000011                     i2LCDWriteInt@column:
   391                           	opt stack 0
   392  000011                     searched@found:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0x10
   396  000011                     	ds	1
   397  000012                     i2LCDWriteInt@string:
   398                           	opt stack 0
   399                           
   400                           ; 3 bytes @ 0x11
   401  000012                     	ds	1
   402  000013                     searched@time:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0x12
   406  000013                     	ds	2
   407  000015                     ??_synchronize:
   408  000015                     searched@i:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x14
   412  000015                     	ds	2
   413  000017                     ??_ISR:
   414                           
   415                           ; 1 bytes @ 0x16
   416  000017                     	ds	15
   417  000026                     ISR@i:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x25
   421  000026                     	ds	2
   422  000028                     ?___awdiv:
   423                           	opt stack 0
   424  000028                     ?___awmod:
   425                           	opt stack 0
   426  000028                     ReadByte@status:
   427                           	opt stack 0
   428  000028                     WriteNibble@data:
   429                           	opt stack 0
   430  000028                     ___awdiv@dividend:
   431                           	opt stack 0
   432  000028                     ___awmod@dividend:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0x27
   436  000028                     	ds	1
   437  000029                     ??_WriteNibble:
   438  000029                     WaitLCD@status:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x28
   442  000029                     	ds	1
   443  00002A                     WriteNibble@cmd:
   444                           	opt stack 0
   445  00002A                     ___awdiv@divisor:
   446                           	opt stack 0
   447  00002A                     ___awmod@divisor:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x29
   451  00002A                     	ds	1
   452  00002B                     ??_LCDInit:
   453  00002B                     WriteByte@data:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x2A
   457  00002B                     	ds	1
   458  00002C                     WriteByte@cmd:
   459                           	opt stack 0
   460  00002C                     ___awdiv@counter:
   461                           	opt stack 0
   462  00002C                     ___awmod@counter:
   463                           	opt stack 0
   464                           
   465                           ; 1 bytes @ 0x2B
   466  00002C                     	ds	1
   467  00002D                     ??_LCDClear:
   468  00002D                     LCDGoto@row:
   469                           	opt stack 0
   470  00002D                     LCDPutChar@data:
   471                           	opt stack 0
   472  00002D                     ___awdiv@sign:
   473                           	opt stack 0
   474  00002D                     ___awmod@sign:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x2C
   478  00002D                     	ds	1
   479  00002E                     ??_LCDGoto:
   480  00002E                     LCDWriteStr@string:
   481                           	opt stack 0
   482  00002E                     ___awdiv@quotient:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x2D
   486  00002E                     	ds	2
   487  000030                     LCDWriteStr@i:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x2F
   491  000030                     	ds	1
   492  000031                     tblptru	equ	0xFF8
   493                           tblptrh	equ	0xFF7
   494                           tblptrl	equ	0xFF6
   495                           tablat	equ	0xFF5
   496                           postinc0	equ	0xFEE
   497                           postdec1	equ	0xFE5
   498                           fsr1l	equ	0xFE1
   499                           
   500                           ; 1 bytes @ 0x30
   501 ;;
   502 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   503 ;;
   504 ;; *************** function _main *****************
   505 ;; Defined at:
   506 ;;		line 255 in file "main.c"
   507 ;; Parameters:    Size  Location     Type
   508 ;;  argc            2    9[BANK0 ] int 
   509 ;;  argv            3   11[BANK0 ] PTR PTR unsigned char 
   510 ;; Auto vars:     Size  Location     Type
   511 ;;		None
   512 ;; Return value:  Size  Location     Type
   513 ;;                  2    9[BANK0 ] int 
   514 ;; Registers used:
   515 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   516 ;; Tracked objects:
   517 ;;		On entry : 0/0
   518 ;;		On exit  : 0/0
   519 ;;		Unchanged: 0/0
   520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   521 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   524 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   525 ;;Total ram usage:        5 bytes
   526 ;; Hardware stack levels required when called:   16
   527 ;; This function calls:
   528 ;;		_setup
   529 ;; This function is called by:
   530 ;;		Startup code after reset
   531 ;; This function uses a non-reentrant model
   532 ;;
   533                           
   534                           	psect	text0
   535  001938                     __ptext0:
   536                           	opt stack 0
   537  001938                     _main:
   538                           	opt stack 15
   539                           
   540                           ;main.c: 257: setup();
   541                           
   542                           ;incstack = 0
   543  001938  EC81  F00A         	call	_setup	;wreg free
   544  00193C                     l93:
   545  00193C  D7FF               	goto	l93
   546  00193E                     __end_of_main:
   547                           	opt stack 0
   548                           tblptru	equ	0xFF8
   549                           tblptrh	equ	0xFF7
   550                           tblptrl	equ	0xFF6
   551                           tablat	equ	0xFF5
   552                           postinc0	equ	0xFEE
   553                           postdec1	equ	0xFE5
   554                           fsr1l	equ	0xFE1
   555                           
   556 ;; *************** function _setup *****************
   557 ;; Defined at:
   558 ;;		line 91 in file "main.c"
   559 ;; Parameters:    Size  Location     Type
   560 ;;		None
   561 ;; Auto vars:     Size  Location     Type
   562 ;;		None
   563 ;; Return value:  Size  Location     Type
   564 ;;                  1    wreg      void 
   565 ;; Registers used:
   566 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   567 ;; Tracked objects:
   568 ;;		On entry : 0/0
   569 ;;		On exit  : 0/0
   570 ;;		Unchanged: 0/0
   571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   576 ;;Total ram usage:        0 bytes
   577 ;; Hardware stack levels used:    1
   578 ;; Hardware stack levels required when called:   15
   579 ;; This function calls:
   580 ;;		_init_debug
   581 ;; This function is called by:
   582 ;;		_main
   583 ;; This function uses a non-reentrant model
   584 ;;
   585                           
   586                           	psect	text1
   587  001502                     __ptext1:
   588                           	opt stack 0
   589  001502                     _setup:
   590                           	opt stack 15
   591                           
   592                           ;main.c: 93: init_debug();
   593                           
   594                           ;incstack = 0
   595  001502  EC28  F00C         	call	_init_debug	;wreg free
   596                           
   597                           ;main.c: 96: INTCON2bits.INTEDG0 = 0;
   598  001506  9CF1               	bcf	intcon2,6,c	;volatile
   599                           
   600                           ;main.c: 97: INTCONbits.INT0IF = 0 ;
   601  001508  92F2               	bcf	intcon,1,c	;volatile
   602                           
   603                           ;main.c: 98: TRISBbits.TRISB0 = 0;
   604  00150A  9093               	bcf	3987,0,c	;volatile
   605                           
   606                           ;main.c: 99: LATBbits.LATB0 = 0;
   607  00150C  908A               	bcf	3978,0,c	;volatile
   608                           
   609                           ;main.c: 100: TRISBbits.TRISB0 = 1;
   610  00150E  8093               	bsf	3987,0,c	;volatile
   611                           
   612                           ;main.c: 101: ANSELBbits.ANSB0 = 0;
   613  001510  010F               	movlb	15	; () banked
   614  001512  9139               	bcf	57,0,b	;volatile
   615                           
   616                           ; BSR set to: 15
   617                           ;main.c: 102: INTCONbits.INT0E = 1 ;
   618  001514  88F2               	bsf	intcon,4,c	;volatile
   619                           
   620                           ; BSR set to: 15
   621                           ;main.c: 105: INTCON2bits.INTEDG1 = 0;
   622  001516  9AF1               	bcf	intcon2,5,c	;volatile
   623                           
   624                           ; BSR set to: 15
   625                           ;main.c: 106: INTCON3bits.INT1IF = 0 ;
   626  001518  90F0               	bcf	intcon3,0,c	;volatile
   627                           
   628                           ; BSR set to: 15
   629                           ;main.c: 107: TRISBbits.TRISB1 = 0;
   630  00151A  9293               	bcf	3987,1,c	;volatile
   631                           
   632                           ; BSR set to: 15
   633                           ;main.c: 108: LATBbits.LATB1 = 0;
   634  00151C  928A               	bcf	3978,1,c	;volatile
   635                           
   636                           ; BSR set to: 15
   637                           ;main.c: 109: TRISBbits.TRISB1 = 1;
   638  00151E  8293               	bsf	3987,1,c	;volatile
   639                           
   640                           ; BSR set to: 15
   641                           ;main.c: 110: ANSELBbits.ANSB1 = 0;
   642  001520  010F               	movlb	15	; () banked
   643  001522  9339               	bcf	57,1,b	;volatile
   644                           
   645                           ; BSR set to: 15
   646                           ;main.c: 111: INTCON3bits.INT1E = 1 ;
   647  001524  86F0               	bsf	intcon3,3,c	;volatile
   648                           
   649                           ; BSR set to: 15
   650                           ;main.c: 114: INTCON2bits.INTEDG2 = 1;
   651  001526  88F1               	bsf	intcon2,4,c	;volatile
   652                           
   653                           ; BSR set to: 15
   654                           ;main.c: 115: INTCON3bits.INT2IF = 0 ;
   655  001528  92F0               	bcf	intcon3,1,c	;volatile
   656                           
   657                           ; BSR set to: 15
   658                           ;main.c: 116: TRISBbits.TRISB2 = 0;
   659  00152A  9493               	bcf	3987,2,c	;volatile
   660                           
   661                           ; BSR set to: 15
   662                           ;main.c: 117: LATBbits.LATB2 = 0;
   663  00152C  948A               	bcf	3978,2,c	;volatile
   664                           
   665                           ; BSR set to: 15
   666                           ;main.c: 118: TRISBbits.TRISB2 = 1;
   667  00152E  8493               	bsf	3987,2,c	;volatile
   668                           
   669                           ; BSR set to: 15
   670                           ;main.c: 119: ANSELBbits.ANSB2 = 0;
   671  001530  010F               	movlb	15	; () banked
   672  001532  9539               	bcf	57,2,b	;volatile
   673                           
   674                           ; BSR set to: 15
   675                           ;main.c: 120: INTCON3bits.INT2E = 1 ;
   676  001534  88F0               	bsf	intcon3,4,c	;volatile
   677                           
   678                           ; BSR set to: 15
   679                           ;main.c: 123: TRISCbits.RC1 = 0 ;
   680  001536  9294               	bcf	3988,1,c	;volatile
   681                           
   682                           ; BSR set to: 15
   683                           ;main.c: 124: LATCbits.LATC1 = 0 ;
   684  001538  928B               	bcf	3979,1,c	;volatile
   685                           
   686                           ; BSR set to: 15
   687                           ;main.c: 127: T2CONbits.T2OUTPS = 0 ;
   688  00153A  96BA               	bcf	4026,3,c	;volatile
   689  00153C  98BA               	bcf	4026,4,c	;volatile
   690  00153E  9ABA               	bcf	4026,5,c	;volatile
   691  001540  9CBA               	bcf	4026,6,c	;volatile
   692                           
   693                           ; BSR set to: 15
   694                           ;main.c: 128: T2CONbits.T2CKPS = 0b10 ;
   695  001542  50BA               	movf	4026,w,c	;volatile
   696  001544  0BFC               	andlw	-4
   697  001546  0902               	iorlw	2
   698  001548  6EBA               	movwf	4026,c	;volatile
   699                           
   700                           ; BSR set to: 15
   701                           ;main.c: 129: T2CONbits.TMR2ON = 1 ;
   702  00154A  84BA               	bsf	4026,2,c	;volatile
   703                           
   704                           ; BSR set to: 15
   705                           ;main.c: 132: TRISCbits.RC2 = 0;
   706  00154C  9494               	bcf	3988,2,c	;volatile
   707                           
   708                           ; BSR set to: 15
   709                           ;main.c: 133: CCP1CONbits.P1M = 0 ;
   710  00154E  0E3F               	movlw	-193
   711  001550  16BD               	andwf	4029,f,c	;volatile
   712                           
   713                           ; BSR set to: 15
   714                           ;main.c: 134: CCP1CONbits.DC1B = 0 ;
   715  001552  0ECF               	movlw	-49
   716  001554  16BD               	andwf	4029,f,c	;volatile
   717                           
   718                           ; BSR set to: 15
   719                           ;main.c: 135: CCP1CONbits.CCP1M = 0b1100 ;
   720  001556  50BD               	movf	4029,w,c	;volatile
   721  001558  0BF0               	andlw	-16
   722  00155A  090C               	iorlw	12
   723  00155C  6EBD               	movwf	4029,c	;volatile
   724                           
   725                           ; BSR set to: 15
   726                           ;main.c: 136: CCPR1Lbits.CCPR1L = 0 ;
   727  00155E  0E00               	movlw	0
   728  001560  6EBE               	movwf	4030,c	;volatile
   729                           
   730                           ; BSR set to: 15
   731                           ;main.c: 139: INTCONbits.PEIE = 1;
   732  001562  8CF2               	bsf	intcon,6,c	;volatile
   733                           
   734                           ; BSR set to: 15
   735                           ;main.c: 140: INTCONbits.GIE = 1 ;
   736  001564  8EF2               	bsf	intcon,7,c	;volatile
   737                           
   738                           ; BSR set to: 15
   739                           ;main.c: 143: steps = 0;
   740  001566  0E00               	movlw	0
   741  001568  6E36               	movwf	_steps+1,c
   742  00156A  0E00               	movlw	0
   743  00156C  6E35               	movwf	_steps,c
   744                           
   745                           ; BSR set to: 15
   746  00156E  0012               	return		;funcret
   747  001570                     __end_of_setup:
   748                           	opt stack 0
   749                           tblptru	equ	0xFF8
   750                           tblptrh	equ	0xFF7
   751                           tblptrl	equ	0xFF6
   752                           tablat	equ	0xFF5
   753                           intcon	equ	0xFF2
   754                           intcon2	equ	0xFF1
   755                           intcon3	equ	0xFF0
   756                           postinc0	equ	0xFEE
   757                           postdec1	equ	0xFE5
   758                           fsr1l	equ	0xFE1
   759                           
   760 ;; *************** function _init_debug *****************
   761 ;; Defined at:
   762 ;;		line 82 in file "main.c"
   763 ;; Parameters:    Size  Location     Type
   764 ;;		None
   765 ;; Auto vars:     Size  Location     Type
   766 ;;		None
   767 ;; Return value:  Size  Location     Type
   768 ;;                  1    wreg      void 
   769 ;; Registers used:
   770 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   771 ;; Tracked objects:
   772 ;;		On entry : 0/0
   773 ;;		On exit  : 0/0
   774 ;;		Unchanged: 0/0
   775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   780 ;;Total ram usage:        0 bytes
   781 ;; Hardware stack levels used:    1
   782 ;; Hardware stack levels required when called:   14
   783 ;; This function calls:
   784 ;;		_LCDClear
   785 ;;		_LCDGoto
   786 ;;		_LCDInit
   787 ;;		_LCDWriteStr
   788 ;;		_show_debug
   789 ;; This function is called by:
   790 ;;		_setup
   791 ;; This function uses a non-reentrant model
   792 ;;
   793                           
   794                           	psect	text2
   795  001850                     __ptext2:
   796                           	opt stack 0
   797  001850                     _init_debug:
   798                           	opt stack 15
   799                           
   800                           ;main.c: 83: LCDInit();
   801                           
   802                           ; BSR set to: 15
   803                           ;incstack = 0
   804  001850  EC95  F008         	call	_LCDInit	;wreg free
   805                           
   806                           ;main.c: 84: LCDClear();
   807  001854  EC3A  F00C         	call	_LCDClear	;wreg free
   808                           
   809                           ;main.c: 85: LCDGoto(0, 0);
   810  001858  0E00               	movlw	0
   811  00185A  6E2D               	movwf	LCDGoto@row,c
   812  00185C  0E00               	movlw	0
   813  00185E  EC73  F00B         	call	_LCDGoto
   814                           
   815                           ;main.c: 86: LCDWriteStr("Nombre pas");
   816  001862  0E12               	movlw	low STR_2
   817  001864  6E2E               	movwf	LCDWriteStr@string,c
   818  001866  0E10               	movlw	high STR_2
   819  001868  6E2F               	movwf	LCDWriteStr@string+1,c
   820  00186A  EC09  F009         	call	_LCDWriteStr	;wreg free
   821                           
   822                           ;main.c: 87: show_debug();
   823  00186E  ECFB  F00B         	call	_show_debug	;wreg free
   824  001872  0012               	return		;funcret
   825  001874                     __end_of_init_debug:
   826                           	opt stack 0
   827                           tblptru	equ	0xFF8
   828                           tblptrh	equ	0xFF7
   829                           tblptrl	equ	0xFF6
   830                           tablat	equ	0xFF5
   831                           intcon	equ	0xFF2
   832                           intcon2	equ	0xFF1
   833                           intcon3	equ	0xFF0
   834                           postinc0	equ	0xFEE
   835                           postdec1	equ	0xFE5
   836                           fsr1l	equ	0xFE1
   837                           
   838 ;; *************** function _show_debug *****************
   839 ;; Defined at:
   840 ;;		line 73 in file "main.c"
   841 ;; Parameters:    Size  Location     Type
   842 ;;		None
   843 ;; Auto vars:     Size  Location     Type
   844 ;;		None
   845 ;; Return value:  Size  Location     Type
   846 ;;                  1    wreg      void 
   847 ;; Registers used:
   848 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   849 ;; Tracked objects:
   850 ;;		On entry : 0/0
   851 ;;		On exit  : 0/0
   852 ;;		Unchanged: 0/0
   853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   858 ;;Total ram usage:        0 bytes
   859 ;; Hardware stack levels used:    1
   860 ;; Hardware stack levels required when called:   13
   861 ;; This function calls:
   862 ;;		_LCDGoto
   863 ;;		_LCDWriteInt
   864 ;;		_LCDWriteStr
   865 ;; This function is called by:
   866 ;;		_init_debug
   867 ;; This function uses a non-reentrant model
   868 ;;
   869                           
   870                           	psect	text3
   871  0017F6                     __ptext3:
   872                           	opt stack 0
   873  0017F6                     _show_debug:
   874                           	opt stack 15
   875                           
   876                           ;main.c: 74: LCDWriteInt(0, 1, steps);
   877                           
   878                           ;incstack = 0
   879  0017F6  0E01               	movlw	1
   880  0017F8  0100               	movlb	0	; () banked
   881  0017FA  6F63               	movwf	LCDWriteInt@row& (0+255),b
   882  0017FC  C035  F064         	movff	_steps,LCDWriteInt@value
   883  001800  0E00               	movlw	0
   884  001802  ECB8  F00A         	call	_LCDWriteInt
   885                           
   886                           ;main.c: 75: if (synchronization) {
   887  001806  5037               	movf	_synchronization,w,c
   888  001808  B4D8               	btfsc	status,2,c
   889  00180A  0012               	return	
   890                           
   891                           ;main.c: 76: LCDGoto(8, 1);
   892  00180C  0E01               	movlw	1
   893  00180E  6E2D               	movwf	LCDGoto@row,c
   894  001810  0E08               	movlw	8
   895  001812  EC73  F00B         	call	_LCDGoto
   896                           
   897                           ;main.c: 77: LCDWriteStr("Sync");
   898  001816  0E22               	movlw	low STR_1
   899  001818  6E2E               	movwf	LCDWriteStr@string,c
   900  00181A  0E10               	movlw	high STR_1
   901  00181C  6E2F               	movwf	LCDWriteStr@string+1,c
   902  00181E  EC09  F009         	call	_LCDWriteStr	;wreg free
   903  001822  0012               	return	
   904  001824                     __end_of_show_debug:
   905                           	opt stack 0
   906                           tblptru	equ	0xFF8
   907                           tblptrh	equ	0xFF7
   908                           tblptrl	equ	0xFF6
   909                           tablat	equ	0xFF5
   910                           intcon	equ	0xFF2
   911                           intcon2	equ	0xFF1
   912                           intcon3	equ	0xFF0
   913                           postinc0	equ	0xFEE
   914                           postdec1	equ	0xFE5
   915                           fsr1l	equ	0xFE1
   916                           status	equ	0xFD8
   917                           
   918 ;; *************** function _LCDWriteInt *****************
   919 ;; Defined at:
   920 ;;		line 229 in file "lcd.c"
   921 ;; Parameters:    Size  Location     Type
   922 ;;  column          1    wreg     unsigned char 
   923 ;;  row             1    3[BANK0 ] unsigned char 
   924 ;;  value           1    4[BANK0 ] unsigned char 
   925 ;; Auto vars:     Size  Location     Type
   926 ;;  column          1    5[BANK0 ] unsigned char 
   927 ;;  string          3    6[BANK0 ] unsigned char [3]
   928 ;; Return value:  Size  Location     Type
   929 ;;                  1    wreg      void 
   930 ;; Registers used:
   931 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   932 ;; Tracked objects:
   933 ;;		On entry : 0/0
   934 ;;		On exit  : 0/0
   935 ;;		Unchanged: 0/0
   936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   937 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   938 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   940 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   941 ;;Total ram usage:        6 bytes
   942 ;; Hardware stack levels used:    1
   943 ;; Hardware stack levels required when called:   12
   944 ;; This function calls:
   945 ;;		_LCDGoto
   946 ;;		_LCDWriteStr
   947 ;;		___awdiv
   948 ;;		___awmod
   949 ;; This function is called by:
   950 ;;		_show_debug
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954                           	psect	text4
   955  001570                     __ptext4:
   956                           	opt stack 0
   957  001570                     _LCDWriteInt:
   958                           	opt stack 15
   959                           
   960                           ;incstack = 0
   961                           ;LCDWriteInt@column stored from wreg
   962  001570  0100               	movlb	0	; () banked
   963  001572  6F65               	movwf	LCDWriteInt@column& (0+255),b
   964                           
   965                           ;lcd.c: 230: char string[3];
   966                           ;lcd.c: 232: string[0] = value / 10 + '0';
   967  001574  C064  F028         	movff	LCDWriteInt@value,___awdiv@dividend
   968  001578  6A29               	clrf	___awdiv@dividend+1,c
   969  00157A  0E00               	movlw	0
   970  00157C  6E2B               	movwf	___awdiv@divisor+1,c
   971  00157E  0E0A               	movlw	10
   972  001580  6E2A               	movwf	___awdiv@divisor,c
   973  001582  EC4D  F009         	call	___awdiv	;wreg free
   974  001586  5028               	movf	?___awdiv,w,c
   975  001588  0F30               	addlw	48
   976  00158A  0100               	movlb	0	; () banked
   977  00158C  6F66               	movwf	LCDWriteInt@string& (0+255),b
   978                           
   979                           ;lcd.c: 233: string[1] = value % 10 + '0';
   980  00158E  C064  F028         	movff	LCDWriteInt@value,___awmod@dividend
   981  001592  6A29               	clrf	___awmod@dividend+1,c
   982  001594  0E00               	movlw	0
   983  001596  6E2B               	movwf	___awmod@divisor+1,c
   984  001598  0E0A               	movlw	10
   985  00159A  6E2A               	movwf	___awmod@divisor,c
   986  00159C  EC11  F00A         	call	___awmod	;wreg free
   987  0015A0  5028               	movf	?___awmod,w,c
   988  0015A2  0F30               	addlw	48
   989  0015A4  0100               	movlb	0	; () banked
   990  0015A6  6F67               	movwf	(LCDWriteInt@string+1)& (0+255),b
   991                           
   992                           ; BSR set to: 0
   993                           ;lcd.c: 234: string[2] = '\0';
   994  0015A8  0E00               	movlw	0
   995  0015AA  0100               	movlb	0	; () banked
   996  0015AC  6F68               	movwf	(LCDWriteInt@string+2)& (0+255),b
   997                           
   998                           ; BSR set to: 0
   999                           ;lcd.c: 236: LCDGoto(column, row);
  1000  0015AE  C063  F02D         	movff	LCDWriteInt@row,LCDGoto@row
  1001  0015B2  0100               	movlb	0	; () banked
  1002  0015B4  5165               	movf	LCDWriteInt@column& (0+255),w,b
  1003  0015B6  EC73  F00B         	call	_LCDGoto
  1004                           
  1005                           ;lcd.c: 237: LCDWriteStr(string);
  1006  0015BA  0E66               	movlw	low LCDWriteInt@string
  1007  0015BC  6E2E               	movwf	LCDWriteStr@string,c
  1008  0015BE  0E00               	movlw	high LCDWriteInt@string
  1009  0015C0  6E2F               	movwf	LCDWriteStr@string+1,c
  1010  0015C2  EC09  F009         	call	_LCDWriteStr	;wreg free
  1011  0015C6  0012               	return		;funcret
  1012  0015C8                     __end_of_LCDWriteInt:
  1013                           	opt stack 0
  1014                           tblptru	equ	0xFF8
  1015                           tblptrh	equ	0xFF7
  1016                           tblptrl	equ	0xFF6
  1017                           tablat	equ	0xFF5
  1018                           intcon	equ	0xFF2
  1019                           intcon2	equ	0xFF1
  1020                           intcon3	equ	0xFF0
  1021                           postinc0	equ	0xFEE
  1022                           postdec1	equ	0xFE5
  1023                           fsr1l	equ	0xFE1
  1024                           status	equ	0xFD8
  1025                           
  1026 ;; *************** function ___awmod *****************
  1027 ;; Defined at:
  1028 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  1029 ;; Parameters:    Size  Location     Type
  1030 ;;  dividend        2   39[COMRAM] int 
  1031 ;;  divisor         2   41[COMRAM] int 
  1032 ;; Auto vars:     Size  Location     Type
  1033 ;;  sign            1   44[COMRAM] unsigned char 
  1034 ;;  counter         1   43[COMRAM] unsigned char 
  1035 ;; Return value:  Size  Location     Type
  1036 ;;                  2   39[COMRAM] int 
  1037 ;; Registers used:
  1038 ;;		wreg, status,2, status,0
  1039 ;; Tracked objects:
  1040 ;;		On entry : 0/0
  1041 ;;		On exit  : 0/0
  1042 ;;		Unchanged: 0/0
  1043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1044 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1045 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1047 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1048 ;;Total ram usage:        6 bytes
  1049 ;; Hardware stack levels used:    1
  1050 ;; Hardware stack levels required when called:    8
  1051 ;; This function calls:
  1052 ;;		Nothing
  1053 ;; This function is called by:
  1054 ;;		_LCDWriteInt
  1055 ;;		_LCDPutByte
  1056 ;; This function uses a non-reentrant model
  1057 ;;
  1058                           
  1059                           	psect	text5
  1060  001422                     __ptext5:
  1061                           	opt stack 0
  1062  001422                     ___awmod:
  1063                           	opt stack 18
  1064                           
  1065                           ;incstack = 0
  1066  001422  0E00               	movlw	0
  1067  001424  6E2D               	movwf	___awmod@sign,c
  1068  001426  AE29               	btfss	___awmod@dividend+1,7,c
  1069  001428  D006               	goto	l1573
  1070  00142A  6C28               	negf	___awmod@dividend,c
  1071  00142C  1E29               	comf	___awmod@dividend+1,f,c
  1072  00142E  B0D8               	btfsc	status,0,c
  1073  001430  2A29               	incf	___awmod@dividend+1,f,c
  1074  001432  0E01               	movlw	1
  1075  001434  6E2D               	movwf	___awmod@sign,c
  1076  001436                     l1573:
  1077  001436  AE2B               	btfss	___awmod@divisor+1,7,c
  1078  001438  D004               	goto	l1577
  1079  00143A  6C2A               	negf	___awmod@divisor,c
  1080  00143C  1E2B               	comf	___awmod@divisor+1,f,c
  1081  00143E  B0D8               	btfsc	status,0,c
  1082  001440  2A2B               	incf	___awmod@divisor+1,f,c
  1083  001442                     l1577:
  1084  001442  502A               	movf	___awmod@divisor,w,c
  1085  001444  102B               	iorwf	___awmod@divisor+1,w,c
  1086  001446  B4D8               	btfsc	status,2,c
  1087  001448  D018               	goto	l1593
  1088  00144A  0E01               	movlw	1
  1089  00144C  6E2C               	movwf	___awmod@counter,c
  1090  00144E  D004               	goto	l1583
  1091  001450                     l1581:
  1092  001450  90D8               	bcf	status,0,c
  1093  001452  362A               	rlcf	___awmod@divisor,f,c
  1094  001454  362B               	rlcf	___awmod@divisor+1,f,c
  1095  001456  2A2C               	incf	___awmod@counter,f,c
  1096  001458                     l1583:
  1097  001458  AE2B               	btfss	___awmod@divisor+1,7,c
  1098  00145A  D7FA               	goto	l1581
  1099  00145C                     l1585:
  1100  00145C  502A               	movf	___awmod@divisor,w,c
  1101  00145E  5C28               	subwf	___awmod@dividend,w,c
  1102  001460  502B               	movf	___awmod@divisor+1,w,c
  1103  001462  5829               	subwfb	___awmod@dividend+1,w,c
  1104  001464  A0D8               	btfss	status,0,c
  1105  001466  D004               	goto	l1589
  1106  001468  502A               	movf	___awmod@divisor,w,c
  1107  00146A  5E28               	subwf	___awmod@dividend,f,c
  1108  00146C  502B               	movf	___awmod@divisor+1,w,c
  1109  00146E  5A29               	subwfb	___awmod@dividend+1,f,c
  1110  001470                     l1589:
  1111  001470  90D8               	bcf	status,0,c
  1112  001472  322B               	rrcf	___awmod@divisor+1,f,c
  1113  001474  322A               	rrcf	___awmod@divisor,f,c
  1114  001476  2E2C               	decfsz	___awmod@counter,f,c
  1115  001478  D7F1               	goto	l1585
  1116  00147A                     l1593:
  1117  00147A  502D               	movf	___awmod@sign,w,c
  1118  00147C  B4D8               	btfsc	status,2,c
  1119  00147E  D004               	goto	l1597
  1120  001480  6C28               	negf	___awmod@dividend,c
  1121  001482  1E29               	comf	___awmod@dividend+1,f,c
  1122  001484  B0D8               	btfsc	status,0,c
  1123  001486  2A29               	incf	___awmod@dividend+1,f,c
  1124  001488                     l1597:
  1125  001488  C028  F028         	movff	___awmod@dividend,?___awmod
  1126  00148C  C029  F029         	movff	___awmod@dividend+1,?___awmod+1
  1127  001490  0012               	return	
  1128  001492                     __end_of___awmod:
  1129                           	opt stack 0
  1130                           tblptru	equ	0xFF8
  1131                           tblptrh	equ	0xFF7
  1132                           tblptrl	equ	0xFF6
  1133                           tablat	equ	0xFF5
  1134                           intcon	equ	0xFF2
  1135                           intcon2	equ	0xFF1
  1136                           intcon3	equ	0xFF0
  1137                           postinc0	equ	0xFEE
  1138                           postdec1	equ	0xFE5
  1139                           fsr1l	equ	0xFE1
  1140                           status	equ	0xFD8
  1141                           
  1142 ;; *************** function ___awdiv *****************
  1143 ;; Defined at:
  1144 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  1145 ;; Parameters:    Size  Location     Type
  1146 ;;  dividend        2   39[COMRAM] int 
  1147 ;;  divisor         2   41[COMRAM] int 
  1148 ;; Auto vars:     Size  Location     Type
  1149 ;;  quotient        2   45[COMRAM] int 
  1150 ;;  sign            1   44[COMRAM] unsigned char 
  1151 ;;  counter         1   43[COMRAM] unsigned char 
  1152 ;; Return value:  Size  Location     Type
  1153 ;;                  2   39[COMRAM] int 
  1154 ;; Registers used:
  1155 ;;		wreg, status,2, status,0
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1161 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1162 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1164 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1165 ;;Total ram usage:        8 bytes
  1166 ;; Hardware stack levels used:    1
  1167 ;; Hardware stack levels required when called:    8
  1168 ;; This function calls:
  1169 ;;		Nothing
  1170 ;; This function is called by:
  1171 ;;		_LCDWriteInt
  1172 ;;		_LCDPutByte
  1173 ;; This function uses a non-reentrant model
  1174 ;;
  1175                           
  1176                           	psect	text6
  1177  00129A                     __ptext6:
  1178                           	opt stack 0
  1179  00129A                     ___awdiv:
  1180                           	opt stack 18
  1181                           
  1182                           ;incstack = 0
  1183  00129A  0E00               	movlw	0
  1184  00129C  6E2D               	movwf	___awdiv@sign,c
  1185  00129E  AE2B               	btfss	___awdiv@divisor+1,7,c
  1186  0012A0  D006               	goto	l1529
  1187  0012A2  6C2A               	negf	___awdiv@divisor,c
  1188  0012A4  1E2B               	comf	___awdiv@divisor+1,f,c
  1189  0012A6  B0D8               	btfsc	status,0,c
  1190  0012A8  2A2B               	incf	___awdiv@divisor+1,f,c
  1191  0012AA  0E01               	movlw	1
  1192  0012AC  6E2D               	movwf	___awdiv@sign,c
  1193  0012AE                     l1529:
  1194  0012AE  AE29               	btfss	___awdiv@dividend+1,7,c
  1195  0012B0  D006               	goto	l1535
  1196  0012B2  6C28               	negf	___awdiv@dividend,c
  1197  0012B4  1E29               	comf	___awdiv@dividend+1,f,c
  1198  0012B6  B0D8               	btfsc	status,0,c
  1199  0012B8  2A29               	incf	___awdiv@dividend+1,f,c
  1200  0012BA  0E01               	movlw	1
  1201  0012BC  1A2D               	xorwf	___awdiv@sign,f,c
  1202  0012BE                     l1535:
  1203  0012BE  0E00               	movlw	0
  1204  0012C0  6E2F               	movwf	___awdiv@quotient+1,c
  1205  0012C2  0E00               	movlw	0
  1206  0012C4  6E2E               	movwf	___awdiv@quotient,c
  1207  0012C6  502A               	movf	___awdiv@divisor,w,c
  1208  0012C8  102B               	iorwf	___awdiv@divisor+1,w,c
  1209  0012CA  B4D8               	btfsc	status,2,c
  1210  0012CC  D01C               	goto	l1557
  1211  0012CE  0E01               	movlw	1
  1212  0012D0  6E2C               	movwf	___awdiv@counter,c
  1213  0012D2  D004               	goto	l1543
  1214  0012D4                     l1541:
  1215  0012D4  90D8               	bcf	status,0,c
  1216  0012D6  362A               	rlcf	___awdiv@divisor,f,c
  1217  0012D8  362B               	rlcf	___awdiv@divisor+1,f,c
  1218  0012DA  2A2C               	incf	___awdiv@counter,f,c
  1219  0012DC                     l1543:
  1220  0012DC  AE2B               	btfss	___awdiv@divisor+1,7,c
  1221  0012DE  D7FA               	goto	l1541
  1222  0012E0                     l1545:
  1223  0012E0  90D8               	bcf	status,0,c
  1224  0012E2  362E               	rlcf	___awdiv@quotient,f,c
  1225  0012E4  362F               	rlcf	___awdiv@quotient+1,f,c
  1226  0012E6  502A               	movf	___awdiv@divisor,w,c
  1227  0012E8  5C28               	subwf	___awdiv@dividend,w,c
  1228  0012EA  502B               	movf	___awdiv@divisor+1,w,c
  1229  0012EC  5829               	subwfb	___awdiv@dividend+1,w,c
  1230  0012EE  A0D8               	btfss	status,0,c
  1231  0012F0  D005               	goto	l1553
  1232  0012F2  502A               	movf	___awdiv@divisor,w,c
  1233  0012F4  5E28               	subwf	___awdiv@dividend,f,c
  1234  0012F6  502B               	movf	___awdiv@divisor+1,w,c
  1235  0012F8  5A29               	subwfb	___awdiv@dividend+1,f,c
  1236  0012FA  802E               	bsf	___awdiv@quotient,0,c
  1237  0012FC                     l1553:
  1238  0012FC  90D8               	bcf	status,0,c
  1239  0012FE  322B               	rrcf	___awdiv@divisor+1,f,c
  1240  001300  322A               	rrcf	___awdiv@divisor,f,c
  1241  001302  2E2C               	decfsz	___awdiv@counter,f,c
  1242  001304  D7ED               	goto	l1545
  1243  001306                     l1557:
  1244  001306  502D               	movf	___awdiv@sign,w,c
  1245  001308  B4D8               	btfsc	status,2,c
  1246  00130A  D004               	goto	l1561
  1247  00130C  6C2E               	negf	___awdiv@quotient,c
  1248  00130E  1E2F               	comf	___awdiv@quotient+1,f,c
  1249  001310  B0D8               	btfsc	status,0,c
  1250  001312  2A2F               	incf	___awdiv@quotient+1,f,c
  1251  001314                     l1561:
  1252  001314  C02E  F028         	movff	___awdiv@quotient,?___awdiv
  1253  001318  C02F  F029         	movff	___awdiv@quotient+1,?___awdiv+1
  1254  00131C  0012               	return	
  1255  00131E                     __end_of___awdiv:
  1256                           	opt stack 0
  1257                           tblptru	equ	0xFF8
  1258                           tblptrh	equ	0xFF7
  1259                           tblptrl	equ	0xFF6
  1260                           tablat	equ	0xFF5
  1261                           intcon	equ	0xFF2
  1262                           intcon2	equ	0xFF1
  1263                           intcon3	equ	0xFF0
  1264                           postinc0	equ	0xFEE
  1265                           postdec1	equ	0xFE5
  1266                           fsr1l	equ	0xFE1
  1267                           status	equ	0xFD8
  1268                           
  1269 ;; *************** function _LCDWriteStr *****************
  1270 ;; Defined at:
  1271 ;;		line 193 in file "lcd.c"
  1272 ;; Parameters:    Size  Location     Type
  1273 ;;  string          2   45[COMRAM] PTR const unsigned char 
  1274 ;;		 -> LCDWriteInt@string(3), LCDWriteFloat@string(5), LCDWriteHexa@string(3), STR_4(5), 
  1275 ;;		 -> STR_3(5), STR_2(11), STR_1(5), 
  1276 ;; Auto vars:     Size  Location     Type
  1277 ;;  i               1   47[COMRAM] unsigned char 
  1278 ;; Return value:  Size  Location     Type
  1279 ;;                  1    wreg      void 
  1280 ;; Registers used:
  1281 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1282 ;; Tracked objects:
  1283 ;;		On entry : 0/0
  1284 ;;		On exit  : 0/0
  1285 ;;		Unchanged: 0/0
  1286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1287 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1288 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1289 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1290 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1291 ;;Total ram usage:        5 bytes
  1292 ;; Hardware stack levels used:    1
  1293 ;; Hardware stack levels required when called:   11
  1294 ;; This function calls:
  1295 ;;		_LCDPutChar
  1296 ;; This function is called by:
  1297 ;;		_show_debug
  1298 ;;		_init_debug
  1299 ;;		_LCDWriteInt
  1300 ;;		_LCDWriteHexa
  1301 ;;		_LCDWriteFloat
  1302 ;; This function uses a non-reentrant model
  1303 ;;
  1304                           
  1305                           	psect	text7
  1306  001212                     __ptext7:
  1307                           	opt stack 0
  1308  001212                     _LCDWriteStr:
  1309                           	opt stack 16
  1310                           
  1311                           ;lcd.c: 195: UINT8_T i = 0;
  1312                           
  1313                           ;incstack = 0
  1314  001212  0E00               	movlw	0
  1315  001214  6E30               	movwf	LCDWriteStr@i,c
  1316                           
  1317                           ;lcd.c: 197: while (string[i])
  1318  001216  D020               	goto	l2077
  1319  001218                     l2073:
  1320                           
  1321                           ;lcd.c: 198: LCDPutChar(string[i++]);
  1322  001218  5030               	movf	LCDWriteStr@i,w,c
  1323  00121A  0D01               	mullw	1
  1324  00121C  C02E  F060         	movff	LCDWriteStr@string,??_LCDWriteStr
  1325  001220  C02F  F061         	movff	LCDWriteStr@string+1,??_LCDWriteStr+1
  1326  001224  50F3               	movf	prodl,w,c
  1327  001226  0100               	movlb	0	; () banked
  1328  001228  2760               	addwf	??_LCDWriteStr& (0+255),f,b
  1329  00122A  50F4               	movf	prodh,w,c
  1330  00122C  0100               	movlb	0	; () banked
  1331  00122E  2361               	addwfc	(??_LCDWriteStr+1)& (0+255),f,b
  1332  001230  C060  FFF6         	movff	??_LCDWriteStr,tblptrl
  1333  001234  C061  FFF7         	movff	??_LCDWriteStr+1,tblptrh
  1334  001238  0E00               	movlw	low (__smallconst shr (0+16))
  1335  00123A  6EF8               	movwf	tblptru,c
  1336  00123C  0E0F               	movlw	(high __ramtop+-1)
  1337  00123E  64F7               	cpfsgt	tblptrh,c
  1338  001240  D003               	bra	u1277
  1339  001242  0008               	tblrd		*
  1340  001244  50F5               	movf	tablat,w,c
  1341  001246  D005               	bra	u1270
  1342  001248                     u1277:
  1343  001248  CFF6 FFE9          	movff	tblptrl,fsr0l
  1344  00124C  CFF7 FFEA          	movff	tblptrh,fsr0h
  1345  001250  50EF               	movf	indf0,w,c
  1346  001252                     u1270:
  1347  001252  EC72  F00C         	call	_LCDPutChar
  1348  001256  2A30               	incf	LCDWriteStr@i,f,c
  1349  001258                     l2077:
  1350  001258  5030               	movf	LCDWriteStr@i,w,c
  1351  00125A  0D01               	mullw	1
  1352  00125C  C02E  F060         	movff	LCDWriteStr@string,??_LCDWriteStr
  1353  001260  C02F  F061         	movff	LCDWriteStr@string+1,??_LCDWriteStr+1
  1354  001264  50F3               	movf	prodl,w,c
  1355  001266  0100               	movlb	0	; () banked
  1356  001268  2760               	addwf	??_LCDWriteStr& (0+255),f,b
  1357  00126A  50F4               	movf	prodh,w,c
  1358  00126C  0100               	movlb	0	; () banked
  1359  00126E  2361               	addwfc	(??_LCDWriteStr+1)& (0+255),f,b
  1360  001270  C060  FFF6         	movff	??_LCDWriteStr,tblptrl
  1361  001274  C061  FFF7         	movff	??_LCDWriteStr+1,tblptrh
  1362  001278  0E00               	movlw	low (__smallconst shr (0+16))
  1363  00127A  6EF8               	movwf	tblptru,c
  1364  00127C  0E0F               	movlw	(high __ramtop+-1)
  1365  00127E  64F7               	cpfsgt	tblptrh,c
  1366  001280  D003               	bra	u1287
  1367  001282  0008               	tblrd		*
  1368  001284  50F5               	movf	tablat,w,c
  1369  001286  D005               	bra	u1280
  1370  001288                     u1287:
  1371  001288  CFF6 FFE9          	movff	tblptrl,fsr0l
  1372  00128C  CFF7 FFEA          	movff	tblptrh,fsr0h
  1373  001290  50EF               	movf	indf0,w,c
  1374  001292                     u1280:
  1375  001292  0900               	iorlw	0
  1376  001294  B4D8               	btfsc	status,2,c
  1377  001296  0012               	return	
  1378  001298  D7BF               	goto	l2073
  1379  00129A                     __end_of_LCDWriteStr:
  1380                           	opt stack 0
  1381                           tblptru	equ	0xFF8
  1382                           tblptrh	equ	0xFF7
  1383                           tblptrl	equ	0xFF6
  1384                           tablat	equ	0xFF5
  1385                           prodh	equ	0xFF4
  1386                           prodl	equ	0xFF3
  1387                           intcon	equ	0xFF2
  1388                           intcon2	equ	0xFF1
  1389                           intcon3	equ	0xFF0
  1390                           indf0	equ	0xFEF
  1391                           postinc0	equ	0xFEE
  1392                           fsr0h	equ	0xFEA
  1393                           fsr0l	equ	0xFE9
  1394                           postdec1	equ	0xFE5
  1395                           fsr1l	equ	0xFE1
  1396                           status	equ	0xFD8
  1397                           
  1398 ;; *************** function _LCDPutChar *****************
  1399 ;; Defined at:
  1400 ;;		line 180 in file "lcd.c"
  1401 ;; Parameters:    Size  Location     Type
  1402 ;;  data            1    wreg     unsigned char 
  1403 ;; Auto vars:     Size  Location     Type
  1404 ;;  data            1   44[COMRAM] unsigned char 
  1405 ;; Return value:  Size  Location     Type
  1406 ;;                  1    wreg      void 
  1407 ;; Registers used:
  1408 ;;		wreg, status,2, status,0, cstack
  1409 ;; Tracked objects:
  1410 ;;		On entry : 0/0
  1411 ;;		On exit  : 0/0
  1412 ;;		Unchanged: 0/0
  1413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1415 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1417 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1418 ;;Total ram usage:        1 bytes
  1419 ;; Hardware stack levels used:    1
  1420 ;; Hardware stack levels required when called:   10
  1421 ;; This function calls:
  1422 ;;		_WaitLCD
  1423 ;;		_WriteByte
  1424 ;; This function is called by:
  1425 ;;		_LCDWriteStr
  1426 ;;		_LCDPutByte
  1427 ;; This function uses a non-reentrant model
  1428 ;;
  1429                           
  1430                           	psect	text8
  1431  0018E4                     __ptext8:
  1432                           	opt stack 0
  1433  0018E4                     _LCDPutChar:
  1434                           	opt stack 16
  1435                           
  1436                           ;incstack = 0
  1437                           ;LCDPutChar@data stored from wreg
  1438  0018E4  6E2D               	movwf	LCDPutChar@data,c
  1439                           
  1440                           ;lcd.c: 182: WriteByte(0, data);
  1441  0018E6  C02D  F02B         	movff	LCDPutChar@data,WriteByte@data
  1442  0018EA  0E00               	movlw	0
  1443  0018EC  EC58  F00C         	call	_WriteByte
  1444                           
  1445                           ;lcd.c: 183: WaitLCD();
  1446  0018F0  EC7B  F00C         	call	_WaitLCD	;wreg free
  1447  0018F4  0012               	return		;funcret
  1448  0018F6                     __end_of_LCDPutChar:
  1449                           	opt stack 0
  1450                           tblptru	equ	0xFF8
  1451                           tblptrh	equ	0xFF7
  1452                           tblptrl	equ	0xFF6
  1453                           tablat	equ	0xFF5
  1454                           prodh	equ	0xFF4
  1455                           prodl	equ	0xFF3
  1456                           intcon	equ	0xFF2
  1457                           intcon2	equ	0xFF1
  1458                           intcon3	equ	0xFF0
  1459                           indf0	equ	0xFEF
  1460                           postinc0	equ	0xFEE
  1461                           fsr0h	equ	0xFEA
  1462                           fsr0l	equ	0xFE9
  1463                           postdec1	equ	0xFE5
  1464                           fsr1l	equ	0xFE1
  1465                           status	equ	0xFD8
  1466                           
  1467 ;; *************** function _LCDGoto *****************
  1468 ;; Defined at:
  1469 ;;		line 171 in file "lcd.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;  column          1    wreg     unsigned char 
  1472 ;;  row             1   44[COMRAM] unsigned char 
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;  column          1    2[BANK0 ] unsigned char 
  1475 ;; Return value:  Size  Location     Type
  1476 ;;                  1    wreg      void 
  1477 ;; Registers used:
  1478 ;;		wreg, status,2, status,0, cstack
  1479 ;; Tracked objects:
  1480 ;;		On entry : 0/0
  1481 ;;		On exit  : 0/0
  1482 ;;		Unchanged: 0/0
  1483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1484 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1485 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1486 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1487 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1488 ;;Total ram usage:        6 bytes
  1489 ;; Hardware stack levels used:    1
  1490 ;; Hardware stack levels required when called:   10
  1491 ;; This function calls:
  1492 ;;		_WaitLCD
  1493 ;;		_WriteByte
  1494 ;; This function is called by:
  1495 ;;		_show_debug
  1496 ;;		_init_debug
  1497 ;;		_LCDWriteInt
  1498 ;;		_LCDWriteHexa
  1499 ;;		_LCDWriteFloat
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           	psect	text9
  1504  0016E6                     __ptext9:
  1505                           	opt stack 0
  1506  0016E6                     _LCDGoto:
  1507                           	opt stack 16
  1508                           
  1509                           ;incstack = 0
  1510                           ;LCDGoto@column stored from wreg
  1511  0016E6  0100               	movlb	0	; () banked
  1512  0016E8  6F62               	movwf	LCDGoto@column& (0+255),b
  1513                           
  1514                           ;lcd.c: 173: if ((row > (2 - 1)) || (column > (16 - 1)))
  1515  0016EA  0E02               	movlw	2
  1516  0016EC  602D               	cpfslt	LCDGoto@row,c
  1517  0016EE  0012               	return	
  1518  0016F0  0E0F               	movlw	15
  1519  0016F2  0100               	movlb	0	; () banked
  1520  0016F4  6562               	cpfsgt	LCDGoto@column& (0+255),b
  1521  0016F6  D001               	goto	l2061
  1522  0016F8  0012               	return	
  1523  0016FA                     l2061:
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;lcd.c: 176: WriteByte(1, (row == 1) ? (0xC0 | column) : (0x80 | column));
  1527  0016FA  042D               	decf	LCDGoto@row,w,c
  1528  0016FC  B4D8               	btfsc	status,2,c
  1529  0016FE  D002               	goto	l2065
  1530                           
  1531                           ; BSR set to: 0
  1532  001700  0E80               	movlw	128
  1533  001702  D001               	goto	L1
  1534  001704                     l2065:
  1535                           
  1536                           ; BSR set to: 0
  1537  001704  0EC0               	movlw	192
  1538  001706                     L1:
  1539  001706  C062  F02E         	movff	LCDGoto@column,??_LCDGoto
  1540  00170A  6A2F               	clrf	(??_LCDGoto+1)& (0+255),c
  1541  00170C  102E               	iorwf	??_LCDGoto,w,c
  1542  00170E  0100               	movlb	0	; () banked
  1543  001710  6F60               	movwf	_LCDGoto$794& (0+255),b
  1544  001712  502F               	movf	??_LCDGoto+1,w,c
  1545  001714  0100               	movlb	0	; () banked
  1546  001716  6F61               	movwf	(_LCDGoto$794+1)& (0+255),b
  1547                           
  1548                           ; BSR set to: 0
  1549                           
  1550                           ; BSR set to: 0
  1551  001718  C060  F02B         	movff	_LCDGoto$794,WriteByte@data
  1552  00171C  0E01               	movlw	1
  1553  00171E  EC58  F00C         	call	_WriteByte
  1554                           
  1555                           ;lcd.c: 177: WaitLCD();
  1556  001722  EC7B  F00C         	call	_WaitLCD	;wreg free
  1557  001726  0012               	return		;funcret
  1558  001728                     __end_of_LCDGoto:
  1559                           	opt stack 0
  1560                           tblptru	equ	0xFF8
  1561                           tblptrh	equ	0xFF7
  1562                           tblptrl	equ	0xFF6
  1563                           tablat	equ	0xFF5
  1564                           prodh	equ	0xFF4
  1565                           prodl	equ	0xFF3
  1566                           intcon	equ	0xFF2
  1567                           intcon2	equ	0xFF1
  1568                           intcon3	equ	0xFF0
  1569                           indf0	equ	0xFEF
  1570                           postinc0	equ	0xFEE
  1571                           fsr0h	equ	0xFEA
  1572                           fsr0l	equ	0xFE9
  1573                           postdec1	equ	0xFE5
  1574                           fsr1l	equ	0xFE1
  1575                           status	equ	0xFD8
  1576                           
  1577 ;; *************** function _LCDInit *****************
  1578 ;; Defined at:
  1579 ;;		line 89 in file "lcd.c"
  1580 ;; Parameters:    Size  Location     Type
  1581 ;;		None
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;		None
  1584 ;; Return value:  Size  Location     Type
  1585 ;;                  1    wreg      void 
  1586 ;; Registers used:
  1587 ;;		wreg, status,2, status,0, cstack
  1588 ;; Tracked objects:
  1589 ;;		On entry : 0/0
  1590 ;;		On exit  : 0/0
  1591 ;;		Unchanged: 0/0
  1592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1595 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1596 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1597 ;;Total ram usage:        1 bytes
  1598 ;; Hardware stack levels used:    1
  1599 ;; Hardware stack levels required when called:   10
  1600 ;; This function calls:
  1601 ;;		_WaitLCD
  1602 ;;		_WriteNibble
  1603 ;; This function is called by:
  1604 ;;		_init_debug
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607                           
  1608                           	psect	text10
  1609  00112A                     __ptext10:
  1610                           	opt stack 0
  1611  00112A                     _LCDInit:
  1612                           	opt stack 18
  1613                           
  1614                           ;lcd.c: 91: TRISDbits.TRISD7 = 0;
  1615                           
  1616                           ;incstack = 0
  1617  00112A  9E95               	bcf	3989,7,c	;volatile
  1618                           
  1619                           ;lcd.c: 92: TRISDbits.TRISD6 = 0;
  1620  00112C  9C95               	bcf	3989,6,c	;volatile
  1621                           
  1622                           ;lcd.c: 93: TRISDbits.TRISD5 = 0;
  1623  00112E  9A95               	bcf	3989,5,c	;volatile
  1624                           
  1625                           ;lcd.c: 94: TRISDbits.TRISD4 = 0;
  1626  001130  9895               	bcf	3989,4,c	;volatile
  1627                           
  1628                           ;lcd.c: 95: TRISDbits.TRISD0 = 0;
  1629  001132  9095               	bcf	3989,0,c	;volatile
  1630                           
  1631                           ;lcd.c: 96: TRISDbits.TRISD1 = 0;
  1632  001134  9295               	bcf	3989,1,c	;volatile
  1633                           
  1634                           ;lcd.c: 97: TRISDbits.TRISD2 = 0;
  1635  001136  9495               	bcf	3989,2,c	;volatile
  1636                           
  1637                           ;lcd.c: 98: TRISDbits.TRISD3 = 0;
  1638  001138  9695               	bcf	3989,3,c	;volatile
  1639                           
  1640                           ;lcd.c: 136: LATDbits.LATD7 = 1;
  1641  00113A  8E8C               	bsf	3980,7,c	;volatile
  1642                           
  1643                           ;lcd.c: 137: _delay(30000);
  1644  00113C  0E27               	movlw	39
  1645  00113E  6E2B               	movwf	??_LCDInit& (0+255),c
  1646  001140  0EF5               	movlw	245
  1647  001142                     u1327:
  1648  001142  2EE8               	decfsz	wreg,f,c
  1649  001144  D7FE               	bra	u1327
  1650  001146  2E2B               	decfsz	??_LCDInit& (0+255),f,c
  1651  001148  D7FC               	bra	u1327
  1652  00114A  F000               	nop	
  1653                           
  1654                           ;lcd.c: 138: WriteNibble(1, 0x03);
  1655  00114C  0E03               	movlw	3
  1656  00114E  6E28               	movwf	WriteNibble@data,c
  1657  001150  0E01               	movlw	1
  1658  001152  EC2F  F00B         	call	_WriteNibble
  1659                           
  1660                           ;lcd.c: 139: _delay(3000);
  1661  001156  0E04               	movlw	4
  1662  001158  6E2B               	movwf	??_LCDInit& (0+255),c
  1663  00115A  0EE4               	movlw	228
  1664  00115C                     u1337:
  1665  00115C  2EE8               	decfsz	wreg,f,c
  1666  00115E  D7FE               	bra	u1337
  1667  001160  2E2B               	decfsz	??_LCDInit& (0+255),f,c
  1668  001162  D7FC               	bra	u1337
  1669  001164  D000               	nop2	
  1670                           
  1671                           ;lcd.c: 140: WriteNibble(1, 0x03);
  1672  001166  0E03               	movlw	3
  1673  001168  6E28               	movwf	WriteNibble@data,c
  1674  00116A  0E01               	movlw	1
  1675  00116C  EC2F  F00B         	call	_WriteNibble
  1676                           
  1677                           ;lcd.c: 141: _delay(100);
  1678  001170  0E21               	movlw	33
  1679  001172                     u1347:
  1680  001172  2EE8               	decfsz	wreg,f,c
  1681  001174  D7FE               	bra	u1347
  1682  001176  F000               	nop	
  1683                           
  1684                           ;lcd.c: 142: WriteNibble(1, 0x03);
  1685  001178  0E03               	movlw	3
  1686  00117A  6E28               	movwf	WriteNibble@data,c
  1687  00117C  0E01               	movlw	1
  1688  00117E  EC2F  F00B         	call	_WriteNibble
  1689                           
  1690                           ;lcd.c: 143: _delay(100);
  1691  001182  0E21               	movlw	33
  1692  001184                     u1357:
  1693  001184  2EE8               	decfsz	wreg,f,c
  1694  001186  D7FE               	bra	u1357
  1695  001188  F000               	nop	
  1696                           
  1697                           ;lcd.c: 144: WriteNibble(1, 0b00000010);
  1698  00118A  0E02               	movlw	2
  1699  00118C  6E28               	movwf	WriteNibble@data,c
  1700  00118E  0E01               	movlw	1
  1701  001190  EC2F  F00B         	call	_WriteNibble
  1702                           
  1703                           ;lcd.c: 145: WaitLCD();
  1704  001194  EC7B  F00C         	call	_WaitLCD	;wreg free
  1705                           
  1706                           ;lcd.c: 146: WriteNibble(1, 0b00000010);
  1707  001198  0E02               	movlw	2
  1708  00119A  6E28               	movwf	WriteNibble@data,c
  1709  00119C  0E01               	movlw	1
  1710  00119E  EC2F  F00B         	call	_WriteNibble
  1711                           
  1712                           ;lcd.c: 147: WriteNibble(1, 0b00001000);
  1713  0011A2  0E08               	movlw	8
  1714  0011A4  6E28               	movwf	WriteNibble@data,c
  1715  0011A6  0E01               	movlw	1
  1716  0011A8  EC2F  F00B         	call	_WriteNibble
  1717                           
  1718                           ;lcd.c: 148: WaitLCD();
  1719  0011AC  EC7B  F00C         	call	_WaitLCD	;wreg free
  1720                           
  1721                           ;lcd.c: 149: WriteNibble(1, 0b00000000);
  1722  0011B0  0E00               	movlw	0
  1723  0011B2  6E28               	movwf	WriteNibble@data,c
  1724  0011B4  0E01               	movlw	1
  1725  0011B6  EC2F  F00B         	call	_WriteNibble
  1726                           
  1727                           ;lcd.c: 150: WriteNibble(1, 0b00001000);
  1728  0011BA  0E08               	movlw	8
  1729  0011BC  6E28               	movwf	WriteNibble@data,c
  1730  0011BE  0E01               	movlw	1
  1731  0011C0  EC2F  F00B         	call	_WriteNibble
  1732                           
  1733                           ;lcd.c: 151: WaitLCD();
  1734  0011C4  EC7B  F00C         	call	_WaitLCD	;wreg free
  1735                           
  1736                           ;lcd.c: 152: WriteNibble(1, 0b00000000);
  1737  0011C8  0E00               	movlw	0
  1738  0011CA  6E28               	movwf	WriteNibble@data,c
  1739  0011CC  0E01               	movlw	1
  1740  0011CE  EC2F  F00B         	call	_WriteNibble
  1741                           
  1742                           ;lcd.c: 153: WriteNibble(1, 0b00001100);
  1743  0011D2  0E0C               	movlw	12
  1744  0011D4  6E28               	movwf	WriteNibble@data,c
  1745  0011D6  0E01               	movlw	1
  1746  0011D8  EC2F  F00B         	call	_WriteNibble
  1747                           
  1748                           ;lcd.c: 155: WaitLCD();
  1749  0011DC  EC7B  F00C         	call	_WaitLCD	;wreg free
  1750                           
  1751                           ;lcd.c: 156: WriteNibble(1, 0b00000000);
  1752  0011E0  0E00               	movlw	0
  1753  0011E2  6E28               	movwf	WriteNibble@data,c
  1754  0011E4  0E01               	movlw	1
  1755  0011E6  EC2F  F00B         	call	_WriteNibble
  1756                           
  1757                           ;lcd.c: 157: WriteNibble(1, 0b00000001);
  1758  0011EA  0E01               	movlw	1
  1759  0011EC  6E28               	movwf	WriteNibble@data,c
  1760  0011EE  0E01               	movlw	1
  1761  0011F0  EC2F  F00B         	call	_WriteNibble
  1762                           
  1763                           ;lcd.c: 158: WaitLCD();
  1764  0011F4  EC7B  F00C         	call	_WaitLCD	;wreg free
  1765                           
  1766                           ;lcd.c: 159: WriteNibble(1, 0b00000000);
  1767  0011F8  0E00               	movlw	0
  1768  0011FA  6E28               	movwf	WriteNibble@data,c
  1769  0011FC  0E01               	movlw	1
  1770  0011FE  EC2F  F00B         	call	_WriteNibble
  1771                           
  1772                           ;lcd.c: 160: WriteNibble(1, 0b00000110);
  1773  001202  0E06               	movlw	6
  1774  001204  6E28               	movwf	WriteNibble@data,c
  1775  001206  0E01               	movlw	1
  1776  001208  EC2F  F00B         	call	_WriteNibble
  1777                           
  1778                           ;lcd.c: 161: WaitLCD();
  1779  00120C  EC7B  F00C         	call	_WaitLCD	;wreg free
  1780  001210  0012               	return		;funcret
  1781  001212                     __end_of_LCDInit:
  1782                           	opt stack 0
  1783                           tblptru	equ	0xFF8
  1784                           tblptrh	equ	0xFF7
  1785                           tblptrl	equ	0xFF6
  1786                           tablat	equ	0xFF5
  1787                           prodh	equ	0xFF4
  1788                           prodl	equ	0xFF3
  1789                           intcon	equ	0xFF2
  1790                           intcon2	equ	0xFF1
  1791                           intcon3	equ	0xFF0
  1792                           indf0	equ	0xFEF
  1793                           postinc0	equ	0xFEE
  1794                           fsr0h	equ	0xFEA
  1795                           fsr0l	equ	0xFE9
  1796                           wreg	equ	0xFE8
  1797                           postdec1	equ	0xFE5
  1798                           fsr1l	equ	0xFE1
  1799                           status	equ	0xFD8
  1800                           
  1801 ;; *************** function _LCDClear *****************
  1802 ;; Defined at:
  1803 ;;		line 164 in file "lcd.c"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;		None
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;		None
  1808 ;; Return value:  Size  Location     Type
  1809 ;;                  1    wreg      void 
  1810 ;; Registers used:
  1811 ;;		wreg, status,2, status,0, cstack
  1812 ;; Tracked objects:
  1813 ;;		On entry : 0/0
  1814 ;;		On exit  : 0/0
  1815 ;;		Unchanged: 0/0
  1816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1819 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1820 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1821 ;;Total ram usage:        1 bytes
  1822 ;; Hardware stack levels used:    1
  1823 ;; Hardware stack levels required when called:   10
  1824 ;; This function calls:
  1825 ;;		_WaitLCD
  1826 ;;		_WriteByte
  1827 ;; This function is called by:
  1828 ;;		_init_debug
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           
  1832                           	psect	text11
  1833  001874                     __ptext11:
  1834                           	opt stack 0
  1835  001874                     _LCDClear:
  1836                           	opt stack 18
  1837                           
  1838                           ;lcd.c: 166: WriteByte(1, 0x01);
  1839                           
  1840                           ;incstack = 0
  1841  001874  0E01               	movlw	1
  1842  001876  6E2B               	movwf	WriteByte@data,c
  1843  001878  0E01               	movlw	1
  1844  00187A  EC58  F00C         	call	_WriteByte
  1845                           
  1846                           ;lcd.c: 167: _delay(12500);
  1847  00187E  0E11               	movlw	17
  1848  001880  6E2D               	movwf	??_LCDClear& (0+255),c
  1849  001882  0E3A               	movlw	58
  1850  001884                     u1367:
  1851  001884  2EE8               	decfsz	wreg,f,c
  1852  001886  D7FE               	bra	u1367
  1853  001888  2E2D               	decfsz	??_LCDClear& (0+255),f,c
  1854  00188A  D7FC               	bra	u1367
  1855  00188C  D000               	nop2	
  1856                           
  1857                           ;lcd.c: 168: WaitLCD();
  1858  00188E  EC7B  F00C         	call	_WaitLCD	;wreg free
  1859  001892  0012               	return		;funcret
  1860  001894                     __end_of_LCDClear:
  1861                           	opt stack 0
  1862                           tblptru	equ	0xFF8
  1863                           tblptrh	equ	0xFF7
  1864                           tblptrl	equ	0xFF6
  1865                           tablat	equ	0xFF5
  1866                           prodh	equ	0xFF4
  1867                           prodl	equ	0xFF3
  1868                           intcon	equ	0xFF2
  1869                           intcon2	equ	0xFF1
  1870                           intcon3	equ	0xFF0
  1871                           indf0	equ	0xFEF
  1872                           postinc0	equ	0xFEE
  1873                           fsr0h	equ	0xFEA
  1874                           fsr0l	equ	0xFE9
  1875                           wreg	equ	0xFE8
  1876                           postdec1	equ	0xFE5
  1877                           fsr1l	equ	0xFE1
  1878                           status	equ	0xFD8
  1879                           
  1880 ;; *************** function _WriteByte *****************
  1881 ;; Defined at:
  1882 ;;		line 83 in file "lcd.c"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;  cmd             1    wreg     unsigned char 
  1885 ;;  data            1   42[COMRAM] unsigned char 
  1886 ;; Auto vars:     Size  Location     Type
  1887 ;;  cmd             1   43[COMRAM] unsigned char 
  1888 ;; Return value:  Size  Location     Type
  1889 ;;                  1    wreg      void 
  1890 ;; Registers used:
  1891 ;;		wreg, status,2, status,0, cstack
  1892 ;; Tracked objects:
  1893 ;;		On entry : 0/0
  1894 ;;		On exit  : 0/0
  1895 ;;		Unchanged: 0/0
  1896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1897 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1898 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1900 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1901 ;;Total ram usage:        2 bytes
  1902 ;; Hardware stack levels used:    1
  1903 ;; Hardware stack levels required when called:    9
  1904 ;; This function calls:
  1905 ;;		_WriteNibble
  1906 ;; This function is called by:
  1907 ;;		_LCDClear
  1908 ;;		_LCDGoto
  1909 ;;		_LCDPutChar
  1910 ;;		_LCDShiftDisplay
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           	psect	text12
  1915  0018B0                     __ptext12:
  1916                           	opt stack 0
  1917  0018B0                     _WriteByte:
  1918                           	opt stack 16
  1919                           
  1920                           ;incstack = 0
  1921                           ;WriteByte@cmd stored from wreg
  1922  0018B0  6E2C               	movwf	WriteByte@cmd,c
  1923                           
  1924                           ;lcd.c: 85: WriteNibble(cmd, data >> 4);
  1925  0018B2  382B               	swapf	WriteByte@data,w,c
  1926  0018B4  0B0F               	andlw	15
  1927  0018B6  6E28               	movwf	WriteNibble@data,c
  1928  0018B8  502C               	movf	WriteByte@cmd,w,c
  1929  0018BA  EC2F  F00B         	call	_WriteNibble
  1930                           
  1931                           ;lcd.c: 86: WriteNibble(cmd, data);
  1932  0018BE  C02B  F028         	movff	WriteByte@data,WriteNibble@data
  1933  0018C2  502C               	movf	WriteByte@cmd,w,c
  1934  0018C4  EC2F  F00B         	call	_WriteNibble
  1935  0018C8  0012               	return		;funcret
  1936  0018CA                     __end_of_WriteByte:
  1937                           	opt stack 0
  1938                           tblptru	equ	0xFF8
  1939                           tblptrh	equ	0xFF7
  1940                           tblptrl	equ	0xFF6
  1941                           tablat	equ	0xFF5
  1942                           prodh	equ	0xFF4
  1943                           prodl	equ	0xFF3
  1944                           intcon	equ	0xFF2
  1945                           intcon2	equ	0xFF1
  1946                           intcon3	equ	0xFF0
  1947                           indf0	equ	0xFEF
  1948                           postinc0	equ	0xFEE
  1949                           fsr0h	equ	0xFEA
  1950                           fsr0l	equ	0xFE9
  1951                           wreg	equ	0xFE8
  1952                           postdec1	equ	0xFE5
  1953                           fsr1l	equ	0xFE1
  1954                           status	equ	0xFD8
  1955                           
  1956 ;; *************** function _WriteNibble *****************
  1957 ;; Defined at:
  1958 ;;		line 66 in file "lcd.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;  cmd             1    wreg     unsigned char 
  1961 ;;  data            1   39[COMRAM] unsigned char 
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;  cmd             1   41[COMRAM] unsigned char 
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  1    wreg      void 
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1973 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1974 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1975 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1976 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1977 ;;Total ram usage:        3 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    8
  1980 ;; This function calls:
  1981 ;;		Nothing
  1982 ;; This function is called by:
  1983 ;;		_WriteByte
  1984 ;;		_LCDInit
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           	psect	text13
  1989  00165E                     __ptext13:
  1990                           	opt stack 0
  1991  00165E                     _WriteNibble:
  1992                           	opt stack 16
  1993                           
  1994                           ;incstack = 0
  1995                           ;WriteNibble@cmd stored from wreg
  1996  00165E  6E2A               	movwf	WriteNibble@cmd,c
  1997                           
  1998                           ;lcd.c: 68: LATDbits.LATD4 = (cmd ? 0 : 1);
  1999  001660  502A               	movf	WriteNibble@cmd,w,c
  2000  001662  A4D8               	btfss	status,2,c
  2001  001664  D003               	goto	u1210
  2002  001666  6A29               	clrf	??_WriteNibble& (0+255),c
  2003  001668  2A29               	incf	??_WriteNibble& (0+255),f,c
  2004  00166A  D001               	goto	u1228
  2005  00166C                     u1210:
  2006  00166C  6A29               	clrf	??_WriteNibble& (0+255),c
  2007  00166E                     u1228:
  2008  00166E  3A29               	swapf	??_WriteNibble,f,c
  2009  001670  508C               	movf	3980,w,c	;volatile
  2010  001672  1829               	xorwf	??_WriteNibble,w,c
  2011  001674  0BEF               	andlw	-17
  2012  001676  1829               	xorwf	??_WriteNibble,w,c
  2013  001678  6E8C               	movwf	3980,c	;volatile
  2014                           
  2015                           ;lcd.c: 69: LATDbits.LATD5 = 0;
  2016  00167A  9A8C               	bcf	3980,5,c	;volatile
  2017                           
  2018                           ;lcd.c: 70: LATDbits.LATD6 = 1;
  2019  00167C  8C8C               	bsf	3980,6,c	;volatile
  2020                           
  2021                           ;lcd.c: 72: LATDbits.LATD0 = LATDbits.LATD1 = LATDbits.LATD2 = LATDbits.LATD3 = 0;
  2022  00167E  968C               	bcf	3980,3,c	;volatile
  2023  001680  948C               	bcf	3980,2,c	;volatile
  2024  001682  928C               	bcf	3980,1,c	;volatile
  2025  001684  908C               	bcf	3980,0,c	;volatile
  2026                           
  2027                           ;lcd.c: 73: __nop();
  2028  001686  F000               	nop	
  2029                           
  2030                           ;lcd.c: 74: __nop();
  2031  001688  F000               	nop	
  2032                           
  2033                           ;lcd.c: 76: LATD = (LATD & 0xF0) | (data & 0x0F);
  2034  00168A  C028  F029         	movff	WriteNibble@data,??_WriteNibble
  2035  00168E  0E0F               	movlw	15
  2036  001690  1629               	andwf	??_WriteNibble,f,c
  2037  001692  508C               	movf	3980,w,c	;volatile
  2038  001694  0BF0               	andlw	240
  2039  001696  1029               	iorwf	??_WriteNibble,w,c
  2040  001698  6E8C               	movwf	3980,c	;volatile
  2041                           
  2042                           ;lcd.c: 77: __nop();
  2043  00169A  F000               	nop	
  2044                           
  2045                           ;lcd.c: 78: __nop();
  2046  00169C  F000               	nop	
  2047                           
  2048                           ;lcd.c: 80: LATDbits.LATD6 = 0;
  2049  00169E  9C8C               	bcf	3980,6,c	;volatile
  2050  0016A0  0012               	return		;funcret
  2051  0016A2                     __end_of_WriteNibble:
  2052                           	opt stack 0
  2053                           tblptru	equ	0xFF8
  2054                           tblptrh	equ	0xFF7
  2055                           tblptrl	equ	0xFF6
  2056                           tablat	equ	0xFF5
  2057                           prodh	equ	0xFF4
  2058                           prodl	equ	0xFF3
  2059                           intcon	equ	0xFF2
  2060                           intcon2	equ	0xFF1
  2061                           intcon3	equ	0xFF0
  2062                           indf0	equ	0xFEF
  2063                           postinc0	equ	0xFEE
  2064                           fsr0h	equ	0xFEA
  2065                           fsr0l	equ	0xFE9
  2066                           wreg	equ	0xFE8
  2067                           postdec1	equ	0xFE5
  2068                           fsr1l	equ	0xFE1
  2069                           status	equ	0xFD8
  2070                           
  2071 ;; *************** function _WaitLCD *****************
  2072 ;; Defined at:
  2073 ;;		line 52 in file "lcd.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;		None
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;  status          1   40[COMRAM] unsigned char 
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  1    wreg      void 
  2080 ;; Registers used:
  2081 ;;		wreg, status,2, status,0, cstack
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2088 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;Total ram usage:        1 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    9
  2094 ;; This function calls:
  2095 ;;		_ReadByte
  2096 ;; This function is called by:
  2097 ;;		_LCDInit
  2098 ;;		_LCDClear
  2099 ;;		_LCDGoto
  2100 ;;		_LCDPutChar
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           	psect	text14
  2105  0018F6                     __ptext14:
  2106                           	opt stack 0
  2107  0018F6                     _WaitLCD:
  2108                           	opt stack 16
  2109                           
  2110                           ;lcd.c: 54: UINT8_T status;
  2111                           ;lcd.c: 56: LATDbits.LATD4 = 0;
  2112                           
  2113                           ;incstack = 0
  2114  0018F6  988C               	bcf	3980,4,c	;volatile
  2115                           
  2116                           ;lcd.c: 57: LATDbits.LATD5 = 1;
  2117  0018F8  8A8C               	bsf	3980,5,c	;volatile
  2118  0018FA                     l2049:
  2119                           
  2120                           ;lcd.c: 60: status = ReadByte();
  2121  0018FA  ECCB  F00B         	call	_ReadByte	;wreg free
  2122  0018FE  6E29               	movwf	WaitLCD@status,c
  2123                           
  2124                           ;lcd.c: 61: } while (status & 0x80);
  2125  001900  BE29               	btfsc	WaitLCD@status,7,c
  2126  001902  D7FB               	goto	l2049
  2127                           
  2128                           ;lcd.c: 63: LATDbits.LATD5 = 0;
  2129  001904  9A8C               	bcf	3980,5,c	;volatile
  2130  001906  0012               	return		;funcret
  2131  001908                     __end_of_WaitLCD:
  2132                           	opt stack 0
  2133                           tblptru	equ	0xFF8
  2134                           tblptrh	equ	0xFF7
  2135                           tblptrl	equ	0xFF6
  2136                           tablat	equ	0xFF5
  2137                           prodh	equ	0xFF4
  2138                           prodl	equ	0xFF3
  2139                           intcon	equ	0xFF2
  2140                           intcon2	equ	0xFF1
  2141                           intcon3	equ	0xFF0
  2142                           indf0	equ	0xFEF
  2143                           postinc0	equ	0xFEE
  2144                           fsr0h	equ	0xFEA
  2145                           fsr0l	equ	0xFE9
  2146                           wreg	equ	0xFE8
  2147                           postdec1	equ	0xFE5
  2148                           fsr1l	equ	0xFE1
  2149                           status	equ	0xFD8
  2150                           
  2151 ;; *************** function _ReadByte *****************
  2152 ;; Defined at:
  2153 ;;		line 21 in file "lcd.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;		None
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;  status          1   39[COMRAM] unsigned char 
  2158 ;; Return value:  Size  Location     Type
  2159 ;;                  1    wreg      unsigned char 
  2160 ;; Registers used:
  2161 ;;		wreg, status,2, status,0
  2162 ;; Tracked objects:
  2163 ;;		On entry : 0/0
  2164 ;;		On exit  : 0/0
  2165 ;;		Unchanged: 0/0
  2166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2168 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2170 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2171 ;;Total ram usage:        1 bytes
  2172 ;; Hardware stack levels used:    1
  2173 ;; Hardware stack levels required when called:    8
  2174 ;; This function calls:
  2175 ;;		Nothing
  2176 ;; This function is called by:
  2177 ;;		_WaitLCD
  2178 ;; This function uses a non-reentrant model
  2179 ;;
  2180                           
  2181                           	psect	text15
  2182  001796                     __ptext15:
  2183                           	opt stack 0
  2184  001796                     _ReadByte:
  2185                           	opt stack 16
  2186                           
  2187                           ;lcd.c: 23: UINT8_T status;
  2188                           ;lcd.c: 25: TRISDbits.TRISD0 = 1;
  2189                           
  2190                           ;incstack = 0
  2191  001796  8095               	bsf	3989,0,c	;volatile
  2192                           
  2193                           ;lcd.c: 26: TRISDbits.TRISD1 = 1;
  2194  001798  8295               	bsf	3989,1,c	;volatile
  2195                           
  2196                           ;lcd.c: 27: TRISDbits.TRISD2 = 1;
  2197  00179A  8495               	bsf	3989,2,c	;volatile
  2198                           
  2199                           ;lcd.c: 28: TRISDbits.TRISD3 = 1;
  2200  00179C  8695               	bsf	3989,3,c	;volatile
  2201                           
  2202                           ;lcd.c: 30: LATDbits.LATD6 = 1;
  2203  00179E  8C8C               	bsf	3980,6,c	;volatile
  2204                           
  2205                           ;lcd.c: 31: __nop();
  2206  0017A0  F000               	nop	
  2207                           
  2208                           ;lcd.c: 32: __nop();
  2209  0017A2  F000               	nop	
  2210                           
  2211                           ;lcd.c: 34: status = PORTD << 4;
  2212  0017A4  3883               	swapf	3971,w,c	;volatile
  2213  0017A6  0BF0               	andlw	240
  2214  0017A8  6E28               	movwf	ReadByte@status,c
  2215                           
  2216                           ;lcd.c: 35: LATDbits.LATD6 = 0;
  2217  0017AA  9C8C               	bcf	3980,6,c	;volatile
  2218                           
  2219                           ;lcd.c: 37: LATDbits.LATD6 = 1;
  2220  0017AC  8C8C               	bsf	3980,6,c	;volatile
  2221                           
  2222                           ;lcd.c: 38: __nop();
  2223  0017AE  F000               	nop	
  2224                           
  2225                           ;lcd.c: 39: __nop();
  2226  0017B0  F000               	nop	
  2227                           
  2228                           ;lcd.c: 41: status |= PORTD & 0x0F;
  2229  0017B2  5083               	movf	3971,w,c	;volatile
  2230  0017B4  0B0F               	andlw	15
  2231  0017B6  1228               	iorwf	ReadByte@status,f,c
  2232                           
  2233                           ;lcd.c: 42: LATDbits.LATD6 = 0;
  2234  0017B8  9C8C               	bcf	3980,6,c	;volatile
  2235                           
  2236                           ;lcd.c: 44: TRISDbits.TRISD0 = 0;
  2237  0017BA  9095               	bcf	3989,0,c	;volatile
  2238                           
  2239                           ;lcd.c: 45: TRISDbits.TRISD1 = 0;
  2240  0017BC  9295               	bcf	3989,1,c	;volatile
  2241                           
  2242                           ;lcd.c: 46: TRISDbits.TRISD2 = 0;
  2243  0017BE  9495               	bcf	3989,2,c	;volatile
  2244                           
  2245                           ;lcd.c: 47: TRISDbits.TRISD3 = 0;
  2246  0017C0  9695               	bcf	3989,3,c	;volatile
  2247                           
  2248                           ;lcd.c: 49: return(status);
  2249  0017C2  5028               	movf	ReadByte@status,w,c
  2250  0017C4  0012               	return	
  2251  0017C6                     __end_of_ReadByte:
  2252                           	opt stack 0
  2253                           tblptru	equ	0xFF8
  2254                           tblptrh	equ	0xFF7
  2255                           tblptrl	equ	0xFF6
  2256                           tablat	equ	0xFF5
  2257                           prodh	equ	0xFF4
  2258                           prodl	equ	0xFF3
  2259                           intcon	equ	0xFF2
  2260                           intcon2	equ	0xFF1
  2261                           intcon3	equ	0xFF0
  2262                           indf0	equ	0xFEF
  2263                           postinc0	equ	0xFEE
  2264                           fsr0h	equ	0xFEA
  2265                           fsr0l	equ	0xFE9
  2266                           wreg	equ	0xFE8
  2267                           postdec1	equ	0xFE5
  2268                           fsr1l	equ	0xFE1
  2269                           status	equ	0xFD8
  2270                           
  2271 ;; *************** function _ISR *****************
  2272 ;; Defined at:
  2273 ;;		line 230 in file "main.c"
  2274 ;; Parameters:    Size  Location     Type
  2275 ;;		None
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;  i               2   37[COMRAM] int 
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  1    wreg      void 
  2280 ;; Registers used:
  2281 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2288 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2289 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2290 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;Total ram usage:       17 bytes
  2292 ;; Hardware stack levels used:    1
  2293 ;; Hardware stack levels required when called:    7
  2294 ;; This function calls:
  2295 ;;		_flashlight
  2296 ;;		_pedometer
  2297 ;;		_searched
  2298 ;;		_synchronize
  2299 ;;		i2_LCDGoto
  2300 ;;		i2_LCDWriteInt
  2301 ;;		i2_LCDWriteStr
  2302 ;; This function is called by:
  2303 ;;		Interrupt level 2
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           	psect	intcode
  2308  000008                     __pintcode:
  2309                           	opt stack 0
  2310  000008                     _ISR:
  2311                           	opt stack 15
  2312                           
  2313                           ;incstack = 0
  2314  000008  8238               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2315  00000A  CFFA F018          	movff	pclath,??_ISR+1
  2316  00000E  CFFB F019          	movff	pclatu,??_ISR+2
  2317  000012  CFE9 F01A          	movff	fsr0l,??_ISR+3
  2318  000016  CFEA F01B          	movff	fsr0h,??_ISR+4
  2319  00001A  CFE1 F01C          	movff	fsr1l,??_ISR+5
  2320  00001E  CFE2 F01D          	movff	fsr1h,??_ISR+6
  2321  000022  CFD9 F01E          	movff	fsr2l,??_ISR+7
  2322  000026  CFDA F01F          	movff	fsr2h,??_ISR+8
  2323  00002A  CFF3 F020          	movff	prodl,??_ISR+9
  2324  00002E  CFF4 F021          	movff	prodh,??_ISR+10
  2325  000032  CFF6 F022          	movff	tblptrl,??_ISR+11
  2326  000036  CFF7 F023          	movff	tblptrh,??_ISR+12
  2327  00003A  CFF8 F024          	movff	tblptru,??_ISR+13
  2328  00003E  CFF5 F025          	movff	tablat,??_ISR+14
  2329                           
  2330                           ;main.c: 232: if (INTCONbits.INT0IF) { pedometer(); }
  2331  000042  B2F2               	btfsc	intcon,1,c	;volatile
  2332  000044  EC96  F00C         	call	_pedometer	;wreg free
  2333                           
  2334                           ;main.c: 233: if (INTCON3bits.INT1IF) { searched(); }
  2335  000048  B0F0               	btfsc	intcon3,0,c	;volatile
  2336  00004A  EC14  F008         	call	_searched	;wreg free
  2337                           
  2338                           ;main.c: 235: if (INTCON3bits.INT2IF) {
  2339  00004E  A2F0               	btfss	intcon3,1,c	;volatile
  2340  000050  D040               	goto	i2l90
  2341                           
  2342                           ;main.c: 237: int i = 0;
  2343  000052  0E00               	movlw	0
  2344  000054  6E27               	movwf	ISR@i+1,c
  2345  000056  0E00               	movlw	0
  2346  000058  6E26               	movwf	ISR@i,c
  2347                           
  2348                           ;main.c: 238: _delay(75000);
  2349  00005A  0E62               	movlw	98
  2350  00005C  6E17               	movwf	??_ISR& (0+255),c
  2351  00005E  0E66               	movlw	102
  2352  000060                     i2u137_47:
  2353  000060  2EE8               	decfsz	wreg,f,c
  2354  000062  D7FE               	bra	i2u137_47
  2355  000064  2E17               	decfsz	??_ISR& (0+255),f,c
  2356  000066  D7FC               	bra	i2u137_47
  2357                           
  2358                           ;main.c: 239: for (i = 3; i < 30; i++) {
  2359  000068  0E00               	movlw	0
  2360  00006A  6E27               	movwf	ISR@i+1,c
  2361  00006C  0E03               	movlw	3
  2362  00006E  6E26               	movwf	ISR@i,c
  2363  000070                     i2l1943:
  2364  000070  BE27               	btfsc	ISR@i+1,7,c
  2365  000072  D006               	goto	i2l1947
  2366  000074  5027               	movf	ISR@i+1,w,c
  2367  000076  E118               	bnz	i2l1957
  2368  000078  0E1E               	movlw	30
  2369  00007A  5C26               	subwf	ISR@i,w,c
  2370  00007C  B0D8               	btfsc	status,0,c
  2371  00007E  D014               	goto	i2l1957
  2372  000080                     i2l1947:
  2373                           
  2374                           ;main.c: 240: LCDWriteInt(8, 1, i);
  2375  000080  0E01               	movlw	1
  2376  000082  6E0F               	movwf	i2LCDWriteInt@row,c
  2377  000084  C026  F010         	movff	ISR@i,i2LCDWriteInt@value
  2378  000088  0E08               	movlw	8
  2379  00008A  ECE4  F00A         	call	i2_LCDWriteInt
  2380                           
  2381                           ;main.c: 241: if (!PORTBbits.RB2) { break ; }
  2382  00008E  A481               	btfss	3969,2,c	;volatile
  2383  000090  D00B               	goto	i2l1957
  2384                           
  2385                           ;main.c: 242: _delay(25000);
  2386  000092  0E21               	movlw	33
  2387  000094  6E17               	movwf	??_ISR& (0+255),c
  2388  000096  0E76               	movlw	118
  2389  000098                     i2u138_47:
  2390  000098  2EE8               	decfsz	wreg,f,c
  2391  00009A  D7FE               	bra	i2u138_47
  2392  00009C  2E17               	decfsz	??_ISR& (0+255),f,c
  2393  00009E  D7FC               	bra	i2u138_47
  2394  0000A0  D000               	nop2	
  2395  0000A2  4A26               	infsnz	ISR@i,f,c
  2396  0000A4  2A27               	incf	ISR@i+1,f,c
  2397  0000A6  D7E4               	goto	i2l1943
  2398  0000A8                     i2l1957:
  2399                           
  2400                           ;main.c: 243: }
  2401                           ;main.c: 245: LCDGoto(8, 1);
  2402  0000A8  0E01               	movlw	1
  2403  0000AA  6E06               	movwf	i2LCDGoto@row,c
  2404  0000AC  0E08               	movlw	8
  2405  0000AE  EC94  F00B         	call	i2_LCDGoto
  2406                           
  2407                           ;main.c: 246: LCDWriteStr("    ");
  2408  0000B2  0E1D               	movlw	low STR_3
  2409  0000B4  6E07               	movwf	i2LCDWriteStr@string,c
  2410  0000B6  0E10               	movlw	high STR_3
  2411  0000B8  6E08               	movwf	i2LCDWriteStr@string+1,c
  2412  0000BA  ECD1  F009         	call	i2_LCDWriteStr	;wreg free
  2413                           
  2414                           ;main.c: 248: if (i == 30) { synchronize(); }
  2415  0000BE  0E1E               	movlw	30
  2416  0000C0  1826               	xorwf	ISR@i,w,c
  2417  0000C2  1027               	iorwf	ISR@i+1,w,c
  2418  0000C4  A4D8               	btfss	status,2,c
  2419  0000C6  D003               	goto	i2l1965
  2420  0000C8  EC0B  F00B         	call	_synchronize	;wreg free
  2421  0000CC  D002               	goto	i2l90
  2422  0000CE                     i2l1965:
  2423                           
  2424                           ;main.c: 250: else { flashlight(); }
  2425  0000CE  EC4A  F00C         	call	_flashlight	;wreg free
  2426  0000D2                     i2l90:
  2427  0000D2  C025  FFF5         	movff	??_ISR+14,tablat
  2428  0000D6  C024  FFF8         	movff	??_ISR+13,tblptru
  2429  0000DA  C023  FFF7         	movff	??_ISR+12,tblptrh
  2430  0000DE  C022  FFF6         	movff	??_ISR+11,tblptrl
  2431  0000E2  C021  FFF4         	movff	??_ISR+10,prodh
  2432  0000E6  C020  FFF3         	movff	??_ISR+9,prodl
  2433  0000EA  C01F  FFDA         	movff	??_ISR+8,fsr2h
  2434  0000EE  C01E  FFD9         	movff	??_ISR+7,fsr2l
  2435  0000F2  C01D  FFE2         	movff	??_ISR+6,fsr1h
  2436  0000F6  C01C  FFE1         	movff	??_ISR+5,fsr1l
  2437  0000FA  C01B  FFEA         	movff	??_ISR+4,fsr0h
  2438  0000FE  C01A  FFE9         	movff	??_ISR+3,fsr0l
  2439  000102  C019  FFFB         	movff	??_ISR+2,pclatu
  2440  000106  C018  FFFA         	movff	??_ISR+1,pclath
  2441  00010A  9238               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2442  00010C  0011               	retfie		f
  2443  00010E                     __end_of_ISR:
  2444                           	opt stack 0
  2445                           pclatu	equ	0xFFB
  2446                           pclath	equ	0xFFA
  2447                           tblptru	equ	0xFF8
  2448                           tblptrh	equ	0xFF7
  2449                           tblptrl	equ	0xFF6
  2450                           tablat	equ	0xFF5
  2451                           prodh	equ	0xFF4
  2452                           prodl	equ	0xFF3
  2453                           intcon	equ	0xFF2
  2454                           intcon2	equ	0xFF1
  2455                           intcon3	equ	0xFF0
  2456                           indf0	equ	0xFEF
  2457                           postinc0	equ	0xFEE
  2458                           fsr0h	equ	0xFEA
  2459                           fsr0l	equ	0xFE9
  2460                           wreg	equ	0xFE8
  2461                           postdec1	equ	0xFE5
  2462                           fsr1h	equ	0xFE2
  2463                           fsr1l	equ	0xFE1
  2464                           fsr2h	equ	0xFDA
  2465                           fsr2l	equ	0xFD9
  2466                           status	equ	0xFD8
  2467                           
  2468 ;; *************** function _synchronize *****************
  2469 ;; Defined at:
  2470 ;;		line 211 in file "main.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;		None
  2473 ;; Auto vars:     Size  Location     Type
  2474 ;;		None
  2475 ;; Return value:  Size  Location     Type
  2476 ;;                  1    wreg      void 
  2477 ;; Registers used:
  2478 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2479 ;; Tracked objects:
  2480 ;;		On entry : 0/0
  2481 ;;		On exit  : 0/0
  2482 ;;		Unchanged: 0/0
  2483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2486 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2487 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2488 ;;Total ram usage:        2 bytes
  2489 ;; Hardware stack levels used:    1
  2490 ;; Hardware stack levels required when called:    6
  2491 ;; This function calls:
  2492 ;;		i2_LCDGoto
  2493 ;;		i2_LCDWriteStr
  2494 ;;		i2_show_debug
  2495 ;; This function is called by:
  2496 ;;		_ISR
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           	psect	text17
  2501  001616                     __ptext17:
  2502                           	opt stack 0
  2503  001616                     _synchronize:
  2504                           	opt stack 15
  2505                           
  2506                           ;main.c: 213: synchronization = 1;
  2507                           
  2508                           ;incstack = 0
  2509  001616  0E01               	movlw	1
  2510  001618  6E37               	movwf	_synchronization,c
  2511                           
  2512                           ;main.c: 215: show_debug();
  2513  00161A  EC12  F00C         	call	i2_show_debug	;wreg free
  2514                           
  2515                           ;main.c: 217: _delay(625000);
  2516  00161E  0E04               	movlw	4
  2517  001620  6E16               	movwf	(??_synchronize+1)& (0+255),c
  2518  001622  0E2C               	movlw	44
  2519  001624  6E15               	movwf	??_synchronize& (0+255),c
  2520  001626  0EAC               	movlw	172
  2521  001628                     i2u139_47:
  2522  001628  2EE8               	decfsz	wreg,f,c
  2523  00162A  D7FE               	bra	i2u139_47
  2524  00162C  2E15               	decfsz	??_synchronize& (0+255),f,c
  2525  00162E  D7FC               	bra	i2u139_47
  2526  001630  2E16               	decfsz	(??_synchronize+1)& (0+255),f,c
  2527  001632  D7FA               	bra	i2u139_47
  2528                           
  2529                           ;main.c: 219: steps = 0;
  2530  001634  0E00               	movlw	0
  2531  001636  6E36               	movwf	_steps+1,c
  2532  001638  0E00               	movlw	0
  2533  00163A  6E35               	movwf	_steps,c
  2534                           
  2535                           ;main.c: 221: synchronization = 0;
  2536  00163C  0E00               	movlw	0
  2537  00163E  6E37               	movwf	_synchronization,c
  2538                           
  2539                           ;main.c: 222: INTCON3bits.INT2IF = 0;
  2540  001640  92F0               	bcf	intcon3,1,c	;volatile
  2541                           
  2542                           ;main.c: 224: show_debug();
  2543  001642  EC12  F00C         	call	i2_show_debug	;wreg free
  2544                           
  2545                           ;main.c: 225: LCDGoto(8, 1);
  2546  001646  0E01               	movlw	1
  2547  001648  6E06               	movwf	i2LCDGoto@row,c
  2548  00164A  0E08               	movlw	8
  2549  00164C  EC94  F00B         	call	i2_LCDGoto
  2550                           
  2551                           ;main.c: 226: LCDWriteStr("    ");
  2552  001650  0E1D               	movlw	low STR_3
  2553  001652  6E07               	movwf	i2LCDWriteStr@string,c
  2554  001654  0E10               	movlw	high STR_3
  2555  001656  6E08               	movwf	i2LCDWriteStr@string+1,c
  2556  001658  ECD1  F009         	call	i2_LCDWriteStr	;wreg free
  2557  00165C  0012               	return		;funcret
  2558  00165E                     __end_of_synchronize:
  2559                           	opt stack 0
  2560                           pclatu	equ	0xFFB
  2561                           pclath	equ	0xFFA
  2562                           tblptru	equ	0xFF8
  2563                           tblptrh	equ	0xFF7
  2564                           tblptrl	equ	0xFF6
  2565                           tablat	equ	0xFF5
  2566                           prodh	equ	0xFF4
  2567                           prodl	equ	0xFF3
  2568                           intcon	equ	0xFF2
  2569                           intcon2	equ	0xFF1
  2570                           intcon3	equ	0xFF0
  2571                           indf0	equ	0xFEF
  2572                           postinc0	equ	0xFEE
  2573                           fsr0h	equ	0xFEA
  2574                           fsr0l	equ	0xFE9
  2575                           wreg	equ	0xFE8
  2576                           postdec1	equ	0xFE5
  2577                           fsr1h	equ	0xFE2
  2578                           fsr1l	equ	0xFE1
  2579                           fsr2h	equ	0xFDA
  2580                           fsr2l	equ	0xFD9
  2581                           status	equ	0xFD8
  2582                           
  2583 ;; *************** function _searched *****************
  2584 ;; Defined at:
  2585 ;;		line 184 in file "main.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;		None
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;  i               2   20[COMRAM] int 
  2590 ;;  time            2   18[COMRAM] int 
  2591 ;;  found           2   16[COMRAM] int 
  2592 ;; Return value:  Size  Location     Type
  2593 ;;                  1    wreg      void 
  2594 ;; Registers used:
  2595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2596 ;; Tracked objects:
  2597 ;;		On entry : 0/0
  2598 ;;		On exit  : 0/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2602 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2603 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2604 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2605 ;;Total ram usage:        8 bytes
  2606 ;; Hardware stack levels used:    1
  2607 ;; Hardware stack levels required when called:    1
  2608 ;; This function calls:
  2609 ;;		_flashlight
  2610 ;;		i2___awdiv
  2611 ;;		i2___awmod
  2612 ;; This function is called by:
  2613 ;;		_ISR
  2614 ;; This function uses a non-reentrant model
  2615 ;;
  2616                           
  2617                           	psect	text18
  2618  001028                     __ptext18:
  2619                           	opt stack 0
  2620  001028                     _searched:
  2621                           	opt stack 20
  2622                           
  2623                           ;main.c: 186: int time = 50, i = 0, found = 0;
  2624                           
  2625                           ;incstack = 0
  2626  001028  0E00               	movlw	0
  2627  00102A  6E14               	movwf	searched@time+1,c
  2628  00102C  0E32               	movlw	50
  2629  00102E  6E13               	movwf	searched@time,c
  2630  001030  0E00               	movlw	0
  2631  001032  6E16               	movwf	searched@i+1,c
  2632  001034  0E00               	movlw	0
  2633  001036  6E15               	movwf	searched@i,c
  2634  001038  0E00               	movlw	0
  2635  00103A  6E12               	movwf	searched@found+1,c
  2636  00103C  0E00               	movlw	0
  2637  00103E  D045               	goto	L2
  2638  001040                     i2l1873:
  2639                           
  2640                           ;main.c: 191: PR2bits.PR2 = kiwi_frequence[time%kiwi_length];
  2641  001040  C013  F001         	movff	searched@time,i2___awmod@dividend
  2642  001044  C014  F002         	movff	searched@time+1,i2___awmod@dividend+1
  2643  001048  C034  F003         	movff	_kiwi_length,i2___awmod@divisor
  2644  00104C  6A04               	clrf	i2___awmod@divisor+1,c
  2645  00104E  EC49  F00A         	call	i2___awmod	;wreg free
  2646  001052  0E31               	movlw	low _kiwi_frequence
  2647  001054  2401               	addwf	?i2___awmod,w,c
  2648  001056  6ED9               	movwf	fsr2l,c
  2649  001058  0E00               	movlw	high _kiwi_frequence
  2650  00105A  2002               	addwfc	?i2___awmod+1,w,c
  2651  00105C  6EDA               	movwf	fsr2h,c
  2652  00105E  50DF               	movf	indf2,w,c
  2653  001060  6EBB               	movwf	4027,c	;volatile
  2654                           
  2655                           ;main.c: 192: CCPR1Lbits.CCPR1L = (unsigned char) ((kiwi_frequence[time%kiwi_length] + 1
      +                          )/2) ;
  2656  001062  C034  F003         	movff	_kiwi_length,i2___awmod@divisor
  2657  001066  6A04               	clrf	i2___awmod@divisor+1,c
  2658  001068  C013  F001         	movff	searched@time,i2___awmod@dividend
  2659  00106C  C014  F002         	movff	searched@time+1,i2___awmod@dividend+1
  2660  001070  EC49  F00A         	call	i2___awmod	;wreg free
  2661  001074  0E31               	movlw	low _kiwi_frequence
  2662  001076  2401               	addwf	?i2___awmod,w,c
  2663  001078  6ED9               	movwf	fsr2l,c
  2664  00107A  0E00               	movlw	high _kiwi_frequence
  2665  00107C  2002               	addwfc	?i2___awmod+1,w,c
  2666  00107E  6EDA               	movwf	fsr2h,c
  2667  001080  50DF               	movf	indf2,w,c
  2668  001082  6E0F               	movwf	??_searched& (0+255),c
  2669  001084  0E01               	movlw	1
  2670  001086  240F               	addwf	??_searched,w,c
  2671  001088  6E07               	movwf	i2___awdiv@dividend,c
  2672  00108A  6A08               	clrf	i2___awdiv@dividend+1,c
  2673  00108C  0E00               	movlw	0
  2674  00108E  2208               	addwfc	i2___awdiv@dividend+1,f,c
  2675  001090  0E00               	movlw	0
  2676  001092  6E0A               	movwf	i2___awdiv@divisor+1,c
  2677  001094  0E02               	movlw	2
  2678  001096  6E09               	movwf	i2___awdiv@divisor,c
  2679  001098  EC8F  F009         	call	i2___awdiv	;wreg free
  2680  00109C  5007               	movf	?i2___awdiv,w,c
  2681  00109E  6EBE               	movwf	4030,c	;volatile
  2682                           
  2683                           ;main.c: 194: flashlight();
  2684  0010A0  EC4A  F00C         	call	_flashlight	;wreg free
  2685                           
  2686                           ;main.c: 196: for (i = 0; i < 10; i++) {
  2687  0010A4  0E00               	movlw	0
  2688  0010A6  6E16               	movwf	searched@i+1,c
  2689  0010A8  0E00               	movlw	0
  2690  0010AA  6E15               	movwf	searched@i,c
  2691  0010AC                     i2l1879:
  2692  0010AC  BE16               	btfsc	searched@i+1,7,c
  2693  0010AE  D006               	goto	i2l67
  2694  0010B0  5016               	movf	searched@i+1,w,c
  2695  0010B2  E122               	bnz	i2l1897
  2696  0010B4  0E0A               	movlw	10
  2697  0010B6  5C15               	subwf	searched@i,w,c
  2698  0010B8  B0D8               	btfsc	status,0,c
  2699  0010BA  D01E               	goto	i2l1897
  2700  0010BC                     i2l67:
  2701                           
  2702                           ;main.c: 197: if (INTCON3bits.INT2IF || LATBbits.LATB2) { found = 1; break ; }
  2703  0010BC  A2F0               	btfss	intcon3,1,c	;volatile
  2704  0010BE  B48A               	btfsc	3978,2,c	;volatile
  2705  0010C0  D001               	goto	i2l1885
  2706  0010C2  D005               	goto	i2l1887
  2707  0010C4                     i2l1885:
  2708  0010C4  0E00               	movlw	0
  2709  0010C6  6E12               	movwf	searched@found+1,c
  2710  0010C8  0E01               	movlw	1
  2711  0010CA                     L2:
  2712  0010CA  6E11               	movwf	searched@found,c
  2713  0010CC  D015               	goto	i2l1897
  2714  0010CE                     i2l1887:
  2715                           
  2716                           ;main.c: 198: _delay(25000);
  2717  0010CE  0E21               	movlw	33
  2718  0010D0  6E0F               	movwf	??_searched& (0+255),c
  2719  0010D2  0E76               	movlw	118
  2720  0010D4                     i2u140_47:
  2721  0010D4  2EE8               	decfsz	wreg,f,c
  2722  0010D6  D7FE               	bra	i2u140_47
  2723  0010D8  2E0F               	decfsz	??_searched& (0+255),f,c
  2724  0010DA  D7FC               	bra	i2u140_47
  2725  0010DC  D000               	nop2	
  2726                           
  2727                           ;main.c: 199: if (i > 5) { CCPR1Lbits.CCPR1L = 0; }
  2728  0010DE  BE16               	btfsc	searched@i+1,7,c
  2729  0010E0  D008               	goto	i2l1893
  2730  0010E2  5016               	movf	searched@i+1,w,c
  2731  0010E4  E104               	bnz	i2u109_40
  2732  0010E6  0E06               	movlw	6
  2733  0010E8  5C15               	subwf	searched@i,w,c
  2734  0010EA  A0D8               	btfss	status,0,c
  2735  0010EC  D002               	goto	i2l1893
  2736  0010EE                     i2u109_40:
  2737  0010EE  0E00               	movlw	0
  2738  0010F0  6EBE               	movwf	4030,c	;volatile
  2739  0010F2                     i2l1893:
  2740  0010F2  4A15               	infsnz	searched@i,f,c
  2741  0010F4  2A16               	incf	searched@i+1,f,c
  2742  0010F6  D7DA               	goto	i2l1879
  2743  0010F8                     i2l1897:
  2744  0010F8  5013               	movf	searched@time,w,c
  2745  0010FA  6E0F               	movwf	??_searched& (0+255),c
  2746  0010FC  5014               	movf	searched@time+1,w,c
  2747  0010FE  6E10               	movwf	(??_searched+1)& (0+255),c
  2748  001100  0E01               	movlw	1
  2749  001102  5E13               	subwf	searched@time,f,c
  2750  001104  0E00               	movlw	0
  2751  001106  5A14               	subwfb	searched@time+1,f,c
  2752  001108  BE10               	btfsc	??_searched+1,7,c
  2753  00110A  D009               	goto	i2l1901
  2754  00110C  5010               	movf	??_searched+1,w,c
  2755  00110E  E103               	bnz	i2u111_40
  2756  001110  040F               	decf	??_searched,w,c
  2757  001112  A0D8               	btfss	status,0,c
  2758  001114  D004               	goto	i2l1901
  2759  001116                     i2u111_40:
  2760  001116  5011               	movf	searched@found,w,c
  2761  001118  1012               	iorwf	searched@found+1,w,c
  2762  00111A  B4D8               	btfsc	status,2,c
  2763  00111C  D791               	goto	i2l1873
  2764  00111E                     i2l1901:
  2765                           
  2766                           ;main.c: 200: }
  2767                           ;main.c: 201: }
  2768                           ;main.c: 204: CCPR1Lbits.CCPR1L = 0 ;
  2769  00111E  0E00               	movlw	0
  2770  001120  6EBE               	movwf	4030,c	;volatile
  2771                           
  2772                           ;main.c: 205: LATCbits.LATC1 = 0;
  2773  001122  928B               	bcf	3979,1,c	;volatile
  2774                           
  2775                           ;main.c: 206: INTCON3bits.INT1IF = 0;
  2776  001124  90F0               	bcf	intcon3,0,c	;volatile
  2777                           
  2778                           ;main.c: 207: INTCON3bits.INT2IF = 0;
  2779  001126  92F0               	bcf	intcon3,1,c	;volatile
  2780  001128  0012               	return		;funcret
  2781  00112A                     __end_of_searched:
  2782                           	opt stack 0
  2783                           pclatu	equ	0xFFB
  2784                           pclath	equ	0xFFA
  2785                           tblptru	equ	0xFF8
  2786                           tblptrh	equ	0xFF7
  2787                           tblptrl	equ	0xFF6
  2788                           tablat	equ	0xFF5
  2789                           prodh	equ	0xFF4
  2790                           prodl	equ	0xFF3
  2791                           intcon	equ	0xFF2
  2792                           intcon2	equ	0xFF1
  2793                           intcon3	equ	0xFF0
  2794                           indf0	equ	0xFEF
  2795                           postinc0	equ	0xFEE
  2796                           fsr0h	equ	0xFEA
  2797                           fsr0l	equ	0xFE9
  2798                           wreg	equ	0xFE8
  2799                           postdec1	equ	0xFE5
  2800                           fsr1h	equ	0xFE2
  2801                           fsr1l	equ	0xFE1
  2802                           indf2	equ	0xFDF
  2803                           fsr2h	equ	0xFDA
  2804                           fsr2l	equ	0xFD9
  2805                           status	equ	0xFD8
  2806                           
  2807 ;; *************** function _flashlight *****************
  2808 ;; Defined at:
  2809 ;;		line 159 in file "main.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;		None
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;		None
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      void 
  2816 ;; Registers used:
  2817 ;;		wreg, status,2, status,0
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2825 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2826 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2827 ;;Total ram usage:        1 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; This function calls:
  2830 ;;		Nothing
  2831 ;; This function is called by:
  2832 ;;		_searched
  2833 ;;		_ISR
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836                           
  2837                           	psect	text19
  2838  001894                     __ptext19:
  2839                           	opt stack 0
  2840  001894                     _flashlight:
  2841                           	opt stack 20
  2842                           
  2843                           ;main.c: 161: LATCbits.LATC1 = (unsigned char) !LATCbits.LATC1;
  2844                           
  2845                           ;incstack = 0
  2846  001894  B28B               	btfsc	3979,1,c	;volatile
  2847  001896  D003               	goto	i2u44_40
  2848  001898  6A01               	clrf	??_flashlight& (0+255),c
  2849  00189A  2A01               	incf	??_flashlight& (0+255),f,c
  2850  00189C  D001               	goto	i2u45_48
  2851  00189E                     i2u44_40:
  2852  00189E  6A01               	clrf	??_flashlight& (0+255),c
  2853  0018A0                     i2u45_48:
  2854  0018A0  4601               	rlncf	??_flashlight,f,c
  2855  0018A2  508B               	movf	3979,w,c	;volatile
  2856  0018A4  1801               	xorwf	??_flashlight,w,c
  2857  0018A6  0BFD               	andlw	-3
  2858  0018A8  1801               	xorwf	??_flashlight,w,c
  2859  0018AA  6E8B               	movwf	3979,c	;volatile
  2860                           
  2861                           ;main.c: 163: INTCON3bits.INT2IF = 0;
  2862  0018AC  92F0               	bcf	intcon3,1,c	;volatile
  2863  0018AE  0012               	return		;funcret
  2864  0018B0                     __end_of_flashlight:
  2865                           	opt stack 0
  2866                           pclatu	equ	0xFFB
  2867                           pclath	equ	0xFFA
  2868                           tblptru	equ	0xFF8
  2869                           tblptrh	equ	0xFF7
  2870                           tblptrl	equ	0xFF6
  2871                           tablat	equ	0xFF5
  2872                           prodh	equ	0xFF4
  2873                           prodl	equ	0xFF3
  2874                           intcon	equ	0xFF2
  2875                           intcon2	equ	0xFF1
  2876                           intcon3	equ	0xFF0
  2877                           indf0	equ	0xFEF
  2878                           postinc0	equ	0xFEE
  2879                           fsr0h	equ	0xFEA
  2880                           fsr0l	equ	0xFE9
  2881                           wreg	equ	0xFE8
  2882                           postdec1	equ	0xFE5
  2883                           fsr1h	equ	0xFE2
  2884                           fsr1l	equ	0xFE1
  2885                           indf2	equ	0xFDF
  2886                           fsr2h	equ	0xFDA
  2887                           fsr2l	equ	0xFD9
  2888                           status	equ	0xFD8
  2889                           
  2890 ;; *************** function _pedometer *****************
  2891 ;; Defined at:
  2892 ;;		line 147 in file "main.c"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;		None
  2895 ;; Auto vars:     Size  Location     Type
  2896 ;;		None
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  1    wreg      void 
  2899 ;; Registers used:
  2900 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2901 ;; Tracked objects:
  2902 ;;		On entry : 0/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;Total ram usage:        0 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; Hardware stack levels required when called:    6
  2913 ;; This function calls:
  2914 ;;		i2_show_debug
  2915 ;; This function is called by:
  2916 ;;		_ISR
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           	psect	text20
  2921  00192C                     __ptext20:
  2922                           	opt stack 0
  2923  00192C                     _pedometer:
  2924                           	opt stack 15
  2925                           
  2926                           ;main.c: 149: steps++;
  2927                           
  2928                           ;incstack = 0
  2929  00192C  4A35               	infsnz	_steps,f,c
  2930  00192E  2A36               	incf	_steps+1,f,c
  2931                           
  2932                           ;main.c: 151: INTCONbits.INT0IF = 0 ;
  2933  001930  92F2               	bcf	intcon,1,c	;volatile
  2934                           
  2935                           ;main.c: 154: show_debug();
  2936  001932  EC12  F00C         	call	i2_show_debug	;wreg free
  2937  001936  0012               	return		;funcret
  2938  001938                     __end_of_pedometer:
  2939                           	opt stack 0
  2940                           pclatu	equ	0xFFB
  2941                           pclath	equ	0xFFA
  2942                           tblptru	equ	0xFF8
  2943                           tblptrh	equ	0xFF7
  2944                           tblptrl	equ	0xFF6
  2945                           tablat	equ	0xFF5
  2946                           prodh	equ	0xFF4
  2947                           prodl	equ	0xFF3
  2948                           intcon	equ	0xFF2
  2949                           intcon2	equ	0xFF1
  2950                           intcon3	equ	0xFF0
  2951                           indf0	equ	0xFEF
  2952                           postinc0	equ	0xFEE
  2953                           fsr0h	equ	0xFEA
  2954                           fsr0l	equ	0xFE9
  2955                           wreg	equ	0xFE8
  2956                           postdec1	equ	0xFE5
  2957                           fsr1h	equ	0xFE2
  2958                           fsr1l	equ	0xFE1
  2959                           indf2	equ	0xFDF
  2960                           fsr2h	equ	0xFDA
  2961                           fsr2l	equ	0xFD9
  2962                           status	equ	0xFD8
  2963                           
  2964 ;; *************** function i2_show_debug *****************
  2965 ;; Defined at:
  2966 ;;		line 73 in file "main.c"
  2967 ;; Parameters:    Size  Location     Type
  2968 ;;		None
  2969 ;; Auto vars:     Size  Location     Type
  2970 ;;		None
  2971 ;; Return value:  Size  Location     Type
  2972 ;;                  1    wreg      void 
  2973 ;; Registers used:
  2974 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2975 ;; Tracked objects:
  2976 ;;		On entry : 0/0
  2977 ;;		On exit  : 0/0
  2978 ;;		Unchanged: 0/0
  2979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2984 ;;Total ram usage:        0 bytes
  2985 ;; Hardware stack levels used:    1
  2986 ;; Hardware stack levels required when called:    5
  2987 ;; This function calls:
  2988 ;;		i2_LCDGoto
  2989 ;;		i2_LCDWriteInt
  2990 ;;		i2_LCDWriteStr
  2991 ;; This function is called by:
  2992 ;;		_pedometer
  2993 ;;		_synchronize
  2994 ;; This function uses a non-reentrant model
  2995 ;;
  2996                           
  2997                           	psect	text21
  2998  001824                     __ptext21:
  2999                           	opt stack 0
  3000  001824                     i2_show_debug:
  3001                           	opt stack 15
  3002                           
  3003                           ;main.c: 74: LCDWriteInt(0, 1, steps);
  3004                           
  3005                           ;incstack = 0
  3006  001824  0E01               	movlw	1
  3007  001826  6E0F               	movwf	i2LCDWriteInt@row,c
  3008  001828  C035  F010         	movff	_steps,i2LCDWriteInt@value
  3009  00182C  0E00               	movlw	0
  3010  00182E  ECE4  F00A         	call	i2_LCDWriteInt
  3011                           
  3012                           ;main.c: 75: if (synchronization) {
  3013  001832  5037               	movf	_synchronization,w,c
  3014  001834  B4D8               	btfsc	status,2,c
  3015  001836  0012               	return	
  3016                           
  3017                           ;main.c: 76: LCDGoto(8, 1);
  3018  001838  0E01               	movlw	1
  3019  00183A  6E06               	movwf	i2LCDGoto@row,c
  3020  00183C  0E08               	movlw	8
  3021  00183E  EC94  F00B         	call	i2_LCDGoto
  3022                           
  3023                           ;main.c: 77: LCDWriteStr("Sync");
  3024  001842  0E22               	movlw	low STR_1
  3025  001844  6E07               	movwf	i2LCDWriteStr@string,c
  3026  001846  0E10               	movlw	high STR_1
  3027  001848  6E08               	movwf	i2LCDWriteStr@string+1,c
  3028  00184A  ECD1  F009         	call	i2_LCDWriteStr	;wreg free
  3029  00184E  0012               	return	
  3030  001850                     __end_ofi2_show_debug:
  3031                           	opt stack 0
  3032                           pclatu	equ	0xFFB
  3033                           pclath	equ	0xFFA
  3034                           tblptru	equ	0xFF8
  3035                           tblptrh	equ	0xFF7
  3036                           tblptrl	equ	0xFF6
  3037                           tablat	equ	0xFF5
  3038                           prodh	equ	0xFF4
  3039                           prodl	equ	0xFF3
  3040                           intcon	equ	0xFF2
  3041                           intcon2	equ	0xFF1
  3042                           intcon3	equ	0xFF0
  3043                           indf0	equ	0xFEF
  3044                           postinc0	equ	0xFEE
  3045                           fsr0h	equ	0xFEA
  3046                           fsr0l	equ	0xFE9
  3047                           wreg	equ	0xFE8
  3048                           postdec1	equ	0xFE5
  3049                           fsr1h	equ	0xFE2
  3050                           fsr1l	equ	0xFE1
  3051                           indf2	equ	0xFDF
  3052                           fsr2h	equ	0xFDA
  3053                           fsr2l	equ	0xFD9
  3054                           status	equ	0xFD8
  3055                           
  3056 ;; *************** function i2_LCDWriteInt *****************
  3057 ;; Defined at:
  3058 ;;		line 229 in file "lcd.c"
  3059 ;; Parameters:    Size  Location     Type
  3060 ;;  column          1    wreg     unsigned char 
  3061 ;;  row             1   14[COMRAM] unsigned char 
  3062 ;;  value           1   15[COMRAM] unsigned char 
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;  column          1   16[COMRAM] unsigned char 
  3065 ;;  LCDWriteInt     3   17[COMRAM] unsigned char [3]
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  1    wreg      void 
  3068 ;; Registers used:
  3069 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3070 ;; Tracked objects:
  3071 ;;		On entry : 0/0
  3072 ;;		On exit  : 0/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3075 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3076 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3078 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3079 ;;Total ram usage:        6 bytes
  3080 ;; Hardware stack levels used:    1
  3081 ;; Hardware stack levels required when called:    4
  3082 ;; This function calls:
  3083 ;;		i2_LCDGoto
  3084 ;;		i2_LCDWriteStr
  3085 ;;		i2___awdiv
  3086 ;;		i2___awmod
  3087 ;; This function is called by:
  3088 ;;		_ISR
  3089 ;;		i2_show_debug
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093                           	psect	text22
  3094  0015C8                     __ptext22:
  3095                           	opt stack 0
  3096  0015C8                     i2_LCDWriteInt:
  3097                           	opt stack 17
  3098                           
  3099                           ;incstack = 0
  3100                           ;i2LCDWriteInt@column stored from wreg
  3101  0015C8  6E11               	movwf	i2LCDWriteInt@column,c
  3102                           
  3103                           ;lcd.c: 230: char string[3];
  3104                           ;lcd.c: 232: string[0] = value / 10 + '0';
  3105  0015CA  C010  F007         	movff	i2LCDWriteInt@value,i2___awdiv@dividend
  3106  0015CE  6A08               	clrf	i2___awdiv@dividend+1,c
  3107  0015D0  0E00               	movlw	0
  3108  0015D2  6E0A               	movwf	i2___awdiv@divisor+1,c
  3109  0015D4  0E0A               	movlw	10
  3110  0015D6  6E09               	movwf	i2___awdiv@divisor,c
  3111  0015D8  EC8F  F009         	call	i2___awdiv	;wreg free
  3112  0015DC  5007               	movf	?i2___awdiv,w,c
  3113  0015DE  0F30               	addlw	48
  3114  0015E0  6E12               	movwf	i2LCDWriteInt@string,c
  3115                           
  3116                           ;lcd.c: 233: string[1] = value % 10 + '0';
  3117  0015E2  C010  F001         	movff	i2LCDWriteInt@value,i2___awmod@dividend
  3118  0015E6  6A02               	clrf	i2___awmod@dividend+1,c
  3119  0015E8  0E00               	movlw	0
  3120  0015EA  6E04               	movwf	i2___awmod@divisor+1,c
  3121  0015EC  0E0A               	movlw	10
  3122  0015EE  6E03               	movwf	i2___awmod@divisor,c
  3123  0015F0  EC49  F00A         	call	i2___awmod	;wreg free
  3124  0015F4  5001               	movf	?i2___awmod,w,c
  3125  0015F6  0F30               	addlw	48
  3126  0015F8  6E13               	movwf	i2LCDWriteInt@string+1,c
  3127                           
  3128                           ;lcd.c: 234: string[2] = '\0';
  3129  0015FA  0E00               	movlw	0
  3130  0015FC  6E14               	movwf	i2LCDWriteInt@string+2,c
  3131                           
  3132                           ;lcd.c: 236: LCDGoto(column, row);
  3133  0015FE  C00F  F006         	movff	i2LCDWriteInt@row,i2LCDGoto@row
  3134  001602  5011               	movf	i2LCDWriteInt@column,w,c
  3135  001604  EC94  F00B         	call	i2_LCDGoto
  3136                           
  3137                           ;lcd.c: 237: LCDWriteStr(string);
  3138  001608  0E12               	movlw	low i2LCDWriteInt@string
  3139  00160A  6E07               	movwf	i2LCDWriteStr@string,c
  3140  00160C  0E00               	movlw	high i2LCDWriteInt@string
  3141  00160E  6E08               	movwf	i2LCDWriteStr@string+1,c
  3142  001610  ECD1  F009         	call	i2_LCDWriteStr	;wreg free
  3143  001614  0012               	return		;funcret
  3144  001616                     __end_ofi2_LCDWriteInt:
  3145                           	opt stack 0
  3146                           pclatu	equ	0xFFB
  3147                           pclath	equ	0xFFA
  3148                           tblptru	equ	0xFF8
  3149                           tblptrh	equ	0xFF7
  3150                           tblptrl	equ	0xFF6
  3151                           tablat	equ	0xFF5
  3152                           prodh	equ	0xFF4
  3153                           prodl	equ	0xFF3
  3154                           intcon	equ	0xFF2
  3155                           intcon2	equ	0xFF1
  3156                           intcon3	equ	0xFF0
  3157                           indf0	equ	0xFEF
  3158                           postinc0	equ	0xFEE
  3159                           fsr0h	equ	0xFEA
  3160                           fsr0l	equ	0xFE9
  3161                           wreg	equ	0xFE8
  3162                           postdec1	equ	0xFE5
  3163                           fsr1h	equ	0xFE2
  3164                           fsr1l	equ	0xFE1
  3165                           indf2	equ	0xFDF
  3166                           fsr2h	equ	0xFDA
  3167                           fsr2l	equ	0xFD9
  3168                           status	equ	0xFD8
  3169                           
  3170 ;; *************** function i2___awmod *****************
  3171 ;; Defined at:
  3172 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  3173 ;; Parameters:    Size  Location     Type
  3174 ;;  dividend        2    0[COMRAM] int 
  3175 ;;  divisor         2    2[COMRAM] int 
  3176 ;; Auto vars:     Size  Location     Type
  3177 ;;  __awmod         1    5[COMRAM] unsigned char 
  3178 ;;  __awmod         1    4[COMRAM] unsigned char 
  3179 ;; Return value:  Size  Location     Type
  3180 ;;                  2    0[COMRAM] int 
  3181 ;; Registers used:
  3182 ;;		wreg, status,2, status,0
  3183 ;; Tracked objects:
  3184 ;;		On entry : 0/0
  3185 ;;		On exit  : 0/0
  3186 ;;		Unchanged: 0/0
  3187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3188 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3189 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3191 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3192 ;;Total ram usage:        6 bytes
  3193 ;; Hardware stack levels used:    1
  3194 ;; This function calls:
  3195 ;;		Nothing
  3196 ;; This function is called by:
  3197 ;;		_searched
  3198 ;;		i2_LCDWriteInt
  3199 ;; This function uses a non-reentrant model
  3200 ;;
  3201                           
  3202                           	psect	text23
  3203  001492                     __ptext23:
  3204                           	opt stack 0
  3205  001492                     i2___awmod:
  3206                           	opt stack 20
  3207                           
  3208                           ;incstack = 0
  3209  001492  0E00               	movlw	0
  3210  001494  6E06               	movwf	i2___awmod@sign,c
  3211  001496  AE02               	btfss	i2___awmod@dividend+1,7,c
  3212  001498  D006               	goto	i2l1685
  3213  00149A  6C01               	negf	i2___awmod@dividend,c
  3214  00149C  1E02               	comf	i2___awmod@dividend+1,f,c
  3215  00149E  B0D8               	btfsc	status,0,c
  3216  0014A0  2A02               	incf	i2___awmod@dividend+1,f,c
  3217  0014A2  0E01               	movlw	1
  3218  0014A4  6E06               	movwf	i2___awmod@sign,c
  3219  0014A6                     i2l1685:
  3220  0014A6  AE04               	btfss	i2___awmod@divisor+1,7,c
  3221  0014A8  D004               	goto	i2l1689
  3222  0014AA  6C03               	negf	i2___awmod@divisor,c
  3223  0014AC  1E04               	comf	i2___awmod@divisor+1,f,c
  3224  0014AE  B0D8               	btfsc	status,0,c
  3225  0014B0  2A04               	incf	i2___awmod@divisor+1,f,c
  3226  0014B2                     i2l1689:
  3227  0014B2  5003               	movf	i2___awmod@divisor,w,c
  3228  0014B4  1004               	iorwf	i2___awmod@divisor+1,w,c
  3229  0014B6  B4D8               	btfsc	status,2,c
  3230  0014B8  D018               	goto	i2l1705
  3231  0014BA  0E01               	movlw	1
  3232  0014BC  6E05               	movwf	i2___awmod@counter,c
  3233  0014BE  D004               	goto	i2l1695
  3234  0014C0                     i2l1693:
  3235  0014C0  90D8               	bcf	status,0,c
  3236  0014C2  3603               	rlcf	i2___awmod@divisor,f,c
  3237  0014C4  3604               	rlcf	i2___awmod@divisor+1,f,c
  3238  0014C6  2A05               	incf	i2___awmod@counter,f,c
  3239  0014C8                     i2l1695:
  3240  0014C8  AE04               	btfss	i2___awmod@divisor+1,7,c
  3241  0014CA  D7FA               	goto	i2l1693
  3242  0014CC                     i2l1697:
  3243  0014CC  5003               	movf	i2___awmod@divisor,w,c
  3244  0014CE  5C01               	subwf	i2___awmod@dividend,w,c
  3245  0014D0  5004               	movf	i2___awmod@divisor+1,w,c
  3246  0014D2  5802               	subwfb	i2___awmod@dividend+1,w,c
  3247  0014D4  A0D8               	btfss	status,0,c
  3248  0014D6  D004               	goto	i2l1701
  3249  0014D8  5003               	movf	i2___awmod@divisor,w,c
  3250  0014DA  5E01               	subwf	i2___awmod@dividend,f,c
  3251  0014DC  5004               	movf	i2___awmod@divisor+1,w,c
  3252  0014DE  5A02               	subwfb	i2___awmod@dividend+1,f,c
  3253  0014E0                     i2l1701:
  3254  0014E0  90D8               	bcf	status,0,c
  3255  0014E2  3204               	rrcf	i2___awmod@divisor+1,f,c
  3256  0014E4  3203               	rrcf	i2___awmod@divisor,f,c
  3257  0014E6  2E05               	decfsz	i2___awmod@counter,f,c
  3258  0014E8  D7F1               	goto	i2l1697
  3259  0014EA                     i2l1705:
  3260  0014EA  5006               	movf	i2___awmod@sign,w,c
  3261  0014EC  B4D8               	btfsc	status,2,c
  3262  0014EE  D004               	goto	i2l1709
  3263  0014F0  6C01               	negf	i2___awmod@dividend,c
  3264  0014F2  1E02               	comf	i2___awmod@dividend+1,f,c
  3265  0014F4  B0D8               	btfsc	status,0,c
  3266  0014F6  2A02               	incf	i2___awmod@dividend+1,f,c
  3267  0014F8                     i2l1709:
  3268  0014F8  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  3269  0014FC  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  3270  001500  0012               	return	
  3271  001502                     __end_ofi2___awmod:
  3272                           	opt stack 0
  3273                           pclatu	equ	0xFFB
  3274                           pclath	equ	0xFFA
  3275                           tblptru	equ	0xFF8
  3276                           tblptrh	equ	0xFF7
  3277                           tblptrl	equ	0xFF6
  3278                           tablat	equ	0xFF5
  3279                           prodh	equ	0xFF4
  3280                           prodl	equ	0xFF3
  3281                           intcon	equ	0xFF2
  3282                           intcon2	equ	0xFF1
  3283                           intcon3	equ	0xFF0
  3284                           indf0	equ	0xFEF
  3285                           postinc0	equ	0xFEE
  3286                           fsr0h	equ	0xFEA
  3287                           fsr0l	equ	0xFE9
  3288                           wreg	equ	0xFE8
  3289                           postdec1	equ	0xFE5
  3290                           fsr1h	equ	0xFE2
  3291                           fsr1l	equ	0xFE1
  3292                           indf2	equ	0xFDF
  3293                           fsr2h	equ	0xFDA
  3294                           fsr2l	equ	0xFD9
  3295                           status	equ	0xFD8
  3296                           
  3297 ;; *************** function i2___awdiv *****************
  3298 ;; Defined at:
  3299 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  3300 ;; Parameters:    Size  Location     Type
  3301 ;;  dividend        2    6[COMRAM] int 
  3302 ;;  divisor         2    8[COMRAM] int 
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;  __awdiv         2   12[COMRAM] int 
  3305 ;;  __awdiv         1   11[COMRAM] unsigned char 
  3306 ;;  __awdiv         1   10[COMRAM] unsigned char 
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  2    6[COMRAM] int 
  3309 ;; Registers used:
  3310 ;;		wreg, status,2, status,0
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3316 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3317 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3319 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3320 ;;Total ram usage:        8 bytes
  3321 ;; Hardware stack levels used:    1
  3322 ;; This function calls:
  3323 ;;		Nothing
  3324 ;; This function is called by:
  3325 ;;		_searched
  3326 ;;		i2_LCDWriteInt
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           	psect	text24
  3331  00131E                     __ptext24:
  3332                           	opt stack 0
  3333  00131E                     i2___awdiv:
  3334                           	opt stack 20
  3335                           
  3336                           ;incstack = 0
  3337  00131E  0E00               	movlw	0
  3338  001320  6E0C               	movwf	i2___awdiv@sign,c
  3339  001322  AE0A               	btfss	i2___awdiv@divisor+1,7,c
  3340  001324  D006               	goto	i2l1641
  3341  001326  6C09               	negf	i2___awdiv@divisor,c
  3342  001328  1E0A               	comf	i2___awdiv@divisor+1,f,c
  3343  00132A  B0D8               	btfsc	status,0,c
  3344  00132C  2A0A               	incf	i2___awdiv@divisor+1,f,c
  3345  00132E  0E01               	movlw	1
  3346  001330  6E0C               	movwf	i2___awdiv@sign,c
  3347  001332                     i2l1641:
  3348  001332  AE08               	btfss	i2___awdiv@dividend+1,7,c
  3349  001334  D006               	goto	i2l1647
  3350  001336  6C07               	negf	i2___awdiv@dividend,c
  3351  001338  1E08               	comf	i2___awdiv@dividend+1,f,c
  3352  00133A  B0D8               	btfsc	status,0,c
  3353  00133C  2A08               	incf	i2___awdiv@dividend+1,f,c
  3354  00133E  0E01               	movlw	1
  3355  001340  1A0C               	xorwf	i2___awdiv@sign,f,c
  3356  001342                     i2l1647:
  3357  001342  0E00               	movlw	0
  3358  001344  6E0E               	movwf	i2___awdiv@quotient+1,c
  3359  001346  0E00               	movlw	0
  3360  001348  6E0D               	movwf	i2___awdiv@quotient,c
  3361  00134A  5009               	movf	i2___awdiv@divisor,w,c
  3362  00134C  100A               	iorwf	i2___awdiv@divisor+1,w,c
  3363  00134E  B4D8               	btfsc	status,2,c
  3364  001350  D01C               	goto	i2l1669
  3365  001352  0E01               	movlw	1
  3366  001354  6E0B               	movwf	i2___awdiv@counter,c
  3367  001356  D004               	goto	i2l1655
  3368  001358                     i2l1653:
  3369  001358  90D8               	bcf	status,0,c
  3370  00135A  3609               	rlcf	i2___awdiv@divisor,f,c
  3371  00135C  360A               	rlcf	i2___awdiv@divisor+1,f,c
  3372  00135E  2A0B               	incf	i2___awdiv@counter,f,c
  3373  001360                     i2l1655:
  3374  001360  AE0A               	btfss	i2___awdiv@divisor+1,7,c
  3375  001362  D7FA               	goto	i2l1653
  3376  001364                     i2l1657:
  3377  001364  90D8               	bcf	status,0,c
  3378  001366  360D               	rlcf	i2___awdiv@quotient,f,c
  3379  001368  360E               	rlcf	i2___awdiv@quotient+1,f,c
  3380  00136A  5009               	movf	i2___awdiv@divisor,w,c
  3381  00136C  5C07               	subwf	i2___awdiv@dividend,w,c
  3382  00136E  500A               	movf	i2___awdiv@divisor+1,w,c
  3383  001370  5808               	subwfb	i2___awdiv@dividend+1,w,c
  3384  001372  A0D8               	btfss	status,0,c
  3385  001374  D005               	goto	i2l1665
  3386  001376  5009               	movf	i2___awdiv@divisor,w,c
  3387  001378  5E07               	subwf	i2___awdiv@dividend,f,c
  3388  00137A  500A               	movf	i2___awdiv@divisor+1,w,c
  3389  00137C  5A08               	subwfb	i2___awdiv@dividend+1,f,c
  3390  00137E  800D               	bsf	i2___awdiv@quotient,0,c
  3391  001380                     i2l1665:
  3392  001380  90D8               	bcf	status,0,c
  3393  001382  320A               	rrcf	i2___awdiv@divisor+1,f,c
  3394  001384  3209               	rrcf	i2___awdiv@divisor,f,c
  3395  001386  2E0B               	decfsz	i2___awdiv@counter,f,c
  3396  001388  D7ED               	goto	i2l1657
  3397  00138A                     i2l1669:
  3398  00138A  500C               	movf	i2___awdiv@sign,w,c
  3399  00138C  B4D8               	btfsc	status,2,c
  3400  00138E  D004               	goto	i2l1673
  3401  001390  6C0D               	negf	i2___awdiv@quotient,c
  3402  001392  1E0E               	comf	i2___awdiv@quotient+1,f,c
  3403  001394  B0D8               	btfsc	status,0,c
  3404  001396  2A0E               	incf	i2___awdiv@quotient+1,f,c
  3405  001398                     i2l1673:
  3406  001398  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
  3407  00139C  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  3408  0013A0  0012               	return	
  3409  0013A2                     __end_ofi2___awdiv:
  3410                           	opt stack 0
  3411                           pclatu	equ	0xFFB
  3412                           pclath	equ	0xFFA
  3413                           tblptru	equ	0xFF8
  3414                           tblptrh	equ	0xFF7
  3415                           tblptrl	equ	0xFF6
  3416                           tablat	equ	0xFF5
  3417                           prodh	equ	0xFF4
  3418                           prodl	equ	0xFF3
  3419                           intcon	equ	0xFF2
  3420                           intcon2	equ	0xFF1
  3421                           intcon3	equ	0xFF0
  3422                           indf0	equ	0xFEF
  3423                           postinc0	equ	0xFEE
  3424                           fsr0h	equ	0xFEA
  3425                           fsr0l	equ	0xFE9
  3426                           wreg	equ	0xFE8
  3427                           postdec1	equ	0xFE5
  3428                           fsr1h	equ	0xFE2
  3429                           fsr1l	equ	0xFE1
  3430                           indf2	equ	0xFDF
  3431                           fsr2h	equ	0xFDA
  3432                           fsr2l	equ	0xFD9
  3433                           status	equ	0xFD8
  3434                           
  3435 ;; *************** function i2_LCDWriteStr *****************
  3436 ;; Defined at:
  3437 ;;		line 193 in file "lcd.c"
  3438 ;; Parameters:    Size  Location     Type
  3439 ;;  string          2    6[COMRAM] PTR const unsigned char 
  3440 ;;		 -> LCDWriteInt@string(3), LCDWriteFloat@string(5), LCDWriteHexa@string(3), STR_4(5), 
  3441 ;;		 -> STR_3(5), STR_2(11), STR_1(5), 
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;  LCDWriteStr     1   10[COMRAM] unsigned char 
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  1    wreg      void 
  3446 ;; Registers used:
  3447 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3453 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3454 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3455 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3456 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;Total ram usage:        5 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; Hardware stack levels required when called:    3
  3460 ;; This function calls:
  3461 ;;		i2_LCDPutChar
  3462 ;; This function is called by:
  3463 ;;		_synchronize
  3464 ;;		_ISR
  3465 ;;		i2_show_debug
  3466 ;;		i2_LCDWriteInt
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           	psect	text25
  3471  0013A2                     __ptext25:
  3472                           	opt stack 0
  3473  0013A2                     i2_LCDWriteStr:
  3474                           	opt stack 18
  3475                           
  3476                           ;lcd.c: 195: UINT8_T i = 0;
  3477                           
  3478                           ;incstack = 0
  3479  0013A2  0E00               	movlw	0
  3480  0013A4  6E0B               	movwf	i2LCDWriteStr@i,c
  3481                           
  3482                           ;lcd.c: 197: while (string[i])
  3483  0013A6  D01E               	goto	i2l1631
  3484  0013A8                     i2l1627:
  3485                           
  3486                           ;lcd.c: 198: LCDPutChar(string[i++]);
  3487  0013A8  500B               	movf	i2LCDWriteStr@i,w,c
  3488  0013AA  0D01               	mullw	1
  3489  0013AC  C007  F009         	movff	i2LCDWriteStr@string,??i2_LCDWriteStr
  3490  0013B0  C008  F00A         	movff	i2LCDWriteStr@string+1,??i2_LCDWriteStr+1
  3491  0013B4  50F3               	movf	prodl,w,c
  3492  0013B6  2609               	addwf	??i2_LCDWriteStr,f,c
  3493  0013B8  50F4               	movf	prodh,w,c
  3494  0013BA  220A               	addwfc	??i2_LCDWriteStr+1,f,c
  3495  0013BC  C009  FFF6         	movff	??i2_LCDWriteStr,tblptrl
  3496  0013C0  C00A  FFF7         	movff	??i2_LCDWriteStr+1,tblptrh
  3497  0013C4  0E00               	movlw	low (__smallconst shr (0+16))
  3498  0013C6  6EF8               	movwf	tblptru,c
  3499  0013C8  0E0F               	movlw	(high __ramtop+-1)
  3500  0013CA  64F7               	cpfsgt	tblptrh,c
  3501  0013CC  D003               	bra	i2u89_47
  3502  0013CE  0008               	tblrd		*
  3503  0013D0  50F5               	movf	tablat,w,c
  3504  0013D2  D005               	bra	i2u89_40
  3505  0013D4                     i2u89_47:
  3506  0013D4  CFF6 FFE9          	movff	tblptrl,fsr0l
  3507  0013D8  CFF7 FFEA          	movff	tblptrh,fsr0h
  3508  0013DC  50EF               	movf	indf0,w,c
  3509  0013DE                     i2u89_40:
  3510  0013DE  EC84  F00C         	call	i2_LCDPutChar
  3511  0013E2  2A0B               	incf	i2LCDWriteStr@i,f,c
  3512  0013E4                     i2l1631:
  3513  0013E4  500B               	movf	i2LCDWriteStr@i,w,c
  3514  0013E6  0D01               	mullw	1
  3515  0013E8  C007  F009         	movff	i2LCDWriteStr@string,??i2_LCDWriteStr
  3516  0013EC  C008  F00A         	movff	i2LCDWriteStr@string+1,??i2_LCDWriteStr+1
  3517  0013F0  50F3               	movf	prodl,w,c
  3518  0013F2  2609               	addwf	??i2_LCDWriteStr,f,c
  3519  0013F4  50F4               	movf	prodh,w,c
  3520  0013F6  220A               	addwfc	??i2_LCDWriteStr+1,f,c
  3521  0013F8  C009  FFF6         	movff	??i2_LCDWriteStr,tblptrl
  3522  0013FC  C00A  FFF7         	movff	??i2_LCDWriteStr+1,tblptrh
  3523  001400  0E00               	movlw	low (__smallconst shr (0+16))
  3524  001402  6EF8               	movwf	tblptru,c
  3525  001404  0E0F               	movlw	(high __ramtop+-1)
  3526  001406  64F7               	cpfsgt	tblptrh,c
  3527  001408  D003               	bra	i2u90_47
  3528  00140A  0008               	tblrd		*
  3529  00140C  50F5               	movf	tablat,w,c
  3530  00140E  D005               	bra	i2u90_40
  3531  001410                     i2u90_47:
  3532  001410  CFF6 FFE9          	movff	tblptrl,fsr0l
  3533  001414  CFF7 FFEA          	movff	tblptrh,fsr0h
  3534  001418  50EF               	movf	indf0,w,c
  3535  00141A                     i2u90_40:
  3536  00141A  0900               	iorlw	0
  3537  00141C  B4D8               	btfsc	status,2,c
  3538  00141E  0012               	return	
  3539  001420  D7C3               	goto	i2l1627
  3540  001422                     __end_ofi2_LCDWriteStr:
  3541                           	opt stack 0
  3542                           pclatu	equ	0xFFB
  3543                           pclath	equ	0xFFA
  3544                           tblptru	equ	0xFF8
  3545                           tblptrh	equ	0xFF7
  3546                           tblptrl	equ	0xFF6
  3547                           tablat	equ	0xFF5
  3548                           prodh	equ	0xFF4
  3549                           prodl	equ	0xFF3
  3550                           intcon	equ	0xFF2
  3551                           intcon2	equ	0xFF1
  3552                           intcon3	equ	0xFF0
  3553                           indf0	equ	0xFEF
  3554                           postinc0	equ	0xFEE
  3555                           fsr0h	equ	0xFEA
  3556                           fsr0l	equ	0xFE9
  3557                           wreg	equ	0xFE8
  3558                           postdec1	equ	0xFE5
  3559                           fsr1h	equ	0xFE2
  3560                           fsr1l	equ	0xFE1
  3561                           indf2	equ	0xFDF
  3562                           fsr2h	equ	0xFDA
  3563                           fsr2l	equ	0xFD9
  3564                           status	equ	0xFD8
  3565                           
  3566 ;; *************** function i2_LCDPutChar *****************
  3567 ;; Defined at:
  3568 ;;		line 180 in file "lcd.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;  data            1    wreg     unsigned char 
  3571 ;; Auto vars:     Size  Location     Type
  3572 ;;  data            1    5[COMRAM] unsigned char 
  3573 ;; Return value:  Size  Location     Type
  3574 ;;                  1    wreg      void 
  3575 ;; Registers used:
  3576 ;;		wreg, status,2, status,0, cstack
  3577 ;; Tracked objects:
  3578 ;;		On entry : 0/0
  3579 ;;		On exit  : 0/0
  3580 ;;		Unchanged: 0/0
  3581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3583 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3585 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3586 ;;Total ram usage:        1 bytes
  3587 ;; Hardware stack levels used:    1
  3588 ;; Hardware stack levels required when called:    2
  3589 ;; This function calls:
  3590 ;;		i2_WaitLCD
  3591 ;;		i2_WriteByte
  3592 ;; This function is called by:
  3593 ;;		i2_LCDWriteStr
  3594 ;; This function uses a non-reentrant model
  3595 ;;
  3596                           
  3597                           	psect	text26
  3598  001908                     __ptext26:
  3599                           	opt stack 0
  3600  001908                     i2_LCDPutChar:
  3601                           	opt stack 18
  3602                           
  3603                           ;incstack = 0
  3604                           ;i2LCDPutChar@data stored from wreg
  3605  001908  6E06               	movwf	i2LCDPutChar@data,c
  3606                           
  3607                           ;lcd.c: 182: WriteByte(0, data);
  3608  00190A  C006  F004         	movff	i2LCDPutChar@data,i2WriteByte@data
  3609  00190E  0E00               	movlw	0
  3610  001910  EC65  F00C         	call	i2_WriteByte
  3611                           
  3612                           ;lcd.c: 183: WaitLCD();
  3613  001914  EC8D  F00C         	call	i2_WaitLCD	;wreg free
  3614  001918  0012               	return		;funcret
  3615  00191A                     __end_ofi2_LCDPutChar:
  3616                           	opt stack 0
  3617                           pclatu	equ	0xFFB
  3618                           pclath	equ	0xFFA
  3619                           tblptru	equ	0xFF8
  3620                           tblptrh	equ	0xFF7
  3621                           tblptrl	equ	0xFF6
  3622                           tablat	equ	0xFF5
  3623                           prodh	equ	0xFF4
  3624                           prodl	equ	0xFF3
  3625                           intcon	equ	0xFF2
  3626                           intcon2	equ	0xFF1
  3627                           intcon3	equ	0xFF0
  3628                           indf0	equ	0xFEF
  3629                           postinc0	equ	0xFEE
  3630                           fsr0h	equ	0xFEA
  3631                           fsr0l	equ	0xFE9
  3632                           wreg	equ	0xFE8
  3633                           postdec1	equ	0xFE5
  3634                           fsr1h	equ	0xFE2
  3635                           fsr1l	equ	0xFE1
  3636                           indf2	equ	0xFDF
  3637                           fsr2h	equ	0xFDA
  3638                           fsr2l	equ	0xFD9
  3639                           status	equ	0xFD8
  3640                           
  3641 ;; *************** function i2_LCDGoto *****************
  3642 ;; Defined at:
  3643 ;;		line 171 in file "lcd.c"
  3644 ;; Parameters:    Size  Location     Type
  3645 ;;  column          1    wreg     unsigned char 
  3646 ;;  row             1    5[COMRAM] unsigned char 
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;  column          1    8[COMRAM] unsigned char 
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		wreg, status,2, status,0, cstack
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3658 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3661 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3662 ;;Total ram usage:        6 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; Hardware stack levels required when called:    2
  3665 ;; This function calls:
  3666 ;;		i2_WaitLCD
  3667 ;;		i2_WriteByte
  3668 ;; This function is called by:
  3669 ;;		_synchronize
  3670 ;;		_ISR
  3671 ;;		i2_show_debug
  3672 ;;		i2_LCDWriteInt
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           	psect	text27
  3677  001728                     __ptext27:
  3678                           	opt stack 0
  3679  001728                     i2_LCDGoto:
  3680                           	opt stack 18
  3681                           
  3682                           ;incstack = 0
  3683                           ;i2LCDGoto@column stored from wreg
  3684  001728  6E09               	movwf	i2LCDGoto@column,c
  3685                           
  3686                           ;lcd.c: 173: if ((row > (2 - 1)) || (column > (16 - 1)))
  3687  00172A  0E02               	movlw	2
  3688  00172C  6006               	cpfslt	i2LCDGoto@row,c
  3689  00172E  0012               	return	
  3690  001730  0E0F               	movlw	15
  3691  001732  6409               	cpfsgt	i2LCDGoto@column,c
  3692  001734  D001               	goto	i2l1615
  3693  001736  0012               	return	
  3694  001738                     i2l1615:
  3695                           
  3696                           ;lcd.c: 176: WriteByte(1, (row == 1) ? (0xC0 | column) : (0x80 | column));
  3697  001738  0406               	decf	i2LCDGoto@row,w,c
  3698  00173A  B4D8               	btfsc	status,2,c
  3699  00173C  D002               	goto	i2l1619
  3700  00173E  0E80               	movlw	128
  3701  001740  D001               	goto	L3
  3702  001742                     i2l1619:
  3703  001742  0EC0               	movlw	192
  3704  001744                     L3:
  3705  001744  C009  F007         	movff	i2LCDGoto@column,??i2_LCDGoto
  3706  001748  6A08               	clrf	(??i2_LCDGoto+1)& (0+255),c
  3707  00174A  1007               	iorwf	??i2_LCDGoto,w,c
  3708  00174C  6E0A               	movwf	i2_LCDGoto$794,c
  3709  00174E  5008               	movf	??i2_LCDGoto+1,w,c
  3710  001750  6E0B               	movwf	i2_LCDGoto$794+1,c
  3711  001752  C00A  F004         	movff	i2_LCDGoto$794,i2WriteByte@data
  3712  001756  0E01               	movlw	1
  3713  001758  EC65  F00C         	call	i2_WriteByte
  3714                           
  3715                           ;lcd.c: 177: WaitLCD();
  3716  00175C  EC8D  F00C         	call	i2_WaitLCD	;wreg free
  3717  001760  0012               	return		;funcret
  3718  001762                     __end_ofi2_LCDGoto:
  3719                           	opt stack 0
  3720                           pclatu	equ	0xFFB
  3721                           pclath	equ	0xFFA
  3722                           tblptru	equ	0xFF8
  3723                           tblptrh	equ	0xFF7
  3724                           tblptrl	equ	0xFF6
  3725                           tablat	equ	0xFF5
  3726                           prodh	equ	0xFF4
  3727                           prodl	equ	0xFF3
  3728                           intcon	equ	0xFF2
  3729                           intcon2	equ	0xFF1
  3730                           intcon3	equ	0xFF0
  3731                           indf0	equ	0xFEF
  3732                           postinc0	equ	0xFEE
  3733                           fsr0h	equ	0xFEA
  3734                           fsr0l	equ	0xFE9
  3735                           wreg	equ	0xFE8
  3736                           postdec1	equ	0xFE5
  3737                           fsr1h	equ	0xFE2
  3738                           fsr1l	equ	0xFE1
  3739                           indf2	equ	0xFDF
  3740                           fsr2h	equ	0xFDA
  3741                           fsr2l	equ	0xFD9
  3742                           status	equ	0xFD8
  3743                           
  3744 ;; *************** function i2_WriteByte *****************
  3745 ;; Defined at:
  3746 ;;		line 83 in file "lcd.c"
  3747 ;; Parameters:    Size  Location     Type
  3748 ;;  cmd             1    wreg     unsigned char 
  3749 ;;  data            1    3[COMRAM] unsigned char 
  3750 ;; Auto vars:     Size  Location     Type
  3751 ;;  cmd             1    4[COMRAM] unsigned char 
  3752 ;; Return value:  Size  Location     Type
  3753 ;;                  1    wreg      void 
  3754 ;; Registers used:
  3755 ;;		wreg, status,2, status,0, cstack
  3756 ;; Tracked objects:
  3757 ;;		On entry : 0/0
  3758 ;;		On exit  : 0/0
  3759 ;;		Unchanged: 0/0
  3760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3761 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3762 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;Total ram usage:        2 bytes
  3766 ;; Hardware stack levels used:    1
  3767 ;; Hardware stack levels required when called:    1
  3768 ;; This function calls:
  3769 ;;		i2_WriteNibble
  3770 ;; This function is called by:
  3771 ;;		i2_LCDGoto
  3772 ;;		i2_LCDPutChar
  3773 ;; This function uses a non-reentrant model
  3774 ;;
  3775                           
  3776                           	psect	text28
  3777  0018CA                     __ptext28:
  3778                           	opt stack 0
  3779  0018CA                     i2_WriteByte:
  3780                           	opt stack 18
  3781                           
  3782                           ;incstack = 0
  3783                           ;i2WriteByte@cmd stored from wreg
  3784  0018CA  6E05               	movwf	i2WriteByte@cmd,c
  3785                           
  3786                           ;lcd.c: 85: WriteNibble(cmd, data >> 4);
  3787  0018CC  3804               	swapf	i2WriteByte@data,w,c
  3788  0018CE  0B0F               	andlw	15
  3789  0018D0  6E01               	movwf	i2WriteNibble@data,c
  3790  0018D2  5005               	movf	i2WriteByte@cmd,w,c
  3791  0018D4  EC51  F00B         	call	i2_WriteNibble
  3792                           
  3793                           ;lcd.c: 86: WriteNibble(cmd, data);
  3794  0018D8  C004  F001         	movff	i2WriteByte@data,i2WriteNibble@data
  3795  0018DC  5005               	movf	i2WriteByte@cmd,w,c
  3796  0018DE  EC51  F00B         	call	i2_WriteNibble
  3797  0018E2  0012               	return		;funcret
  3798  0018E4                     __end_ofi2_WriteByte:
  3799                           	opt stack 0
  3800                           pclatu	equ	0xFFB
  3801                           pclath	equ	0xFFA
  3802                           tblptru	equ	0xFF8
  3803                           tblptrh	equ	0xFF7
  3804                           tblptrl	equ	0xFF6
  3805                           tablat	equ	0xFF5
  3806                           prodh	equ	0xFF4
  3807                           prodl	equ	0xFF3
  3808                           intcon	equ	0xFF2
  3809                           intcon2	equ	0xFF1
  3810                           intcon3	equ	0xFF0
  3811                           indf0	equ	0xFEF
  3812                           postinc0	equ	0xFEE
  3813                           fsr0h	equ	0xFEA
  3814                           fsr0l	equ	0xFE9
  3815                           wreg	equ	0xFE8
  3816                           postdec1	equ	0xFE5
  3817                           fsr1h	equ	0xFE2
  3818                           fsr1l	equ	0xFE1
  3819                           indf2	equ	0xFDF
  3820                           fsr2h	equ	0xFDA
  3821                           fsr2l	equ	0xFD9
  3822                           status	equ	0xFD8
  3823                           
  3824 ;; *************** function i2_WriteNibble *****************
  3825 ;; Defined at:
  3826 ;;		line 66 in file "lcd.c"
  3827 ;; Parameters:    Size  Location     Type
  3828 ;;  cmd             1    wreg     unsigned char 
  3829 ;;  data            1    0[COMRAM] unsigned char 
  3830 ;; Auto vars:     Size  Location     Type
  3831 ;;  cmd             1    2[COMRAM] unsigned char 
  3832 ;; Return value:  Size  Location     Type
  3833 ;;                  1    wreg      void 
  3834 ;; Registers used:
  3835 ;;		wreg, status,2, status,0
  3836 ;; Tracked objects:
  3837 ;;		On entry : 0/0
  3838 ;;		On exit  : 0/0
  3839 ;;		Unchanged: 0/0
  3840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3841 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3842 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3843 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3844 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3845 ;;Total ram usage:        3 bytes
  3846 ;; Hardware stack levels used:    1
  3847 ;; This function calls:
  3848 ;;		Nothing
  3849 ;; This function is called by:
  3850 ;;		i2_WriteByte
  3851 ;; This function uses a non-reentrant model
  3852 ;;
  3853                           
  3854                           	psect	text29
  3855  0016A2                     __ptext29:
  3856                           	opt stack 0
  3857  0016A2                     i2_WriteNibble:
  3858                           	opt stack 18
  3859                           
  3860                           ;incstack = 0
  3861                           ;i2WriteNibble@cmd stored from wreg
  3862  0016A2  6E03               	movwf	i2WriteNibble@cmd,c
  3863                           
  3864                           ;lcd.c: 68: LATDbits.LATD4 = (cmd ? 0 : 1);
  3865  0016A4  5003               	movf	i2WriteNibble@cmd,w,c
  3866  0016A6  A4D8               	btfss	status,2,c
  3867  0016A8  D003               	goto	i2u65_40
  3868  0016AA  6A02               	clrf	??i2_WriteNibble& (0+255),c
  3869  0016AC  2A02               	incf	??i2_WriteNibble& (0+255),f,c
  3870  0016AE  D001               	goto	i2u66_48
  3871  0016B0                     i2u65_40:
  3872  0016B0  6A02               	clrf	??i2_WriteNibble& (0+255),c
  3873  0016B2                     i2u66_48:
  3874  0016B2  3A02               	swapf	??i2_WriteNibble,f,c
  3875  0016B4  508C               	movf	3980,w,c	;volatile
  3876  0016B6  1802               	xorwf	??i2_WriteNibble,w,c
  3877  0016B8  0BEF               	andlw	-17
  3878  0016BA  1802               	xorwf	??i2_WriteNibble,w,c
  3879  0016BC  6E8C               	movwf	3980,c	;volatile
  3880                           
  3881                           ;lcd.c: 69: LATDbits.LATD5 = 0;
  3882  0016BE  9A8C               	bcf	3980,5,c	;volatile
  3883                           
  3884                           ;lcd.c: 70: LATDbits.LATD6 = 1;
  3885  0016C0  8C8C               	bsf	3980,6,c	;volatile
  3886                           
  3887                           ;lcd.c: 72: LATDbits.LATD0 = LATDbits.LATD1 = LATDbits.LATD2 = LATDbits.LATD3 = 0;
  3888  0016C2  968C               	bcf	3980,3,c	;volatile
  3889  0016C4  948C               	bcf	3980,2,c	;volatile
  3890  0016C6  928C               	bcf	3980,1,c	;volatile
  3891  0016C8  908C               	bcf	3980,0,c	;volatile
  3892                           
  3893                           ;lcd.c: 73: __nop();
  3894  0016CA  F000               	nop	
  3895                           
  3896                           ;lcd.c: 74: __nop();
  3897  0016CC  F000               	nop	
  3898                           
  3899                           ;lcd.c: 76: LATD = (LATD & 0xF0) | (data & 0x0F);
  3900  0016CE  C001  F002         	movff	i2WriteNibble@data,??i2_WriteNibble
  3901  0016D2  0E0F               	movlw	15
  3902  0016D4  1602               	andwf	??i2_WriteNibble,f,c
  3903  0016D6  508C               	movf	3980,w,c	;volatile
  3904  0016D8  0BF0               	andlw	240
  3905  0016DA  1002               	iorwf	??i2_WriteNibble,w,c
  3906  0016DC  6E8C               	movwf	3980,c	;volatile
  3907                           
  3908                           ;lcd.c: 77: __nop();
  3909  0016DE  F000               	nop	
  3910                           
  3911                           ;lcd.c: 78: __nop();
  3912  0016E0  F000               	nop	
  3913                           
  3914                           ;lcd.c: 80: LATDbits.LATD6 = 0;
  3915  0016E2  9C8C               	bcf	3980,6,c	;volatile
  3916  0016E4  0012               	return		;funcret
  3917  0016E6                     __end_ofi2_WriteNibble:
  3918                           	opt stack 0
  3919                           pclatu	equ	0xFFB
  3920                           pclath	equ	0xFFA
  3921                           tblptru	equ	0xFF8
  3922                           tblptrh	equ	0xFF7
  3923                           tblptrl	equ	0xFF6
  3924                           tablat	equ	0xFF5
  3925                           prodh	equ	0xFF4
  3926                           prodl	equ	0xFF3
  3927                           intcon	equ	0xFF2
  3928                           intcon2	equ	0xFF1
  3929                           intcon3	equ	0xFF0
  3930                           indf0	equ	0xFEF
  3931                           postinc0	equ	0xFEE
  3932                           fsr0h	equ	0xFEA
  3933                           fsr0l	equ	0xFE9
  3934                           wreg	equ	0xFE8
  3935                           postdec1	equ	0xFE5
  3936                           fsr1h	equ	0xFE2
  3937                           fsr1l	equ	0xFE1
  3938                           indf2	equ	0xFDF
  3939                           fsr2h	equ	0xFDA
  3940                           fsr2l	equ	0xFD9
  3941                           status	equ	0xFD8
  3942                           
  3943 ;; *************** function i2_WaitLCD *****************
  3944 ;; Defined at:
  3945 ;;		line 52 in file "lcd.c"
  3946 ;; Parameters:    Size  Location     Type
  3947 ;;		None
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;  WaitLCD         1    1[COMRAM] unsigned char 
  3950 ;; Return value:  Size  Location     Type
  3951 ;;                  1    wreg      void 
  3952 ;; Registers used:
  3953 ;;		wreg, status,2, status,0, cstack
  3954 ;; Tracked objects:
  3955 ;;		On entry : 0/0
  3956 ;;		On exit  : 0/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3960 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3962 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3963 ;;Total ram usage:        1 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:    1
  3966 ;; This function calls:
  3967 ;;		i2_ReadByte
  3968 ;; This function is called by:
  3969 ;;		i2_LCDGoto
  3970 ;;		i2_LCDPutChar
  3971 ;; This function uses a non-reentrant model
  3972 ;;
  3973                           
  3974                           	psect	text30
  3975  00191A                     __ptext30:
  3976                           	opt stack 0
  3977  00191A                     i2_WaitLCD:
  3978                           	opt stack 18
  3979                           
  3980                           ;lcd.c: 54: UINT8_T status;
  3981                           ;lcd.c: 56: LATDbits.LATD4 = 0;
  3982                           
  3983                           ;incstack = 0
  3984  00191A  988C               	bcf	3980,4,c	;volatile
  3985                           
  3986                           ;lcd.c: 57: LATDbits.LATD5 = 1;
  3987  00191C  8A8C               	bsf	3980,5,c	;volatile
  3988  00191E                     i2l1493:
  3989                           
  3990                           ;lcd.c: 60: status = ReadByte();
  3991  00191E  ECE3  F00B         	call	i2_ReadByte	;wreg free
  3992  001922  6E02               	movwf	i2WaitLCD@status,c
  3993                           
  3994                           ;lcd.c: 61: } while (status & 0x80);
  3995  001924  BE02               	btfsc	i2WaitLCD@status,7,c
  3996  001926  D7FB               	goto	i2l1493
  3997                           
  3998                           ;lcd.c: 63: LATDbits.LATD5 = 0;
  3999  001928  9A8C               	bcf	3980,5,c	;volatile
  4000  00192A  0012               	return		;funcret
  4001  00192C                     __end_ofi2_WaitLCD:
  4002                           	opt stack 0
  4003                           pclatu	equ	0xFFB
  4004                           pclath	equ	0xFFA
  4005                           tblptru	equ	0xFF8
  4006                           tblptrh	equ	0xFF7
  4007                           tblptrl	equ	0xFF6
  4008                           tablat	equ	0xFF5
  4009                           prodh	equ	0xFF4
  4010                           prodl	equ	0xFF3
  4011                           intcon	equ	0xFF2
  4012                           intcon2	equ	0xFF1
  4013                           intcon3	equ	0xFF0
  4014                           indf0	equ	0xFEF
  4015                           postinc0	equ	0xFEE
  4016                           fsr0h	equ	0xFEA
  4017                           fsr0l	equ	0xFE9
  4018                           wreg	equ	0xFE8
  4019                           postdec1	equ	0xFE5
  4020                           fsr1h	equ	0xFE2
  4021                           fsr1l	equ	0xFE1
  4022                           indf2	equ	0xFDF
  4023                           fsr2h	equ	0xFDA
  4024                           fsr2l	equ	0xFD9
  4025                           status	equ	0xFD8
  4026                           
  4027 ;; *************** function i2_ReadByte *****************
  4028 ;; Defined at:
  4029 ;;		line 21 in file "lcd.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;		None
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;  ReadByte        1    0[COMRAM] unsigned char 
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  1    wreg      unsigned char 
  4036 ;; Registers used:
  4037 ;;		wreg, status,2, status,0
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4044 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4046 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4047 ;;Total ram usage:        1 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; This function calls:
  4050 ;;		Nothing
  4051 ;; This function is called by:
  4052 ;;		i2_WaitLCD
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           	psect	text31
  4057  0017C6                     __ptext31:
  4058                           	opt stack 0
  4059  0017C6                     i2_ReadByte:
  4060                           	opt stack 18
  4061                           
  4062                           ;lcd.c: 23: UINT8_T status;
  4063                           ;lcd.c: 25: TRISDbits.TRISD0 = 1;
  4064                           
  4065                           ;incstack = 0
  4066  0017C6  8095               	bsf	3989,0,c	;volatile
  4067                           
  4068                           ;lcd.c: 26: TRISDbits.TRISD1 = 1;
  4069  0017C8  8295               	bsf	3989,1,c	;volatile
  4070                           
  4071                           ;lcd.c: 27: TRISDbits.TRISD2 = 1;
  4072  0017CA  8495               	bsf	3989,2,c	;volatile
  4073                           
  4074                           ;lcd.c: 28: TRISDbits.TRISD3 = 1;
  4075  0017CC  8695               	bsf	3989,3,c	;volatile
  4076                           
  4077                           ;lcd.c: 30: LATDbits.LATD6 = 1;
  4078  0017CE  8C8C               	bsf	3980,6,c	;volatile
  4079                           
  4080                           ;lcd.c: 31: __nop();
  4081  0017D0  F000               	nop	
  4082                           
  4083                           ;lcd.c: 32: __nop();
  4084  0017D2  F000               	nop	
  4085                           
  4086                           ;lcd.c: 34: status = PORTD << 4;
  4087  0017D4  3883               	swapf	3971,w,c	;volatile
  4088  0017D6  0BF0               	andlw	240
  4089  0017D8  6E01               	movwf	i2ReadByte@status,c
  4090                           
  4091                           ;lcd.c: 35: LATDbits.LATD6 = 0;
  4092  0017DA  9C8C               	bcf	3980,6,c	;volatile
  4093                           
  4094                           ;lcd.c: 37: LATDbits.LATD6 = 1;
  4095  0017DC  8C8C               	bsf	3980,6,c	;volatile
  4096                           
  4097                           ;lcd.c: 38: __nop();
  4098  0017DE  F000               	nop	
  4099                           
  4100                           ;lcd.c: 39: __nop();
  4101  0017E0  F000               	nop	
  4102                           
  4103                           ;lcd.c: 41: status |= PORTD & 0x0F;
  4104  0017E2  5083               	movf	3971,w,c	;volatile
  4105  0017E4  0B0F               	andlw	15
  4106  0017E6  1201               	iorwf	i2ReadByte@status,f,c
  4107                           
  4108                           ;lcd.c: 42: LATDbits.LATD6 = 0;
  4109  0017E8  9C8C               	bcf	3980,6,c	;volatile
  4110                           
  4111                           ;lcd.c: 44: TRISDbits.TRISD0 = 0;
  4112  0017EA  9095               	bcf	3989,0,c	;volatile
  4113                           
  4114                           ;lcd.c: 45: TRISDbits.TRISD1 = 0;
  4115  0017EC  9295               	bcf	3989,1,c	;volatile
  4116                           
  4117                           ;lcd.c: 46: TRISDbits.TRISD2 = 0;
  4118  0017EE  9495               	bcf	3989,2,c	;volatile
  4119                           
  4120                           ;lcd.c: 47: TRISDbits.TRISD3 = 0;
  4121  0017F0  9695               	bcf	3989,3,c	;volatile
  4122                           
  4123                           ;lcd.c: 49: return(status);
  4124  0017F2  5001               	movf	i2ReadByte@status,w,c
  4125  0017F4  0012               	return	
  4126  0017F6                     __end_ofi2_ReadByte:
  4127                           	opt stack 0
  4128                           pclatu	equ	0xFFB
  4129                           pclath	equ	0xFFA
  4130                           tblptru	equ	0xFF8
  4131                           tblptrh	equ	0xFF7
  4132                           tblptrl	equ	0xFF6
  4133                           tablat	equ	0xFF5
  4134                           prodh	equ	0xFF4
  4135                           prodl	equ	0xFF3
  4136                           intcon	equ	0xFF2
  4137                           intcon2	equ	0xFF1
  4138                           intcon3	equ	0xFF0
  4139                           indf0	equ	0xFEF
  4140                           postinc0	equ	0xFEE
  4141                           fsr0h	equ	0xFEA
  4142                           fsr0l	equ	0xFE9
  4143                           wreg	equ	0xFE8
  4144                           postdec1	equ	0xFE5
  4145                           fsr1h	equ	0xFE2
  4146                           fsr1l	equ	0xFE1
  4147                           indf2	equ	0xFDF
  4148                           fsr2h	equ	0xFDA
  4149                           fsr2l	equ	0xFD9
  4150                           status	equ	0xFD8
  4151                           pclatu	equ	0xFFB
  4152                           pclath	equ	0xFFA
  4153                           tblptru	equ	0xFF8
  4154                           tblptrh	equ	0xFF7
  4155                           tblptrl	equ	0xFF6
  4156                           tablat	equ	0xFF5
  4157                           prodh	equ	0xFF4
  4158                           prodl	equ	0xFF3
  4159                           intcon	equ	0xFF2
  4160                           intcon2	equ	0xFF1
  4161                           intcon3	equ	0xFF0
  4162                           indf0	equ	0xFEF
  4163                           postinc0	equ	0xFEE
  4164                           fsr0h	equ	0xFEA
  4165                           fsr0l	equ	0xFE9
  4166                           wreg	equ	0xFE8
  4167                           postdec1	equ	0xFE5
  4168                           fsr1h	equ	0xFE2
  4169                           fsr1l	equ	0xFE1
  4170                           indf2	equ	0xFDF
  4171                           fsr2h	equ	0xFDA
  4172                           fsr2l	equ	0xFD9
  4173                           status	equ	0xFD8
  4174                           
  4175                           	psect	rparam
  4176  0000                     pclatu	equ	0xFFB
  4177                           pclath	equ	0xFFA
  4178                           tblptru	equ	0xFF8
  4179                           tblptrh	equ	0xFF7
  4180                           tblptrl	equ	0xFF6
  4181                           tablat	equ	0xFF5
  4182                           prodh	equ	0xFF4
  4183                           prodl	equ	0xFF3
  4184                           intcon	equ	0xFF2
  4185                           intcon2	equ	0xFF1
  4186                           intcon3	equ	0xFF0
  4187                           indf0	equ	0xFEF
  4188                           postinc0	equ	0xFEE
  4189                           fsr0h	equ	0xFEA
  4190                           fsr0l	equ	0xFE9
  4191                           wreg	equ	0xFE8
  4192                           postdec1	equ	0xFE5
  4193                           fsr1h	equ	0xFE2
  4194                           fsr1l	equ	0xFE1
  4195                           indf2	equ	0xFDF
  4196                           fsr2h	equ	0xFDA
  4197                           fsr2l	equ	0xFD9
  4198                           status	equ	0xFD8
  4199                           
  4200                           	psect	temp
  4201  000038                     btemp:
  4202                           	opt stack 0
  4203  000038                     	ds	1
  4204  0000                     int$flags	set	btemp
  4205                           pclatu	equ	0xFFB
  4206                           pclath	equ	0xFFA
  4207                           tblptru	equ	0xFF8
  4208                           tblptrh	equ	0xFF7
  4209                           tblptrl	equ	0xFF6
  4210                           tablat	equ	0xFF5
  4211                           prodh	equ	0xFF4
  4212                           prodl	equ	0xFF3
  4213                           intcon	equ	0xFF2
  4214                           intcon2	equ	0xFF1
  4215                           intcon3	equ	0xFF0
  4216                           indf0	equ	0xFEF
  4217                           postinc0	equ	0xFEE
  4218                           fsr0h	equ	0xFEA
  4219                           fsr0l	equ	0xFE9
  4220                           wreg	equ	0xFE8
  4221                           postdec1	equ	0xFE5
  4222                           fsr1h	equ	0xFE2
  4223                           fsr1l	equ	0xFE1
  4224                           indf2	equ	0xFDF
  4225                           fsr2h	equ	0xFDA
  4226                           fsr2l	equ	0xFD9
  4227                           status	equ	0xFD8


Data Sizes:
    Strings     38
    Constant    0
    Data        4
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      55
    BANK0           160     14      14
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    LCDWriteStr@string	PTR const unsigned char  size(2) Largest target is 11
		 -> LCDWriteInt@string(BANK0[3]), LCDWriteFloat@string(COMRAM[5]), LCDWriteHexa@string(COMRAM[3]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[11]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _init_debug->_LCDWriteStr
    _show_debug->_LCDWriteStr
    _LCDWriteInt->_LCDWriteStr
    _LCDWriteStr->_LCDPutChar
    _LCDPutChar->_WriteByte
    _LCDGoto->_WriteByte
    _LCDInit->_WriteNibble
    _LCDClear->_WriteByte
    _WriteByte->_WriteNibble
    _WaitLCD->_ReadByte

Critical Paths under _ISR in COMRAM

    _ISR->_searched
    _ISR->_synchronize
    _searched->i2___awdiv
    i2_show_debug->i2_LCDWriteInt
    i2_LCDWriteInt->i2___awdiv
    i2___awdiv->i2___awmod
    i2_LCDWriteStr->i2_LCDPutChar
    i2_LCDPutChar->i2_WriteByte
    i2_LCDGoto->i2_WriteByte
    i2_WriteByte->i2_WriteNibble
    i2_WaitLCD->i2_ReadByte

Critical Paths under _main in BANK0

    _show_debug->_LCDWriteInt
    _LCDWriteInt->_LCDGoto

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5   19903
                                              9 BANK0      5     0      5
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0   19903
                         _init_debug
 ---------------------------------------------------------------------------------
 (2) _init_debug                                           0     0      0   19903
                           _LCDClear
                            _LCDGoto
                            _LCDInit
                        _LCDWriteStr
                         _show_debug
 ---------------------------------------------------------------------------------
 (3) _show_debug                                           0     0      0   11856
                            _LCDGoto
                        _LCDWriteInt
                        _LCDWriteStr
 ---------------------------------------------------------------------------------
 (4) _LCDWriteInt                                          6     4      2    6971
                                              3 BANK0      6     4      2
                            _LCDGoto
                        _LCDWriteStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     832
                                             39 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     760
                                             39 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _LCDWriteStr                                          5     3      2    2427
                                             45 COMRAM     3     1      2
                                              0 BANK0      2     2      0
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (5) _LCDPutChar                                           1     1      0    1828
                                             44 COMRAM     1     1      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (5) _LCDGoto                                              6     5      1    2458
                                             44 COMRAM     3     2      1
                                              0 BANK0      3     3      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (3) _LCDInit                                              1     1      0    1365
                                             42 COMRAM     1     1      0
                            _WaitLCD
                        _WriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDClear                                             1     1      0    1797
                                             44 COMRAM     1     1      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (6) _WriteByte                                            2     1      1    1726
                                             42 COMRAM     2     1      1
                        _WriteNibble
 ---------------------------------------------------------------------------------
 (7) _WriteNibble                                          3     2      1    1294
                                             39 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (6) _WaitLCD                                              1     1      0      71
                                             40 COMRAM     1     1      0
                           _ReadByte
 ---------------------------------------------------------------------------------
 (7) _ReadByte                                             1     1      0      37
                                             39 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                 17    17      0   11592
                                             22 COMRAM    17    17      0
                         _flashlight
                          _pedometer
                           _searched
                        _synchronize
                          i2_LCDGoto
                      i2_LCDWriteInt
                      i2_LCDWriteStr
 ---------------------------------------------------------------------------------
 (10) _synchronize                                         2     2      0    4175
                                             20 COMRAM     2     2      0
                          i2_LCDGoto
                      i2_LCDWriteStr
                       i2_show_debug
 ---------------------------------------------------------------------------------
 (10) _searched                                            8     8      0    1016
                                             14 COMRAM     8     8      0
                         _flashlight
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (11) _flashlight                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _pedometer                                           0     0      0    3155
                       i2_show_debug
 ---------------------------------------------------------------------------------
 (11) i2_show_debug                                        0     0      0    3155
                          i2_LCDGoto
                      i2_LCDWriteInt
                      i2_LCDWriteStr
 ---------------------------------------------------------------------------------
 (10) i2_LCDWriteInt                                       6     4      2    2135
                                             14 COMRAM     6     4      2
                          i2_LCDGoto
                      i2_LCDWriteStr
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (11) i2___awmod                                           6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___awdiv                                           8     4      4     404
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_LCDWriteStr                                       5     3      2     499
                                              6 COMRAM     5     3      2
                       i2_LCDPutChar
 ---------------------------------------------------------------------------------
 (11) i2_LCDPutChar                                        1     1      0     305
                                              5 COMRAM     1     1      0
                          i2_WaitLCD
                        i2_WriteByte
 ---------------------------------------------------------------------------------
 (11) i2_LCDGoto                                           6     5      1     521
                                              5 COMRAM     6     5      1
                          i2_WaitLCD
                        i2_WriteByte
 ---------------------------------------------------------------------------------
 (12) i2_WriteByte                                         2     1      1     236
                                              3 COMRAM     2     1      1
                      i2_WriteNibble
 ---------------------------------------------------------------------------------
 (13) i2_WriteNibble                                       3     2      1      96
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (12) i2_WaitLCD                                           1     1      0      47
                                              1 COMRAM     1     1      0
                         i2_ReadByte
 ---------------------------------------------------------------------------------
 (13) i2_ReadByte                                          1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _init_debug
       _LCDClear
         _WaitLCD
           _ReadByte
         _WriteByte
           _WriteNibble
       _LCDGoto
         _WaitLCD
           _ReadByte
         _WriteByte
           _WriteNibble
       _LCDInit
         _WaitLCD
           _ReadByte
         _WriteNibble
       _LCDWriteStr
         _LCDPutChar
           _WaitLCD
             _ReadByte
           _WriteByte
             _WriteNibble
       _show_debug
         _LCDGoto
           _WaitLCD
             _ReadByte
           _WriteByte
             _WriteNibble
         _LCDWriteInt
           _LCDGoto
             _WaitLCD
               _ReadByte
             _WriteByte
               _WriteNibble
           _LCDWriteStr
             _LCDPutChar
               _WaitLCD
                 _ReadByte
               _WriteByte
                 _WriteNibble
           ___awdiv
           ___awmod
         _LCDWriteStr
           _LCDPutChar
             _WaitLCD
               _ReadByte
             _WriteByte
               _WriteNibble

 _ISR (ROOT)
   _flashlight
   _pedometer
     i2_show_debug
       i2_LCDGoto
         i2_WaitLCD
           i2_ReadByte
         i2_WriteByte
           i2_WriteNibble
       i2_LCDWriteInt
         i2_LCDGoto
           i2_WaitLCD
             i2_ReadByte
           i2_WriteByte
             i2_WriteNibble
         i2_LCDWriteStr
           i2_LCDPutChar
             i2_WaitLCD
               i2_ReadByte
             i2_WriteByte
               i2_WriteNibble
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
       i2_LCDWriteStr
         i2_LCDPutChar
           i2_WaitLCD
             i2_ReadByte
           i2_WriteByte
             i2_WriteNibble
   _searched
     _flashlight
     i2___awdiv
       i2___awmod (ARG)
     i2___awmod
   _synchronize
     i2_LCDGoto
       i2_WaitLCD
         i2_ReadByte
       i2_WriteByte
         i2_WriteNibble
     i2_LCDWriteStr
       i2_LCDPutChar
         i2_WaitLCD
           i2_ReadByte
         i2_WriteByte
           i2_WriteNibble
     i2_show_debug
       i2_LCDGoto
         i2_WaitLCD
           i2_ReadByte
         i2_WriteByte
           i2_WriteNibble
       i2_LCDWriteInt
         i2_LCDGoto
           i2_WaitLCD
             i2_ReadByte
           i2_WriteByte
             i2_WriteNibble
         i2_LCDWriteStr
           i2_LCDPutChar
             i2_WaitLCD
               i2_ReadByte
             i2_WriteByte
               i2_WriteNibble
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
       i2_LCDWriteStr
         i2_LCDPutChar
           i2_WaitLCD
             i2_ReadByte
           i2_WriteByte
             i2_WriteNibble
   i2_LCDGoto
     i2_WaitLCD
       i2_ReadByte
     i2_WriteByte
       i2_WriteNibble
   i2_LCDWriteInt
     i2_LCDGoto
       i2_WaitLCD
         i2_ReadByte
       i2_WriteByte
         i2_WriteNibble
     i2_LCDWriteStr
       i2_LCDPutChar
         i2_WaitLCD
           i2_ReadByte
         i2_WriteByte
           i2_WriteNibble
     i2___awdiv
       i2___awmod (ARG)
     i2___awmod
   i2_LCDWriteStr
     i2_LCDPutChar
       i2_WaitLCD
         i2_ReadByte
       i2_WriteByte
         i2_WriteNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      E       E       5        8.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      37       1       58.5%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      45      12        0.0%
DATA                 0      0      45       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Jun 02 10:50:08 2017

            __CFG_CP0$ON 000000              __CFG_CP1$ON 000000              __CFG_CP2$ON 000000  
            __CFG_CP3$ON 000000              ?_LCDPutChar 0001                       l93 193C  
            __CFG_CPB$ON 000000              __CFG_CPD$ON 000000             ___awdiv@sign 002D  
   __size_of_WriteNibble 0044                      _ISR 0008       i2LCDWriteInt@value 0010  
           ___awmod@sign 002D                      wreg 000FE8              i2_WriteByte 18CA  
        __end_of_LCDInit 1212             __CFG_LVP$OFF 000000          __end_of_LCDGoto 1728  
           ?_LCDWriteInt 0063                     ?_ISR 0001             ?_LCDWriteStr 002E  
                   ISR@i 0026                     l2061 16FA                     l2049 18FA  
                   l2065 1704                     l2073 1218                     l2077 1258  
                   l1541 12D4                     l1543 12DC                     l1535 12BE  
                   l1561 1314                     l1553 12FC                     l1545 12E0  
                   l1529 12AE                     l1557 1306                     l1581 1450  
                   l1573 1436                     l1583 1458                     l1585 145C  
                   l1593 147A                     l1577 1442                     l1597 1488  
                   l1589 1470                     STR_1 1022                     STR_2 1012  
                   STR_3 101D                     STR_4 101D                     STR_5 1001  
                   u1210 166C                     u1228 166E                     u1270 1252  
                   u1327 1142                     u1280 1292                     _LATD 000F8C  
                   u1337 115C                     u1347 1172                     u1357 1184  
                   u1277 1248                     u1367 1884                     u1287 1288  
                   i2l90 00D2                     i2l67 10BC      i2LCDWriteInt@column 0011  
        i2WriteByte@data 0004             __CFG_WRT0$ON 000000             __CFG_WRT1$ON 000000  
           __CFG_WRT2$ON 000000             __CFG_WRT3$ON 000000            __CFG_EBTR0$ON 000000  
          __CFG_EBTR1$ON 000000            __CFG_EBTR2$ON 000000            __CFG_EBTR3$ON 000000  
           __CFG_WRTB$ON 000000             __CFG_WRTC$ON 000000             __CFG_WRTD$ON 000000  
 __size_ofi2_WriteNibble 0044            __CFG_EBTRB$ON 000000                     _main 1938  
   __end_ofi2_show_debug 1850                     fsr0h 000FEA                     fsr1h 000FE2  
                   indf0 000FEF                     fsr2h 000FDA                     fsr0l 000FE9  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 0038            __CFG_BORV$190 000000      i2LCDWriteInt@string 0012  
                   prodh 000FF4                     prodl 000FF3                     start 010E  
          __CFG_IESO$OFF 000000             ___param_bank 000000                    ??_ISR 0017  
       __end_of_LCDClear 1894          __end_of_WaitLCD 1908       __size_ofi2_LCDGoto 003A  
                  ?_main 0069          __end_of___awdiv 131E          __end_of___awmod 1492  
        ___awdiv@divisor 002A              _synchronize 1616          ___awdiv@counter 002C  
                  _PORTD 000F83           __CFG_FCMEN$OFF 000000         i2WriteNibble@cmd 0003  
     __CFG_MCLRE$EXTMCLR 000000                    _setup 1502                    _steps 0035  
                  pclath 000FFA                    tablat 000FF5      __size_of_LCDPutChar 0012  
     __size_ofi2_WaitLCD 0012              ?i2_ReadByte 0001                    status 000FD8  
         __CFG_HFOFST$ON 000000            WaitLCD@status 0029       __size_ofi2___awdiv 0084  
     __size_ofi2___awmod 0070           __CFG_PBADEN$ON 000000          __initialization 1762  
           __end_of_main 193E         __end_of_ReadByte 17C6            i2_WriteNibble 16A2  
                 ??_main 0031            __activetblptr 000002                ??_LCDInit 002B  
              ??_LCDGoto 002E      i2LCDWriteStr@string 0007         ___awdiv@dividend 0028  
                 ?_setup 0001            LCDGoto@column 0062        __end_ofi2_LCDGoto 1762  
                 i2l1701 14E0                   i2l1615 1738                   i2l1631 13E4  
                 i2l1641 1332                   i2l1705 14EA                   i2l1619 1742  
                 i2l1627 13A8                   i2l1493 191E                   i2l1653 1358  
                 i2l1709 14F8                   i2l1901 111E           __CFG_WDTEN$OFF 000000  
                 i2l1655 1360                   i2l1647 1342                   i2l1673 1398  
                 i2l1665 1380                   i2l1657 1364                   i2l1669 138A  
                 i2l1693 14C0                   i2l1685 14A6                   i2l1695 14C8  
                 i2l1943 0070                   i2l1697 14CC                   i2l1689 14B2  
                 i2l1873 1040                   i2l1947 0080                   i2l1893 10F2  
                 i2l1885 10C4                   i2l1965 00CE                   i2l1957 00A8  
                 i2l1887 10CE                   i2l1879 10AC                   i2l1897 10F8  
              ??_WaitLCD 0029           __CFG_PWRTEN$ON 000000           __CFG_XINST$OFF 000000  
              ??___awdiv 002C           __CFG_STVREN$ON 000000                ??___awmod 002C  
          ?i2_LCDPutChar 0001        i2WriteNibble@data 0001           ?i2_WriteNibble 0001  
       ___awdiv@quotient 002E          ___awmod@divisor 002A          ___awmod@counter 002C  
      __end_ofi2_WaitLCD 192C         __end_of_searched 112A           i2___awdiv@sign 000C  
    __size_ofi2_ReadByte 0030             __pdataCOMRAM 0031        __end_ofi2___awdiv 13A2  
      __end_ofi2___awmod 1502             __mediumconst 0000                   tblptrh 000FF7  
           LCDWriteStr@i 0030                   tblptrl 000FF6                   tblptru 000FF8  
         i2___awmod@sign 0006    __size_ofi2_show_debug 002C                ?_LCDClear 0001  
   __size_of_LCDWriteInt 0058     __size_of_LCDWriteStr 0088               __accesstop 0060  
__end_of__initialization 1788       __size_of_WriteByte 001A            ___rparam_used 000001  
         __pcstackCOMRAM 0001           WriteNibble@cmd 002A           ??i2_LCDPutChar 0006  
           ??_LCDPutChar 002D            __end_of_setup 1570   __size_ofi2_LCDWriteInt 004E  
 __size_ofi2_LCDWriteStr 0080             i2_show_debug 1824             ?i2_WriteByte 0004  
                ??_setup 0031            searched@found 0011             WriteByte@cmd 002C  
             ??_LCDClear 002D          __CFG_PLLCFG$OFF 000000                ?_ReadByte 0001  
     __end_of_LCDPutChar 18F6             i2LCDGoto@row 0006       __size_of_pedometer 000C  
     __CFG_CCP2MX$PORTC1 000000            i2_LCDGoto$794 000A          ??i2_WriteNibble 0002  
     __CFG_CCP3MX$PORTB5 000000            ??_WriteNibble 0029        LCDWriteInt@column 0065  
      LCDWriteInt@string 0066             ?_synchronize 0001        __end_of_WriteByte 18CA  
                _LCDInit 112A                  _LCDGoto 16E6               _flashlight 1894  
                i2u44_40 189E                  i2u45_48 18A0                  i2u65_40 16B0  
                i2u90_40 141A                  i2u90_47 1410                  i2u66_48 16B2  
                _PR2bits 000FBB                  i2u89_40 13DE                  i2u89_47 13D4  
          i2_LCDWriteInt 15C8            i2_LCDWriteStr 13A2             ??i2_ReadByte 0001  
             ??_ReadByte 0028                ?_searched 0001                  __Hparam 0000  
                _WaitLCD 18F6                  __Lparam 0000                  ___awdiv 129A  
                ___awmod 1422               _init_debug 1850             __psmallconst 1000  
                __pcinit 1762                  __ramtop 1000                  __ptext0 1938  
                __ptext1 1502                  __ptext2 1850                  __ptext3 17F6  
                __ptext4 1570                  __ptext5 1422                  __ptext6 129A  
                __ptext7 1212                  __ptext8 18E4                  __ptext9 16E6  
           __size_of_ISR 0106       __end_ofi2_ReadByte 17F6                _T2CONbits 000FBA  
    __end_of_WriteNibble 16A2         ___awmod@dividend 0028        __end_of_pedometer 1938  
         ?i2_LCDWriteInt 000F           i2LCDWriteStr@i 000B           ?i2_LCDWriteStr 0007  
   end_of_initialization 1788     __end_ofi2_LCDPutChar 191A          _synchronization 0037  
          __Lmediumconst 0000                i2_LCDGoto 1728               ??_searched 000F  
      LCDWriteStr@string 002E                  postdec1 000FE5                  postinc0 000FEE  
       i2LCDPutChar@data 0006                _PORTBbits 000F81               _show_debug 17F6  
       __CFG_FOSC$INTIO7 000000                i2_WaitLCD 191A                _TRISBbits 000F93  
              _TRISCbits 000F94                _TRISDbits 000F95              ?_flashlight 0001  
              i2___awdiv 131E                i2___awmod 1492     __size_ofi2_WriteByte 001A  
            _CCP1CONbits 000FBD               LCDGoto@row 002D           i2WriteByte@cmd 0005  
      __size_of_LCDClear 0020       i2___awdiv@dividend 0007               ?i2_LCDGoto 0006  
        WriteNibble@data 0028              ?_init_debug 0001          i2WaitLCD@status 0002  
            _WriteNibble 165E            __pidataCOMRAM 193E      start_initialization 1762  
             ?i2_WaitLCD 0001       i2___awdiv@quotient 000D              __end_of_ISR 010E  
   __size_of_synchronize 0048          ??i2_LCDWriteInt 0011          ??i2_LCDWriteStr 0009  
          ??_LCDWriteInt 0031            ??_LCDWriteStr 0060               ?i2___awdiv 0007  
             ?i2___awmod 0001        __size_of_ReadByte 0030          i2LCDGoto@column 0009  
    __size_of_flashlight 001C              ?_show_debug 0001                 ?_LCDInit 0001  
               ?_LCDGoto 002D            WriteByte@data 002B              __pbssCOMRAM 0035  
  __size_ofi2_LCDPutChar 0012            __pcstackBANK0 0060                _WriteByte 18B0  
         LCDPutChar@data 002D      __size_of_init_debug 0024      __end_of_LCDWriteInt 15C8  
    __end_of_LCDWriteStr 129A             searched@time 0013              ??i2_LCDGoto 0007  
               ?_WaitLCD 0001        __size_of_searched 0102                __pintcode 0008  
               ?___awdiv 0028                 ?___awmod 0028         LCDWriteInt@value 0064  
  __end_ofi2_WriteNibble 16E6             i2_LCDPutChar 1908         __CFG_PRICLKEN$ON 000000  
            __smallconst 1000              ??i2_WaitLCD 0002               ?_WriteByte 002B  
            ??i2___awdiv 000B              ??i2___awmod 0005           __size_of_setup 006E  
       i2ReadByte@status 0001                _pedometer 192C                 _LCDClear 1874  
               _LATBbits 000F8A                 _LATCbits 000F8B                 _LATDbits 000F8C  
    __size_of_show_debug 002E              _LCDGoto$794 0060                 i2u111_40 1116  
               i2u140_47 10D4                 i2u109_40 10EE                 i2u137_47 0060  
               i2u138_47 0098                 i2u139_47 1628         __CFG_WDTPS$32768 000000  
       i2LCDWriteInt@row 000F         __size_of_LCDInit 00E8         __size_of_LCDGoto 0042  
      i2___awdiv@divisor 0009             ??_flashlight 0001        i2___awdiv@counter 000B  
            _LCDWriteInt 1570              _LCDWriteStr 1212              _INTCON2bits 000FF1  
            _INTCON3bits 000FF0                copy_data0 1776       i2___awmod@dividend 0001  
             ?_pedometer 0001                 _ReadByte 1796               _CCPR1Lbits 000FBE  
               __Hrparam 0000                 __Lrparam 0000       __CFG_BOREN$SBORDIS 000000  
       __size_of_WaitLCD 0012        __CFG_P2BMX$PORTD2 000000       __end_of_flashlight 18B0  
           ??_init_debug 0031         __size_of___awdiv 0084             ?_WriteNibble 0028  
       __size_of___awmod 0070            ?i2_show_debug 0001               _ANSELBbits 000F39  
              searched@i 0015            ??i2_WriteByte 0005              ??_WriteByte 002C  
               __ptext10 112A                 __ptext11 1874                 __ptext20 192C  
               __ptext12 18B0                 __ptext21 1824                 __ptext13 165E  
               __ptext30 191A                 __ptext22 15C8                 __ptext14 18F6  
               __ptext31 17C6                 __ptext23 1492                 __ptext15 1796  
               __ptext24 131E                 __ptext25 13A2                 __ptext17 1616  
               __ptext26 1908                 __ptext18 1028                 __ptext27 1728  
               __ptext19 1894                 __ptext28 18CA                 __ptext29 16A2  
         _kiwi_frequence 0031       __end_of_init_debug 1874            __size_of_main 0006  
            _kiwi_length 0034                 _searched 1028           ReadByte@status 0028  
               int$flags 0038               _LCDPutChar 18E4                 main@argc 0069  
               main@argv 006B           ??i2_show_debug 0015             ??_show_debug 0031  
          ??_synchronize 0015        i2___awmod@divisor 0003        i2___awmod@counter 0005  
             _INTCONbits 000FF2    __end_ofi2_LCDWriteInt 1616    __end_ofi2_LCDWriteStr 1422  
               intlevel2 0000              ??_pedometer 0015           LCDWriteInt@row 0063  
    __end_ofi2_WriteByte 18E4       __end_of_show_debug 1824        __CFG_T3CMX$PORTC0 000000  
    __end_of_synchronize 165E               i2_ReadByte 17C6  
