

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Jun 01 17:52:18 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           ; Version 1.41
    49                           ; Generated 25/01/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F46K22 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	idataCOMRAM
    84  001896                     __pidataCOMRAM:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _kiwi_frequence
    88  001896  23                 	db	35
    89  001897  23                 	db	35
    90  001898  23                 	db	35
    91                           
    92                           ;initializer for _kiwi_length
    93  001899  03                 	db	3
    94  0000                     _ANSELBbits	set	3897
    95  0000                     _LATD	set	3980
    96  0000                     _PORTD	set	3971
    97  0000                     _LATDbits	set	3980
    98  0000                     _TRISDbits	set	3989
    99  0000                     _PR2bits	set	4027
   100  0000                     _CCPR1Lbits	set	4030
   101  0000                     _CCP1CONbits	set	4029
   102  0000                     _T2CONbits	set	4026
   103  0000                     _LATCbits	set	3979
   104  0000                     _TRISCbits	set	3988
   105  0000                     _INTCON3bits	set	4080
   106  0000                     _LATBbits	set	3978
   107  0000                     _TRISBbits	set	3987
   108  0000                     _INTCONbits	set	4082
   109  0000                     _INTCON2bits	set	4081
   110                           
   111                           	psect	smallconst
   112  001000                     __psmallconst:
   113                           	opt stack 0
   114  001000  00                 	db	0
   115  001001  30                 	db	48	;'0'
   116  001002  31                 	db	49	;'1'
   117  001003  32                 	db	50	;'2'
   118  001004  33                 	db	51	;'3'
   119  001005  34                 	db	52	;'4'
   120  001006  35                 	db	53	;'5'
   121  001007  36                 	db	54	;'6'
   122  001008  37                 	db	55	;'7'
   123  001009  38                 	db	56	;'8'
   124  00100A  39                 	db	57	;'9'
   125  00100B  41                 	db	65	;'A'
   126  00100C  42                 	db	66	;'B'
   127  00100D  43                 	db	67	;'C'
   128  00100E  44                 	db	68	;'D'
   129  00100F  45                 	db	69	;'E'
   130  001010  46                 	db	70	;'F'
   131  001011  00                 	db	0
   132  001012                     STR_1:
   133  001012  4E                 	db	78	;'N'
   134  001013  6F                 	db	111	;'o'
   135  001014  6D                 	db	109	;'m'
   136  001015  62                 	db	98	;'b'
   137  001016  72                 	db	114	;'r'
   138  001017  65                 	db	101	;'e'
   139  001018  20                 	db	32
   140  001019  70                 	db	112	;'p'
   141  00101A  61                 	db	97	;'a'
   142  00101B  73                 	db	115	;'s'
   143  00101C  00                 	db	0
   144                           
   145                           ; #config settings
   146  00101D  00                 	db	0	; dummy byte at the end
   147  0000                     
   148                           	psect	cinit
   149  0016EC                     __pcinit:
   150                           	opt stack 0
   151  0016EC                     start_initialization:
   152                           	opt stack 0
   153  0016EC                     __initialization:
   154                           	opt stack 0
   155                           
   156                           ; Initialize objects allocated to COMRAM (4 bytes)
   157                           ; load TBLPTR registers with __pidataCOMRAM
   158  0016EC  0E96               	movlw	low __pidataCOMRAM
   159  0016EE  6EF6               	movwf	tblptrl,c
   160  0016F0  0E18               	movlw	high __pidataCOMRAM
   161  0016F2  6EF7               	movwf	tblptrh,c
   162  0016F4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   163  0016F6  6EF8               	movwf	tblptru,c
   164  0016F8  EE00  F033         	lfsr	0,__pdataCOMRAM
   165  0016FC  EE10 F004          	lfsr	1,4
   166  001700                     copy_data0:
   167  001700  0009               	tblrd		*+
   168  001702  CFF5 FFEE          	movff	tablat,postinc0
   169  001706  50E5               	movf	postdec1,w,c
   170  001708  50E1               	movf	fsr1l,w,c
   171  00170A  E1FA               	bnz	copy_data0
   172                           
   173                           ; Clear objects allocated to COMRAM (2 bytes)
   174  00170C  6A38               	clrf	(__pbssCOMRAM+1)& (0+255),c
   175  00170E  6A37               	clrf	__pbssCOMRAM& (0+255),c
   176  001710                     end_of_initialization:
   177                           	opt stack 0
   178  001710                     __end_of__initialization:
   179                           	opt stack 0
   180  001710  9039               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   181  001712  9239               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   182  001714  0E00               	movlw	low (__Lmediumconst shr (0+16))
   183  001716  6EF8               	movwf	tblptru,c
   184  001718  0100               	movlb	0
   185  00171A  EF48  F00C         	goto	_main	;jump to C main() function
   186                           tblptru	equ	0xFF8
   187                           tblptrh	equ	0xFF7
   188                           tblptrl	equ	0xFF6
   189                           tablat	equ	0xFF5
   190                           postinc0	equ	0xFEE
   191                           postdec1	equ	0xFE5
   192                           fsr1l	equ	0xFE1
   193                           
   194                           	psect	bssCOMRAM
   195  000037                     __pbssCOMRAM:
   196                           	opt stack 0
   197  000037                     _steps:
   198                           	opt stack 0
   199  000037                     	ds	2
   200                           tblptru	equ	0xFF8
   201                           tblptrh	equ	0xFF7
   202                           tblptrl	equ	0xFF6
   203                           tablat	equ	0xFF5
   204                           postinc0	equ	0xFEE
   205                           postdec1	equ	0xFE5
   206                           fsr1l	equ	0xFE1
   207                           
   208                           	psect	dataCOMRAM
   209  000033                     __pdataCOMRAM:
   210                           	opt stack 0
   211  000033                     _kiwi_frequence:
   212                           	opt stack 0
   213  000033                     	ds	3
   214  000036                     _kiwi_length:
   215                           	opt stack 0
   216  000036                     	ds	1
   217                           tblptru	equ	0xFF8
   218                           tblptrh	equ	0xFF7
   219                           tblptrl	equ	0xFF6
   220                           tablat	equ	0xFF5
   221                           postinc0	equ	0xFEE
   222                           postdec1	equ	0xFE5
   223                           fsr1l	equ	0xFE1
   224                           
   225                           	psect	cstackBANK0
   226  000060                     __pcstackBANK0:
   227                           	opt stack 0
   228  000060                     LCDWriteInt@column:
   229                           	opt stack 0
   230                           
   231                           ; 1 bytes @ 0x0
   232  000060                     	ds	1
   233  000061                     LCDWriteInt@string:
   234                           	opt stack 0
   235                           
   236                           ; 3 bytes @ 0x1
   237  000061                     	ds	3
   238  000064                     
   239                           ; 2 bytes @ 0x4
   240  000064                     	ds	2
   241  000066                     
   242                           ; 3 bytes @ 0x6
   243  000066                     	ds	3
   244                           tblptru	equ	0xFF8
   245                           tblptrh	equ	0xFF7
   246                           tblptrl	equ	0xFF6
   247                           tablat	equ	0xFF5
   248                           postinc0	equ	0xFEE
   249                           postdec1	equ	0xFE5
   250                           fsr1l	equ	0xFE1
   251                           
   252                           	psect	cstackCOMRAM
   253  000001                     __pcstackCOMRAM:
   254                           	opt stack 0
   255  000001                     ??_flashlight:
   256  000001                     ?i2___awmod:
   257                           	opt stack 0
   258  000001                     i2ReadByte@status:
   259                           	opt stack 0
   260  000001                     i2WriteNibble@data:
   261                           	opt stack 0
   262  000001                     i2___awmod@dividend:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x0
   266  000001                     	ds	1
   267  000002                     ??i2_WriteNibble:
   268  000002                     i2WaitLCD@status:
   269                           	opt stack 0
   270                           
   271                           ; 1 bytes @ 0x1
   272  000002                     	ds	1
   273  000003                     i2WriteNibble@cmd:
   274                           	opt stack 0
   275  000003                     i2___awmod@divisor:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0x2
   279  000003                     	ds	1
   280  000004                     i2WriteByte@data:
   281                           	opt stack 0
   282                           
   283                           ; 1 bytes @ 0x3
   284  000004                     	ds	1
   285  000005                     i2WriteByte@cmd:
   286                           	opt stack 0
   287  000005                     i2___awmod@counter:
   288                           	opt stack 0
   289                           
   290                           ; 1 bytes @ 0x4
   291  000005                     	ds	1
   292  000006                     i2LCDGoto@row:
   293                           	opt stack 0
   294  000006                     i2LCDPutChar@data:
   295                           	opt stack 0
   296  000006                     i2___awmod@sign:
   297                           	opt stack 0
   298                           
   299                           ; 1 bytes @ 0x5
   300  000006                     	ds	1
   301  000007                     ??i2_LCDGoto:
   302  000007                     ?i2___awdiv:
   303                           	opt stack 0
   304  000007                     i2LCDWriteStr@string:
   305                           	opt stack 0
   306  000007                     i2___awdiv@dividend:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x6
   310  000007                     	ds	2
   311  000009                     ??i2_LCDWriteStr:
   312  000009                     i2_LCDGoto$661:
   313                           	opt stack 0
   314  000009                     i2___awdiv@divisor:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x8
   318  000009                     	ds	2
   319  00000B                     i2LCDGoto@column:
   320                           	opt stack 0
   321  00000B                     i2LCDWriteStr@i:
   322                           	opt stack 0
   323  00000B                     i2___awdiv@counter:
   324                           	opt stack 0
   325                           
   326                           ; 1 bytes @ 0xA
   327  00000B                     	ds	1
   328  00000C                     i2___awdiv@sign:
   329                           	opt stack 0
   330                           
   331                           ; 1 bytes @ 0xB
   332  00000C                     	ds	1
   333  00000D                     i2___awdiv@quotient:
   334                           	opt stack 0
   335                           
   336                           ; 2 bytes @ 0xC
   337  00000D                     	ds	2
   338  00000F                     ??_searched:
   339  00000F                     i2LCDWriteInt@row:
   340                           	opt stack 0
   341                           
   342                           ; 1 bytes @ 0xE
   343  00000F                     	ds	1
   344  000010                     i2LCDWriteInt@value:
   345                           	opt stack 0
   346                           
   347                           ; 1 bytes @ 0xF
   348  000010                     	ds	1
   349  000011                     searched@time:
   350                           	opt stack 0
   351  000011                     i2LCDWriteInt@string:
   352                           	opt stack 0
   353                           
   354                           ; 3 bytes @ 0x10
   355  000011                     	ds	2
   356  000013                     searched@i:
   357                           	opt stack 0
   358                           
   359                           ; 2 bytes @ 0x12
   360  000013                     	ds	1
   361  000014                     i2LCDWriteInt@column:
   362                           	opt stack 0
   363                           
   364                           ; 1 bytes @ 0x13
   365  000014                     	ds	1
   366  000015                     ??_ISR:
   367  000015                     
   368                           ; 1 bytes @ 0x14
   369  000015                     	ds	15
   370  000024                     ISR@i:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x23
   374  000024                     	ds	2
   375  000026                     ?___awdiv:
   376                           	opt stack 0
   377  000026                     ?___awmod:
   378                           	opt stack 0
   379  000026                     ReadByte@status:
   380                           	opt stack 0
   381  000026                     WriteNibble@data:
   382                           	opt stack 0
   383  000026                     ___awdiv@dividend:
   384                           	opt stack 0
   385  000026                     ___awmod@dividend:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x25
   389  000026                     	ds	1
   390  000027                     ??_WriteNibble:
   391  000027                     WaitLCD@status:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x26
   395  000027                     	ds	1
   396  000028                     WriteNibble@cmd:
   397                           	opt stack 0
   398  000028                     ___awdiv@divisor:
   399                           	opt stack 0
   400  000028                     ___awmod@divisor:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x27
   404  000028                     	ds	1
   405  000029                     ??_LCDInit:
   406  000029                     WriteByte@data:
   407                           	opt stack 0
   408                           
   409                           ; 1 bytes @ 0x28
   410  000029                     	ds	1
   411  00002A                     WriteByte@cmd:
   412                           	opt stack 0
   413  00002A                     ___awdiv@counter:
   414                           	opt stack 0
   415  00002A                     ___awmod@counter:
   416                           	opt stack 0
   417                           
   418                           ; 1 bytes @ 0x29
   419  00002A                     	ds	1
   420  00002B                     ??_LCDClear:
   421  00002B                     LCDGoto@row:
   422                           	opt stack 0
   423  00002B                     LCDPutChar@data:
   424                           	opt stack 0
   425  00002B                     ___awdiv@sign:
   426                           	opt stack 0
   427  00002B                     ___awmod@sign:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0x2A
   431  00002B                     	ds	1
   432  00002C                     ??_LCDGoto:
   433  00002C                     LCDWriteStr@string:
   434                           	opt stack 0
   435  00002C                     ___awdiv@quotient:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x2B
   439  00002C                     	ds	2
   440  00002E                     ??_LCDWriteStr:
   441  00002E                     _LCDGoto$661:
   442                           	opt stack 0
   443                           
   444                           ; 2 bytes @ 0x2D
   445  00002E                     	ds	2
   446  000030                     LCDGoto@column:
   447                           	opt stack 0
   448  000030                     LCDWriteStr@i:
   449                           	opt stack 0
   450                           
   451                           ; 1 bytes @ 0x2F
   452  000030                     	ds	1
   453  000031                     LCDWriteInt@row:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x30
   457  000031                     	ds	1
   458  000032                     LCDWriteInt@value:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0x31
   462  000032                     	ds	1
   463  000033                     tblptru	equ	0xFF8
   464                           tblptrh	equ	0xFF7
   465                           tblptrl	equ	0xFF6
   466                           tablat	equ	0xFF5
   467                           postinc0	equ	0xFEE
   468                           postdec1	equ	0xFE5
   469                           fsr1l	equ	0xFE1
   470                           
   471                           ; 1 bytes @ 0x32
   472 ;;
   473 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   474 ;;
   475 ;; *************** function _main *****************
   476 ;; Defined at:
   477 ;;		line 236 in file "main.c"
   478 ;; Parameters:    Size  Location     Type
   479 ;;  argc            2    4[BANK0 ] int 
   480 ;;  argv            3    6[BANK0 ] PTR PTR unsigned char 
   481 ;; Auto vars:     Size  Location     Type
   482 ;;		None
   483 ;; Return value:  Size  Location     Type
   484 ;;                  2    4[BANK0 ] int 
   485 ;; Registers used:
   486 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   487 ;; Tracked objects:
   488 ;;		On entry : 0/0
   489 ;;		On exit  : 0/0
   490 ;;		Unchanged: 0/0
   491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   492 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   495 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   496 ;;Total ram usage:        5 bytes
   497 ;; Hardware stack levels required when called:   16
   498 ;; This function calls:
   499 ;;		_setup
   500 ;; This function is called by:
   501 ;;		Startup code after reset
   502 ;; This function uses a non-reentrant model
   503 ;;
   504                           
   505                           	psect	text0
   506  001890                     __ptext0:
   507                           	opt stack 0
   508  001890                     _main:
   509                           	opt stack 15
   510                           
   511                           ;main.c: 238: setup();
   512                           
   513                           ;incstack = 0
   514  001890  EC6E  F00A         	call	_setup	;wreg free
   515  001894                     l84:
   516  001894  D7FF               	goto	l84
   517  001896                     __end_of_main:
   518                           	opt stack 0
   519                           tblptru	equ	0xFF8
   520                           tblptrh	equ	0xFF7
   521                           tblptrl	equ	0xFF6
   522                           tablat	equ	0xFF5
   523                           postinc0	equ	0xFEE
   524                           postdec1	equ	0xFE5
   525                           fsr1l	equ	0xFE1
   526                           
   527 ;; *************** function _setup *****************
   528 ;; Defined at:
   529 ;;		line 89 in file "main.c"
   530 ;; Parameters:    Size  Location     Type
   531 ;;		None
   532 ;; Auto vars:     Size  Location     Type
   533 ;;		None
   534 ;; Return value:  Size  Location     Type
   535 ;;                  1    wreg      void 
   536 ;; Registers used:
   537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   538 ;; Tracked objects:
   539 ;;		On entry : 0/0
   540 ;;		On exit  : 0/0
   541 ;;		Unchanged: 0/0
   542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   547 ;;Total ram usage:        0 bytes
   548 ;; Hardware stack levels used:    1
   549 ;; Hardware stack levels required when called:   15
   550 ;; This function calls:
   551 ;;		_init_debug
   552 ;; This function is called by:
   553 ;;		_main
   554 ;; This function uses a non-reentrant model
   555 ;;
   556                           
   557                           	psect	text1
   558  0014DC                     __ptext1:
   559                           	opt stack 0
   560  0014DC                     _setup:
   561                           	opt stack 15
   562                           
   563                           ;main.c: 91: init_debug();
   564                           
   565                           ;incstack = 0
   566  0014DC  ECBF  F00B         	call	_init_debug	;wreg free
   567                           
   568                           ;main.c: 94: INTCON2bits.INTEDG0 = 1;
   569  0014E0  8CF1               	bsf	intcon2,6,c	;volatile
   570                           
   571                           ;main.c: 95: INTCONbits.INT0IF = 0 ;
   572  0014E2  92F2               	bcf	intcon,1,c	;volatile
   573                           
   574                           ;main.c: 96: TRISBbits.TRISB0 = 0;
   575  0014E4  9093               	bcf	3987,0,c	;volatile
   576                           
   577                           ;main.c: 97: LATBbits.LATB0 = 0;
   578  0014E6  908A               	bcf	3978,0,c	;volatile
   579                           
   580                           ;main.c: 98: TRISBbits.TRISB0 = 1;
   581  0014E8  8093               	bsf	3987,0,c	;volatile
   582                           
   583                           ;main.c: 99: ANSELBbits.ANSB0 = 0;
   584  0014EA  010F               	movlb	15	; () banked
   585  0014EC  9139               	bcf	57,0,b	;volatile
   586                           
   587                           ; BSR set to: 15
   588                           ;main.c: 100: INTCONbits.INT0E = 1 ;
   589  0014EE  88F2               	bsf	intcon,4,c	;volatile
   590                           
   591                           ; BSR set to: 15
   592                           ;main.c: 103: INTCON2bits.INTEDG1 = 1;
   593  0014F0  8AF1               	bsf	intcon2,5,c	;volatile
   594                           
   595                           ; BSR set to: 15
   596                           ;main.c: 104: INTCON3bits.INT1IF = 0 ;
   597  0014F2  90F0               	bcf	intcon3,0,c	;volatile
   598                           
   599                           ; BSR set to: 15
   600                           ;main.c: 105: TRISBbits.TRISB1 = 0;
   601  0014F4  9293               	bcf	3987,1,c	;volatile
   602                           
   603                           ; BSR set to: 15
   604                           ;main.c: 106: LATBbits.LATB1 = 0;
   605  0014F6  928A               	bcf	3978,1,c	;volatile
   606                           
   607                           ; BSR set to: 15
   608                           ;main.c: 107: TRISBbits.TRISB1 = 1;
   609  0014F8  8293               	bsf	3987,1,c	;volatile
   610                           
   611                           ; BSR set to: 15
   612                           ;main.c: 108: ANSELBbits.ANSB1 = 0;
   613  0014FA  010F               	movlb	15	; () banked
   614  0014FC  9339               	bcf	57,1,b	;volatile
   615                           
   616                           ; BSR set to: 15
   617                           ;main.c: 109: INTCON3bits.INT1E = 1 ;
   618  0014FE  86F0               	bsf	intcon3,3,c	;volatile
   619                           
   620                           ; BSR set to: 15
   621                           ;main.c: 112: INTCON2bits.INTEDG2 = 1;
   622  001500  88F1               	bsf	intcon2,4,c	;volatile
   623                           
   624                           ; BSR set to: 15
   625                           ;main.c: 113: INTCON3bits.INT2IF = 0 ;
   626  001502  92F0               	bcf	intcon3,1,c	;volatile
   627                           
   628                           ; BSR set to: 15
   629                           ;main.c: 114: TRISBbits.TRISB2 = 0;
   630  001504  9493               	bcf	3987,2,c	;volatile
   631                           
   632                           ; BSR set to: 15
   633                           ;main.c: 115: LATBbits.LATB2 = 0;
   634  001506  948A               	bcf	3978,2,c	;volatile
   635                           
   636                           ; BSR set to: 15
   637                           ;main.c: 116: TRISBbits.TRISB2 = 1;
   638  001508  8493               	bsf	3987,2,c	;volatile
   639                           
   640                           ; BSR set to: 15
   641                           ;main.c: 117: ANSELBbits.ANSB2 = 0;
   642  00150A  010F               	movlb	15	; () banked
   643  00150C  9539               	bcf	57,2,b	;volatile
   644                           
   645                           ; BSR set to: 15
   646                           ;main.c: 118: INTCON3bits.INT2E = 1 ;
   647  00150E  88F0               	bsf	intcon3,4,c	;volatile
   648                           
   649                           ; BSR set to: 15
   650                           ;main.c: 121: TRISCbits.RC1 = 0 ;
   651  001510  9294               	bcf	3988,1,c	;volatile
   652                           
   653                           ; BSR set to: 15
   654                           ;main.c: 122: LATCbits.LATC1 = 0 ;
   655  001512  928B               	bcf	3979,1,c	;volatile
   656                           
   657                           ; BSR set to: 15
   658                           ;main.c: 125: T2CONbits.T2OUTPS = 0 ;
   659  001514  96BA               	bcf	4026,3,c	;volatile
   660  001516  98BA               	bcf	4026,4,c	;volatile
   661  001518  9ABA               	bcf	4026,5,c	;volatile
   662  00151A  9CBA               	bcf	4026,6,c	;volatile
   663                           
   664                           ; BSR set to: 15
   665                           ;main.c: 126: T2CONbits.T2CKPS = 0b10 ;
   666  00151C  50BA               	movf	4026,w,c	;volatile
   667  00151E  0BFC               	andlw	-4
   668  001520  0902               	iorlw	2
   669  001522  6EBA               	movwf	4026,c	;volatile
   670                           
   671                           ; BSR set to: 15
   672                           ;main.c: 127: T2CONbits.TMR2ON = 1 ;
   673  001524  84BA               	bsf	4026,2,c	;volatile
   674                           
   675                           ; BSR set to: 15
   676                           ;main.c: 130: TRISCbits.RC2 = 0;
   677  001526  9494               	bcf	3988,2,c	;volatile
   678                           
   679                           ; BSR set to: 15
   680                           ;main.c: 131: CCP1CONbits.P1M = 0 ;
   681  001528  0E3F               	movlw	-193
   682  00152A  16BD               	andwf	4029,f,c	;volatile
   683                           
   684                           ; BSR set to: 15
   685                           ;main.c: 132: CCP1CONbits.DC1B = 0 ;
   686  00152C  0ECF               	movlw	-49
   687  00152E  16BD               	andwf	4029,f,c	;volatile
   688                           
   689                           ; BSR set to: 15
   690                           ;main.c: 133: CCP1CONbits.CCP1M = 0b1100 ;
   691  001530  50BD               	movf	4029,w,c	;volatile
   692  001532  0BF0               	andlw	-16
   693  001534  090C               	iorlw	12
   694  001536  6EBD               	movwf	4029,c	;volatile
   695                           
   696                           ; BSR set to: 15
   697                           ;main.c: 134: CCPR1Lbits.CCPR1L = 0 ;
   698  001538  0E00               	movlw	0
   699  00153A  6EBE               	movwf	4030,c	;volatile
   700                           
   701                           ; BSR set to: 15
   702                           ;main.c: 137: INTCONbits.PEIE = 1;
   703  00153C  8CF2               	bsf	intcon,6,c	;volatile
   704                           
   705                           ; BSR set to: 15
   706                           ;main.c: 138: INTCONbits.GIE = 1 ;
   707  00153E  8EF2               	bsf	intcon,7,c	;volatile
   708                           
   709                           ; BSR set to: 15
   710                           ;main.c: 141: steps = 0;
   711  001540  0E00               	movlw	0
   712  001542  6E38               	movwf	_steps+1,c
   713  001544  0E00               	movlw	0
   714  001546  6E37               	movwf	_steps,c
   715                           
   716                           ; BSR set to: 15
   717  001548  0012               	return		;funcret
   718  00154A                     __end_of_setup:
   719                           	opt stack 0
   720                           tblptru	equ	0xFF8
   721                           tblptrh	equ	0xFF7
   722                           tblptrl	equ	0xFF6
   723                           tablat	equ	0xFF5
   724                           intcon	equ	0xFF2
   725                           intcon2	equ	0xFF1
   726                           intcon3	equ	0xFF0
   727                           postinc0	equ	0xFEE
   728                           postdec1	equ	0xFE5
   729                           fsr1l	equ	0xFE1
   730                           
   731 ;; *************** function _init_debug *****************
   732 ;; Defined at:
   733 ;;		line 80 in file "main.c"
   734 ;; Parameters:    Size  Location     Type
   735 ;;		None
   736 ;; Auto vars:     Size  Location     Type
   737 ;;		None
   738 ;; Return value:  Size  Location     Type
   739 ;;                  1    wreg      void 
   740 ;; Registers used:
   741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   742 ;; Tracked objects:
   743 ;;		On entry : 0/0
   744 ;;		On exit  : 0/0
   745 ;;		Unchanged: 0/0
   746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   751 ;;Total ram usage:        0 bytes
   752 ;; Hardware stack levels used:    1
   753 ;; Hardware stack levels required when called:   14
   754 ;; This function calls:
   755 ;;		_LCDClear
   756 ;;		_LCDGoto
   757 ;;		_LCDInit
   758 ;;		_LCDWriteStr
   759 ;;		_show_debug
   760 ;; This function is called by:
   761 ;;		_setup
   762 ;; This function uses a non-reentrant model
   763 ;;
   764                           
   765                           	psect	text2
   766  00177E                     __ptext2:
   767                           	opt stack 0
   768  00177E                     _init_debug:
   769                           	opt stack 15
   770                           
   771                           ;main.c: 81: LCDInit();
   772                           
   773                           ; BSR set to: 15
   774                           ;incstack = 0
   775  00177E  EC86  F008         	call	_LCDInit	;wreg free
   776                           
   777                           ;main.c: 82: LCDClear();
   778  001782  ECD1  F00B         	call	_LCDClear	;wreg free
   779                           
   780                           ;main.c: 83: LCDGoto(0, 0);
   781  001786  0E00               	movlw	0
   782  001788  6E2B               	movwf	LCDGoto@row,c
   783  00178A  0E00               	movlw	0
   784  00178C  EC3C  F00B         	call	_LCDGoto
   785                           
   786                           ;main.c: 84: LCDWriteStr("Nombre pas");
   787  001790  0E12               	movlw	low STR_1
   788  001792  6E2C               	movwf	LCDWriteStr@string,c
   789  001794  0E10               	movlw	high STR_1
   790  001796  6E2D               	movwf	LCDWriteStr@string+1,c
   791  001798  EC7E  F009         	call	_LCDWriteStr	;wreg free
   792                           
   793                           ;main.c: 85: show_debug();
   794  00179C  EC2D  F00C         	call	_show_debug	;wreg free
   795  0017A0  0012               	return		;funcret
   796  0017A2                     __end_of_init_debug:
   797                           	opt stack 0
   798                           tblptru	equ	0xFF8
   799                           tblptrh	equ	0xFF7
   800                           tblptrl	equ	0xFF6
   801                           tablat	equ	0xFF5
   802                           intcon	equ	0xFF2
   803                           intcon2	equ	0xFF1
   804                           intcon3	equ	0xFF0
   805                           postinc0	equ	0xFEE
   806                           postdec1	equ	0xFE5
   807                           fsr1l	equ	0xFE1
   808                           
   809 ;; *************** function _show_debug *****************
   810 ;; Defined at:
   811 ;;		line 75 in file "main.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;		None
   814 ;; Auto vars:     Size  Location     Type
   815 ;;		None
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   829 ;;Total ram usage:        0 bytes
   830 ;; Hardware stack levels used:    1
   831 ;; Hardware stack levels required when called:   13
   832 ;; This function calls:
   833 ;;		_LCDWriteInt
   834 ;; This function is called by:
   835 ;;		_init_debug
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           	psect	text3
   840  00185A                     __ptext3:
   841                           	opt stack 0
   842  00185A                     _show_debug:
   843                           	opt stack 15
   844                           
   845                           ;main.c: 76: LCDWriteInt(0, 1, steps);
   846                           
   847                           ;incstack = 0
   848  00185A  0E01               	movlw	1
   849  00185C  6E31               	movwf	LCDWriteInt@row,c
   850  00185E  C037  F032         	movff	_steps,LCDWriteInt@value
   851  001862  0E00               	movlw	0
   852  001864  ECA5  F00A         	call	_LCDWriteInt
   853  001868  0012               	return		;funcret
   854  00186A                     __end_of_show_debug:
   855                           	opt stack 0
   856                           tblptru	equ	0xFF8
   857                           tblptrh	equ	0xFF7
   858                           tblptrl	equ	0xFF6
   859                           tablat	equ	0xFF5
   860                           intcon	equ	0xFF2
   861                           intcon2	equ	0xFF1
   862                           intcon3	equ	0xFF0
   863                           postinc0	equ	0xFEE
   864                           postdec1	equ	0xFE5
   865                           fsr1l	equ	0xFE1
   866                           
   867 ;; *************** function _LCDWriteInt *****************
   868 ;; Defined at:
   869 ;;		line 229 in file "lcd.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;  column          1    wreg     unsigned char 
   872 ;;  row             1   48[COMRAM] unsigned char 
   873 ;;  value           1   49[COMRAM] unsigned char 
   874 ;; Auto vars:     Size  Location     Type
   875 ;;  column          1    0[BANK0 ] unsigned char 
   876 ;;  string          3    1[BANK0 ] unsigned char [3]
   877 ;; Return value:  Size  Location     Type
   878 ;;                  1    wreg      void 
   879 ;; Registers used:
   880 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   881 ;; Tracked objects:
   882 ;;		On entry : 0/0
   883 ;;		On exit  : 0/0
   884 ;;		Unchanged: 0/0
   885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   886 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   887 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   889 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   890 ;;Total ram usage:        6 bytes
   891 ;; Hardware stack levels used:    1
   892 ;; Hardware stack levels required when called:   12
   893 ;; This function calls:
   894 ;;		_LCDGoto
   895 ;;		_LCDWriteStr
   896 ;;		___awdiv
   897 ;;		___awmod
   898 ;; This function is called by:
   899 ;;		_show_debug
   900 ;; This function uses a non-reentrant model
   901 ;;
   902                           
   903                           	psect	text4
   904  00154A                     __ptext4:
   905                           	opt stack 0
   906  00154A                     _LCDWriteInt:
   907                           	opt stack 15
   908                           
   909                           ;incstack = 0
   910                           ;LCDWriteInt@column stored from wreg
   911  00154A  0100               	movlb	0	; () banked
   912  00154C  6F60               	movwf	LCDWriteInt@column& (0+255),b
   913                           
   914                           ;lcd.c: 230: char string[3];
   915                           ;lcd.c: 232: string[0] = value / 10 + '0';
   916  00154E  C032  F026         	movff	LCDWriteInt@value,___awdiv@dividend
   917  001552  6A27               	clrf	___awdiv@dividend+1,c
   918  001554  0E00               	movlw	0
   919  001556  6E29               	movwf	___awdiv@divisor+1,c
   920  001558  0E0A               	movlw	10
   921  00155A  6E28               	movwf	___awdiv@divisor,c
   922  00155C  ECFA  F008         	call	___awdiv	;wreg free
   923  001560  5026               	movf	?___awdiv,w,c
   924  001562  0F30               	addlw	48
   925  001564  0100               	movlb	0	; () banked
   926  001566  6F61               	movwf	LCDWriteInt@string& (0+255),b
   927                           
   928                           ;lcd.c: 233: string[1] = value % 10 + '0';
   929  001568  C032  F026         	movff	LCDWriteInt@value,___awmod@dividend
   930  00156C  6A27               	clrf	___awmod@dividend+1,c
   931  00156E  0E00               	movlw	0
   932  001570  6E29               	movwf	___awmod@divisor+1,c
   933  001572  0E0A               	movlw	10
   934  001574  6E28               	movwf	___awmod@divisor,c
   935  001576  ECFE  F009         	call	___awmod	;wreg free
   936  00157A  5026               	movf	?___awmod,w,c
   937  00157C  0F30               	addlw	48
   938  00157E  0100               	movlb	0	; () banked
   939  001580  6F62               	movwf	(LCDWriteInt@string+1)& (0+255),b
   940                           
   941                           ; BSR set to: 0
   942                           ;lcd.c: 234: string[2] = '\0';
   943  001582  0E00               	movlw	0
   944  001584  0100               	movlb	0	; () banked
   945  001586  6F63               	movwf	(LCDWriteInt@string+2)& (0+255),b
   946                           
   947                           ; BSR set to: 0
   948                           ;lcd.c: 236: LCDGoto(column, row);
   949  001588  C031  F02B         	movff	LCDWriteInt@row,LCDGoto@row
   950  00158C  0100               	movlb	0	; () banked
   951  00158E  5160               	movf	LCDWriteInt@column& (0+255),w,b
   952  001590  EC3C  F00B         	call	_LCDGoto
   953                           
   954                           ;lcd.c: 237: LCDWriteStr(string);
   955  001594  0E61               	movlw	low LCDWriteInt@string
   956  001596  6E2C               	movwf	LCDWriteStr@string,c
   957  001598  0E00               	movlw	high LCDWriteInt@string
   958  00159A  6E2D               	movwf	LCDWriteStr@string+1,c
   959  00159C  EC7E  F009         	call	_LCDWriteStr	;wreg free
   960  0015A0  0012               	return		;funcret
   961  0015A2                     __end_of_LCDWriteInt:
   962                           	opt stack 0
   963                           tblptru	equ	0xFF8
   964                           tblptrh	equ	0xFF7
   965                           tblptrl	equ	0xFF6
   966                           tablat	equ	0xFF5
   967                           intcon	equ	0xFF2
   968                           intcon2	equ	0xFF1
   969                           intcon3	equ	0xFF0
   970                           postinc0	equ	0xFEE
   971                           postdec1	equ	0xFE5
   972                           fsr1l	equ	0xFE1
   973                           
   974 ;; *************** function ___awmod *****************
   975 ;; Defined at:
   976 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
   977 ;; Parameters:    Size  Location     Type
   978 ;;  dividend        2   37[COMRAM] int 
   979 ;;  divisor         2   39[COMRAM] int 
   980 ;; Auto vars:     Size  Location     Type
   981 ;;  sign            1   42[COMRAM] unsigned char 
   982 ;;  counter         1   41[COMRAM] unsigned char 
   983 ;; Return value:  Size  Location     Type
   984 ;;                  2   37[COMRAM] int 
   985 ;; Registers used:
   986 ;;		wreg, status,2, status,0
   987 ;; Tracked objects:
   988 ;;		On entry : 0/0
   989 ;;		On exit  : 0/0
   990 ;;		Unchanged: 0/0
   991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   992 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   993 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   995 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   996 ;;Total ram usage:        6 bytes
   997 ;; Hardware stack levels used:    1
   998 ;; Hardware stack levels required when called:    8
   999 ;; This function calls:
  1000 ;;		Nothing
  1001 ;; This function is called by:
  1002 ;;		_LCDWriteInt
  1003 ;;		_LCDPutByte
  1004 ;; This function uses a non-reentrant model
  1005 ;;
  1006                           
  1007                           	psect	text5
  1008  0013FC                     __ptext5:
  1009                           	opt stack 0
  1010  0013FC                     ___awmod:
  1011                           	opt stack 18
  1012                           
  1013                           ;incstack = 0
  1014  0013FC  0E00               	movlw	0
  1015  0013FE  6E2B               	movwf	___awmod@sign,c
  1016  001400  AE27               	btfss	___awmod@dividend+1,7,c
  1017  001402  D006               	goto	l2080
  1018  001404  6C26               	negf	___awmod@dividend,c
  1019  001406  1E27               	comf	___awmod@dividend+1,f,c
  1020  001408  B0D8               	btfsc	status,0,c
  1021  00140A  2A27               	incf	___awmod@dividend+1,f,c
  1022  00140C  0E01               	movlw	1
  1023  00140E  6E2B               	movwf	___awmod@sign,c
  1024  001410                     l2080:
  1025  001410  AE29               	btfss	___awmod@divisor+1,7,c
  1026  001412  D004               	goto	l2084
  1027  001414  6C28               	negf	___awmod@divisor,c
  1028  001416  1E29               	comf	___awmod@divisor+1,f,c
  1029  001418  B0D8               	btfsc	status,0,c
  1030  00141A  2A29               	incf	___awmod@divisor+1,f,c
  1031  00141C                     l2084:
  1032  00141C  5028               	movf	___awmod@divisor,w,c
  1033  00141E  1029               	iorwf	___awmod@divisor+1,w,c
  1034  001420  B4D8               	btfsc	status,2,c
  1035  001422  D018               	goto	l2100
  1036  001424  0E01               	movlw	1
  1037  001426  6E2A               	movwf	___awmod@counter,c
  1038  001428  D004               	goto	l2090
  1039  00142A                     l2088:
  1040  00142A  90D8               	bcf	status,0,c
  1041  00142C  3628               	rlcf	___awmod@divisor,f,c
  1042  00142E  3629               	rlcf	___awmod@divisor+1,f,c
  1043  001430  2A2A               	incf	___awmod@counter,f,c
  1044  001432                     l2090:
  1045  001432  AE29               	btfss	___awmod@divisor+1,7,c
  1046  001434  D7FA               	goto	l2088
  1047  001436                     l2092:
  1048  001436  5028               	movf	___awmod@divisor,w,c
  1049  001438  5C26               	subwf	___awmod@dividend,w,c
  1050  00143A  5029               	movf	___awmod@divisor+1,w,c
  1051  00143C  5827               	subwfb	___awmod@dividend+1,w,c
  1052  00143E  A0D8               	btfss	status,0,c
  1053  001440  D004               	goto	l2096
  1054  001442  5028               	movf	___awmod@divisor,w,c
  1055  001444  5E26               	subwf	___awmod@dividend,f,c
  1056  001446  5029               	movf	___awmod@divisor+1,w,c
  1057  001448  5A27               	subwfb	___awmod@dividend+1,f,c
  1058  00144A                     l2096:
  1059  00144A  90D8               	bcf	status,0,c
  1060  00144C  3229               	rrcf	___awmod@divisor+1,f,c
  1061  00144E  3228               	rrcf	___awmod@divisor,f,c
  1062  001450  2E2A               	decfsz	___awmod@counter,f,c
  1063  001452  D7F1               	goto	l2092
  1064  001454                     l2100:
  1065  001454  502B               	movf	___awmod@sign,w,c
  1066  001456  B4D8               	btfsc	status,2,c
  1067  001458  D004               	goto	l2104
  1068  00145A  6C26               	negf	___awmod@dividend,c
  1069  00145C  1E27               	comf	___awmod@dividend+1,f,c
  1070  00145E  B0D8               	btfsc	status,0,c
  1071  001460  2A27               	incf	___awmod@dividend+1,f,c
  1072  001462                     l2104:
  1073  001462  C026  F026         	movff	___awmod@dividend,?___awmod
  1074  001466  C027  F027         	movff	___awmod@dividend+1,?___awmod+1
  1075  00146A  0012               	return	
  1076  00146C                     __end_of___awmod:
  1077                           	opt stack 0
  1078                           tblptru	equ	0xFF8
  1079                           tblptrh	equ	0xFF7
  1080                           tblptrl	equ	0xFF6
  1081                           tablat	equ	0xFF5
  1082                           intcon	equ	0xFF2
  1083                           intcon2	equ	0xFF1
  1084                           intcon3	equ	0xFF0
  1085                           postinc0	equ	0xFEE
  1086                           postdec1	equ	0xFE5
  1087                           fsr1l	equ	0xFE1
  1088                           status	equ	0xFD8
  1089                           
  1090 ;; *************** function ___awdiv *****************
  1091 ;; Defined at:
  1092 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  1093 ;; Parameters:    Size  Location     Type
  1094 ;;  dividend        2   37[COMRAM] int 
  1095 ;;  divisor         2   39[COMRAM] int 
  1096 ;; Auto vars:     Size  Location     Type
  1097 ;;  quotient        2   43[COMRAM] int 
  1098 ;;  sign            1   42[COMRAM] unsigned char 
  1099 ;;  counter         1   41[COMRAM] unsigned char 
  1100 ;; Return value:  Size  Location     Type
  1101 ;;                  2   37[COMRAM] int 
  1102 ;; Registers used:
  1103 ;;		wreg, status,2, status,0
  1104 ;; Tracked objects:
  1105 ;;		On entry : 0/0
  1106 ;;		On exit  : 0/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1109 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1110 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1112 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1113 ;;Total ram usage:        8 bytes
  1114 ;; Hardware stack levels used:    1
  1115 ;; Hardware stack levels required when called:    8
  1116 ;; This function calls:
  1117 ;;		Nothing
  1118 ;; This function is called by:
  1119 ;;		_LCDWriteInt
  1120 ;;		_LCDPutByte
  1121 ;; This function uses a non-reentrant model
  1122 ;;
  1123                           
  1124                           	psect	text6
  1125  0011F4                     __ptext6:
  1126                           	opt stack 0
  1127  0011F4                     ___awdiv:
  1128                           	opt stack 18
  1129                           
  1130                           ;incstack = 0
  1131  0011F4  0E00               	movlw	0
  1132  0011F6  6E2B               	movwf	___awdiv@sign,c
  1133  0011F8  AE29               	btfss	___awdiv@divisor+1,7,c
  1134  0011FA  D006               	goto	l2036
  1135  0011FC  6C28               	negf	___awdiv@divisor,c
  1136  0011FE  1E29               	comf	___awdiv@divisor+1,f,c
  1137  001200  B0D8               	btfsc	status,0,c
  1138  001202  2A29               	incf	___awdiv@divisor+1,f,c
  1139  001204  0E01               	movlw	1
  1140  001206  6E2B               	movwf	___awdiv@sign,c
  1141  001208                     l2036:
  1142  001208  AE27               	btfss	___awdiv@dividend+1,7,c
  1143  00120A  D006               	goto	l2042
  1144  00120C  6C26               	negf	___awdiv@dividend,c
  1145  00120E  1E27               	comf	___awdiv@dividend+1,f,c
  1146  001210  B0D8               	btfsc	status,0,c
  1147  001212  2A27               	incf	___awdiv@dividend+1,f,c
  1148  001214  0E01               	movlw	1
  1149  001216  1A2B               	xorwf	___awdiv@sign,f,c
  1150  001218                     l2042:
  1151  001218  0E00               	movlw	0
  1152  00121A  6E2D               	movwf	___awdiv@quotient+1,c
  1153  00121C  0E00               	movlw	0
  1154  00121E  6E2C               	movwf	___awdiv@quotient,c
  1155  001220  5028               	movf	___awdiv@divisor,w,c
  1156  001222  1029               	iorwf	___awdiv@divisor+1,w,c
  1157  001224  B4D8               	btfsc	status,2,c
  1158  001226  D01C               	goto	l2064
  1159  001228  0E01               	movlw	1
  1160  00122A  6E2A               	movwf	___awdiv@counter,c
  1161  00122C  D004               	goto	l2050
  1162  00122E                     l2048:
  1163  00122E  90D8               	bcf	status,0,c
  1164  001230  3628               	rlcf	___awdiv@divisor,f,c
  1165  001232  3629               	rlcf	___awdiv@divisor+1,f,c
  1166  001234  2A2A               	incf	___awdiv@counter,f,c
  1167  001236                     l2050:
  1168  001236  AE29               	btfss	___awdiv@divisor+1,7,c
  1169  001238  D7FA               	goto	l2048
  1170  00123A                     l2052:
  1171  00123A  90D8               	bcf	status,0,c
  1172  00123C  362C               	rlcf	___awdiv@quotient,f,c
  1173  00123E  362D               	rlcf	___awdiv@quotient+1,f,c
  1174  001240  5028               	movf	___awdiv@divisor,w,c
  1175  001242  5C26               	subwf	___awdiv@dividend,w,c
  1176  001244  5029               	movf	___awdiv@divisor+1,w,c
  1177  001246  5827               	subwfb	___awdiv@dividend+1,w,c
  1178  001248  A0D8               	btfss	status,0,c
  1179  00124A  D005               	goto	l2060
  1180  00124C  5028               	movf	___awdiv@divisor,w,c
  1181  00124E  5E26               	subwf	___awdiv@dividend,f,c
  1182  001250  5029               	movf	___awdiv@divisor+1,w,c
  1183  001252  5A27               	subwfb	___awdiv@dividend+1,f,c
  1184  001254  802C               	bsf	___awdiv@quotient,0,c
  1185  001256                     l2060:
  1186  001256  90D8               	bcf	status,0,c
  1187  001258  3229               	rrcf	___awdiv@divisor+1,f,c
  1188  00125A  3228               	rrcf	___awdiv@divisor,f,c
  1189  00125C  2E2A               	decfsz	___awdiv@counter,f,c
  1190  00125E  D7ED               	goto	l2052
  1191  001260                     l2064:
  1192  001260  502B               	movf	___awdiv@sign,w,c
  1193  001262  B4D8               	btfsc	status,2,c
  1194  001264  D004               	goto	l2068
  1195  001266  6C2C               	negf	___awdiv@quotient,c
  1196  001268  1E2D               	comf	___awdiv@quotient+1,f,c
  1197  00126A  B0D8               	btfsc	status,0,c
  1198  00126C  2A2D               	incf	___awdiv@quotient+1,f,c
  1199  00126E                     l2068:
  1200  00126E  C02C  F026         	movff	___awdiv@quotient,?___awdiv
  1201  001272  C02D  F027         	movff	___awdiv@quotient+1,?___awdiv+1
  1202  001276  0012               	return	
  1203  001278                     __end_of___awdiv:
  1204                           	opt stack 0
  1205                           tblptru	equ	0xFF8
  1206                           tblptrh	equ	0xFF7
  1207                           tblptrl	equ	0xFF6
  1208                           tablat	equ	0xFF5
  1209                           intcon	equ	0xFF2
  1210                           intcon2	equ	0xFF1
  1211                           intcon3	equ	0xFF0
  1212                           postinc0	equ	0xFEE
  1213                           postdec1	equ	0xFE5
  1214                           fsr1l	equ	0xFE1
  1215                           status	equ	0xFD8
  1216                           
  1217 ;; *************** function _LCDWriteStr *****************
  1218 ;; Defined at:
  1219 ;;		line 193 in file "lcd.c"
  1220 ;; Parameters:    Size  Location     Type
  1221 ;;  string          2   43[COMRAM] PTR const unsigned char 
  1222 ;;		 -> LCDWriteInt@string(3), LCDWriteFloat@string(5), LCDWriteHexa@string(3), STR_1(11), 
  1223 ;; Auto vars:     Size  Location     Type
  1224 ;;  i               1   47[COMRAM] unsigned char 
  1225 ;; Return value:  Size  Location     Type
  1226 ;;                  1    wreg      void 
  1227 ;; Registers used:
  1228 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1229 ;; Tracked objects:
  1230 ;;		On entry : 0/0
  1231 ;;		On exit  : 0/0
  1232 ;;		Unchanged: 0/0
  1233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1234 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1235 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1236 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1237 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1238 ;;Total ram usage:        5 bytes
  1239 ;; Hardware stack levels used:    1
  1240 ;; Hardware stack levels required when called:   11
  1241 ;; This function calls:
  1242 ;;		_LCDPutChar
  1243 ;; This function is called by:
  1244 ;;		_init_debug
  1245 ;;		_LCDWriteInt
  1246 ;;		_LCDWriteHexa
  1247 ;;		_LCDWriteFloat
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           	psect	text7
  1252  0012FC                     __ptext7:
  1253                           	opt stack 0
  1254  0012FC                     _LCDWriteStr:
  1255                           	opt stack 15
  1256                           
  1257                           ;lcd.c: 195: UINT8_T i = 0;
  1258                           
  1259                           ;incstack = 0
  1260  0012FC  0E00               	movlw	0
  1261  0012FE  6E30               	movwf	LCDWriteStr@i,c
  1262                           
  1263                           ;lcd.c: 197: while (string[i])
  1264  001300  D01E               	goto	l2026
  1265  001302                     l2022:
  1266                           
  1267                           ;lcd.c: 198: LCDPutChar(string[i++]);
  1268  001302  5030               	movf	LCDWriteStr@i,w,c
  1269  001304  0D01               	mullw	1
  1270  001306  C02C  F02E         	movff	LCDWriteStr@string,??_LCDWriteStr
  1271  00130A  C02D  F02F         	movff	LCDWriteStr@string+1,??_LCDWriteStr+1
  1272  00130E  50F3               	movf	prodl,w,c
  1273  001310  262E               	addwf	??_LCDWriteStr,f,c
  1274  001312  50F4               	movf	prodh,w,c
  1275  001314  222F               	addwfc	??_LCDWriteStr+1,f,c
  1276  001316  C02E  FFF6         	movff	??_LCDWriteStr,tblptrl
  1277  00131A  C02F  FFF7         	movff	??_LCDWriteStr+1,tblptrh
  1278  00131E  0E00               	movlw	low (__smallconst shr (0+16))
  1279  001320  6EF8               	movwf	tblptru,c
  1280  001322  0E0F               	movlw	(high __ramtop+-1)
  1281  001324  64F7               	cpfsgt	tblptrh,c
  1282  001326  D003               	bra	u1227
  1283  001328  0008               	tblrd		*
  1284  00132A  50F5               	movf	tablat,w,c
  1285  00132C  D005               	bra	u1220
  1286  00132E                     u1227:
  1287  00132E  CFF6 FFE9          	movff	tblptrl,fsr0l
  1288  001332  CFF7 FFEA          	movff	tblptrh,fsr0h
  1289  001336  50EF               	movf	indf0,w,c
  1290  001338                     u1220:
  1291  001338  EC09  F00C         	call	_LCDPutChar
  1292  00133C  2A30               	incf	LCDWriteStr@i,f,c
  1293  00133E                     l2026:
  1294  00133E  5030               	movf	LCDWriteStr@i,w,c
  1295  001340  0D01               	mullw	1
  1296  001342  C02C  F02E         	movff	LCDWriteStr@string,??_LCDWriteStr
  1297  001346  C02D  F02F         	movff	LCDWriteStr@string+1,??_LCDWriteStr+1
  1298  00134A  50F3               	movf	prodl,w,c
  1299  00134C  262E               	addwf	??_LCDWriteStr,f,c
  1300  00134E  50F4               	movf	prodh,w,c
  1301  001350  222F               	addwfc	??_LCDWriteStr+1,f,c
  1302  001352  C02E  FFF6         	movff	??_LCDWriteStr,tblptrl
  1303  001356  C02F  FFF7         	movff	??_LCDWriteStr+1,tblptrh
  1304  00135A  0E00               	movlw	low (__smallconst shr (0+16))
  1305  00135C  6EF8               	movwf	tblptru,c
  1306  00135E  0E0F               	movlw	(high __ramtop+-1)
  1307  001360  64F7               	cpfsgt	tblptrh,c
  1308  001362  D003               	bra	u1237
  1309  001364  0008               	tblrd		*
  1310  001366  50F5               	movf	tablat,w,c
  1311  001368  D005               	bra	u1230
  1312  00136A                     u1237:
  1313  00136A  CFF6 FFE9          	movff	tblptrl,fsr0l
  1314  00136E  CFF7 FFEA          	movff	tblptrh,fsr0h
  1315  001372  50EF               	movf	indf0,w,c
  1316  001374                     u1230:
  1317  001374  0900               	iorlw	0
  1318  001376  B4D8               	btfsc	status,2,c
  1319  001378  0012               	return	
  1320  00137A  D7C3               	goto	l2022
  1321  00137C                     __end_of_LCDWriteStr:
  1322                           	opt stack 0
  1323                           tblptru	equ	0xFF8
  1324                           tblptrh	equ	0xFF7
  1325                           tblptrl	equ	0xFF6
  1326                           tablat	equ	0xFF5
  1327                           prodh	equ	0xFF4
  1328                           prodl	equ	0xFF3
  1329                           intcon	equ	0xFF2
  1330                           intcon2	equ	0xFF1
  1331                           intcon3	equ	0xFF0
  1332                           indf0	equ	0xFEF
  1333                           postinc0	equ	0xFEE
  1334                           fsr0h	equ	0xFEA
  1335                           fsr0l	equ	0xFE9
  1336                           postdec1	equ	0xFE5
  1337                           fsr1l	equ	0xFE1
  1338                           status	equ	0xFD8
  1339                           
  1340 ;; *************** function _LCDPutChar *****************
  1341 ;; Defined at:
  1342 ;;		line 180 in file "lcd.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;  data            1    wreg     unsigned char 
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;  data            1   42[COMRAM] unsigned char 
  1347 ;; Return value:  Size  Location     Type
  1348 ;;                  1    wreg      void 
  1349 ;; Registers used:
  1350 ;;		wreg, status,2, status,0, cstack
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1357 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1359 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1360 ;;Total ram usage:        1 bytes
  1361 ;; Hardware stack levels used:    1
  1362 ;; Hardware stack levels required when called:   10
  1363 ;; This function calls:
  1364 ;;		_WaitLCD
  1365 ;;		_WriteByte
  1366 ;; This function is called by:
  1367 ;;		_LCDWriteStr
  1368 ;;		_LCDPutByte
  1369 ;; This function uses a non-reentrant model
  1370 ;;
  1371                           
  1372                           	psect	text8
  1373  001812                     __ptext8:
  1374                           	opt stack 0
  1375  001812                     _LCDPutChar:
  1376                           	opt stack 15
  1377                           
  1378                           ;incstack = 0
  1379                           ;LCDPutChar@data stored from wreg
  1380  001812  6E2B               	movwf	LCDPutChar@data,c
  1381                           
  1382                           ;lcd.c: 182: WriteByte(0, data);
  1383  001814  C02B  F029         	movff	LCDPutChar@data,WriteByte@data
  1384  001818  0E00               	movlw	0
  1385  00181A  ECEF  F00B         	call	_WriteByte
  1386                           
  1387                           ;lcd.c: 183: WaitLCD();
  1388  00181E  EC12  F00C         	call	_WaitLCD	;wreg free
  1389  001822  0012               	return		;funcret
  1390  001824                     __end_of_LCDPutChar:
  1391                           	opt stack 0
  1392                           tblptru	equ	0xFF8
  1393                           tblptrh	equ	0xFF7
  1394                           tblptrl	equ	0xFF6
  1395                           tablat	equ	0xFF5
  1396                           prodh	equ	0xFF4
  1397                           prodl	equ	0xFF3
  1398                           intcon	equ	0xFF2
  1399                           intcon2	equ	0xFF1
  1400                           intcon3	equ	0xFF0
  1401                           indf0	equ	0xFEF
  1402                           postinc0	equ	0xFEE
  1403                           fsr0h	equ	0xFEA
  1404                           fsr0l	equ	0xFE9
  1405                           postdec1	equ	0xFE5
  1406                           fsr1l	equ	0xFE1
  1407                           status	equ	0xFD8
  1408                           
  1409 ;; *************** function _LCDGoto *****************
  1410 ;; Defined at:
  1411 ;;		line 171 in file "lcd.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;  column          1    wreg     unsigned char 
  1414 ;;  row             1   42[COMRAM] unsigned char 
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;  column          1   47[COMRAM] unsigned char 
  1417 ;; Return value:  Size  Location     Type
  1418 ;;                  1    wreg      void 
  1419 ;; Registers used:
  1420 ;;		wreg, status,2, status,0, cstack
  1421 ;; Tracked objects:
  1422 ;;		On entry : 0/0
  1423 ;;		On exit  : 0/0
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1426 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1427 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1428 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1429 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1430 ;;Total ram usage:        6 bytes
  1431 ;; Hardware stack levels used:    1
  1432 ;; Hardware stack levels required when called:   10
  1433 ;; This function calls:
  1434 ;;		_WaitLCD
  1435 ;;		_WriteByte
  1436 ;; This function is called by:
  1437 ;;		_init_debug
  1438 ;;		_LCDWriteInt
  1439 ;;		_LCDWriteHexa
  1440 ;;		_LCDWriteFloat
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           	psect	text9
  1445  001678                     __ptext9:
  1446                           	opt stack 0
  1447  001678                     _LCDGoto:
  1448                           	opt stack 16
  1449                           
  1450                           ;incstack = 0
  1451                           ;LCDGoto@column stored from wreg
  1452  001678  6E30               	movwf	LCDGoto@column,c
  1453                           
  1454                           ;lcd.c: 173: if ((row > (2 - 1)) || (column > (16 - 1)))
  1455  00167A  0E02               	movlw	2
  1456  00167C  602B               	cpfslt	LCDGoto@row,c
  1457  00167E  0012               	return	
  1458  001680  0E0F               	movlw	15
  1459  001682  6430               	cpfsgt	LCDGoto@column,c
  1460  001684  D001               	goto	l2010
  1461  001686  0012               	return	
  1462  001688                     l2010:
  1463                           
  1464                           ;lcd.c: 176: WriteByte(1, (row == 1) ? (0xC0 | column) : (0x80 | column));
  1465  001688  042B               	decf	LCDGoto@row,w,c
  1466  00168A  B4D8               	btfsc	status,2,c
  1467  00168C  D002               	goto	l2014
  1468  00168E  0E80               	movlw	128
  1469  001690  D001               	goto	L1
  1470  001692                     l2014:
  1471  001692  0EC0               	movlw	192
  1472  001694                     L1:
  1473  001694  C030  F02C         	movff	LCDGoto@column,??_LCDGoto
  1474  001698  6A2D               	clrf	(??_LCDGoto+1)& (0+255),c
  1475  00169A  102C               	iorwf	??_LCDGoto,w,c
  1476  00169C  6E2E               	movwf	_LCDGoto$661,c
  1477  00169E  502D               	movf	??_LCDGoto+1,w,c
  1478  0016A0  6E2F               	movwf	_LCDGoto$661+1,c
  1479  0016A2  C02E  F029         	movff	_LCDGoto$661,WriteByte@data
  1480  0016A6  0E01               	movlw	1
  1481  0016A8  ECEF  F00B         	call	_WriteByte
  1482                           
  1483                           ;lcd.c: 177: WaitLCD();
  1484  0016AC  EC12  F00C         	call	_WaitLCD	;wreg free
  1485  0016B0  0012               	return		;funcret
  1486  0016B2                     __end_of_LCDGoto:
  1487                           	opt stack 0
  1488                           tblptru	equ	0xFF8
  1489                           tblptrh	equ	0xFF7
  1490                           tblptrl	equ	0xFF6
  1491                           tablat	equ	0xFF5
  1492                           prodh	equ	0xFF4
  1493                           prodl	equ	0xFF3
  1494                           intcon	equ	0xFF2
  1495                           intcon2	equ	0xFF1
  1496                           intcon3	equ	0xFF0
  1497                           indf0	equ	0xFEF
  1498                           postinc0	equ	0xFEE
  1499                           fsr0h	equ	0xFEA
  1500                           fsr0l	equ	0xFE9
  1501                           postdec1	equ	0xFE5
  1502                           fsr1l	equ	0xFE1
  1503                           status	equ	0xFD8
  1504                           
  1505 ;; *************** function _LCDInit *****************
  1506 ;; Defined at:
  1507 ;;		line 89 in file "lcd.c"
  1508 ;; Parameters:    Size  Location     Type
  1509 ;;		None
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;		None
  1512 ;; Return value:  Size  Location     Type
  1513 ;;                  1    wreg      void 
  1514 ;; Registers used:
  1515 ;;		wreg, status,2, status,0, cstack
  1516 ;; Tracked objects:
  1517 ;;		On entry : 0/0
  1518 ;;		On exit  : 0/0
  1519 ;;		Unchanged: 0/0
  1520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1523 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1524 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1525 ;;Total ram usage:        1 bytes
  1526 ;; Hardware stack levels used:    1
  1527 ;; Hardware stack levels required when called:   10
  1528 ;; This function calls:
  1529 ;;		_WaitLCD
  1530 ;;		_WriteNibble
  1531 ;; This function is called by:
  1532 ;;		_init_debug
  1533 ;; This function uses a non-reentrant model
  1534 ;;
  1535                           
  1536                           	psect	text10
  1537  00110C                     __ptext10:
  1538                           	opt stack 0
  1539  00110C                     _LCDInit:
  1540                           	opt stack 18
  1541                           
  1542                           ;lcd.c: 91: TRISDbits.TRISD7 = 0;
  1543                           
  1544                           ;incstack = 0
  1545  00110C  9E95               	bcf	3989,7,c	;volatile
  1546                           
  1547                           ;lcd.c: 92: TRISDbits.TRISD6 = 0;
  1548  00110E  9C95               	bcf	3989,6,c	;volatile
  1549                           
  1550                           ;lcd.c: 93: TRISDbits.TRISD5 = 0;
  1551  001110  9A95               	bcf	3989,5,c	;volatile
  1552                           
  1553                           ;lcd.c: 94: TRISDbits.TRISD4 = 0;
  1554  001112  9895               	bcf	3989,4,c	;volatile
  1555                           
  1556                           ;lcd.c: 95: TRISDbits.TRISD0 = 0;
  1557  001114  9095               	bcf	3989,0,c	;volatile
  1558                           
  1559                           ;lcd.c: 96: TRISDbits.TRISD1 = 0;
  1560  001116  9295               	bcf	3989,1,c	;volatile
  1561                           
  1562                           ;lcd.c: 97: TRISDbits.TRISD2 = 0;
  1563  001118  9495               	bcf	3989,2,c	;volatile
  1564                           
  1565                           ;lcd.c: 98: TRISDbits.TRISD3 = 0;
  1566  00111A  9695               	bcf	3989,3,c	;volatile
  1567                           
  1568                           ;lcd.c: 136: LATDbits.LATD7 = 1;
  1569  00111C  8E8C               	bsf	3980,7,c	;volatile
  1570                           
  1571                           ;lcd.c: 137: _delay(30000);
  1572  00111E  0E27               	movlw	39
  1573  001120  6E29               	movwf	??_LCDInit& (0+255),c
  1574  001122  0EF5               	movlw	245
  1575  001124                     u1687:
  1576  001124  2EE8               	decfsz	wreg,f,c
  1577  001126  D7FE               	bra	u1687
  1578  001128  2E29               	decfsz	??_LCDInit& (0+255),f,c
  1579  00112A  D7FC               	bra	u1687
  1580  00112C  F000               	nop	
  1581                           
  1582                           ;lcd.c: 138: WriteNibble(1, 0x03);
  1583  00112E  0E03               	movlw	3
  1584  001130  6E26               	movwf	WriteNibble@data,c
  1585  001132  0E01               	movlw	1
  1586  001134  ECF8  F00A         	call	_WriteNibble
  1587                           
  1588                           ;lcd.c: 139: _delay(3000);
  1589  001138  0E04               	movlw	4
  1590  00113A  6E29               	movwf	??_LCDInit& (0+255),c
  1591  00113C  0EE4               	movlw	228
  1592  00113E                     u1697:
  1593  00113E  2EE8               	decfsz	wreg,f,c
  1594  001140  D7FE               	bra	u1697
  1595  001142  2E29               	decfsz	??_LCDInit& (0+255),f,c
  1596  001144  D7FC               	bra	u1697
  1597  001146  D000               	nop2	
  1598                           
  1599                           ;lcd.c: 140: WriteNibble(1, 0x03);
  1600  001148  0E03               	movlw	3
  1601  00114A  6E26               	movwf	WriteNibble@data,c
  1602  00114C  0E01               	movlw	1
  1603  00114E  ECF8  F00A         	call	_WriteNibble
  1604                           
  1605                           ;lcd.c: 141: _delay(100);
  1606  001152  0E21               	movlw	33
  1607  001154                     u1707:
  1608  001154  2EE8               	decfsz	wreg,f,c
  1609  001156  D7FE               	bra	u1707
  1610  001158  F000               	nop	
  1611                           
  1612                           ;lcd.c: 142: WriteNibble(1, 0x03);
  1613  00115A  0E03               	movlw	3
  1614  00115C  6E26               	movwf	WriteNibble@data,c
  1615  00115E  0E01               	movlw	1
  1616  001160  ECF8  F00A         	call	_WriteNibble
  1617                           
  1618                           ;lcd.c: 143: _delay(100);
  1619  001164  0E21               	movlw	33
  1620  001166                     u1717:
  1621  001166  2EE8               	decfsz	wreg,f,c
  1622  001168  D7FE               	bra	u1717
  1623  00116A  F000               	nop	
  1624                           
  1625                           ;lcd.c: 144: WriteNibble(1, 0b00000010);
  1626  00116C  0E02               	movlw	2
  1627  00116E  6E26               	movwf	WriteNibble@data,c
  1628  001170  0E01               	movlw	1
  1629  001172  ECF8  F00A         	call	_WriteNibble
  1630                           
  1631                           ;lcd.c: 145: WaitLCD();
  1632  001176  EC12  F00C         	call	_WaitLCD	;wreg free
  1633                           
  1634                           ;lcd.c: 146: WriteNibble(1, 0b00000010);
  1635  00117A  0E02               	movlw	2
  1636  00117C  6E26               	movwf	WriteNibble@data,c
  1637  00117E  0E01               	movlw	1
  1638  001180  ECF8  F00A         	call	_WriteNibble
  1639                           
  1640                           ;lcd.c: 147: WriteNibble(1, 0b00001000);
  1641  001184  0E08               	movlw	8
  1642  001186  6E26               	movwf	WriteNibble@data,c
  1643  001188  0E01               	movlw	1
  1644  00118A  ECF8  F00A         	call	_WriteNibble
  1645                           
  1646                           ;lcd.c: 148: WaitLCD();
  1647  00118E  EC12  F00C         	call	_WaitLCD	;wreg free
  1648                           
  1649                           ;lcd.c: 149: WriteNibble(1, 0b00000000);
  1650  001192  0E00               	movlw	0
  1651  001194  6E26               	movwf	WriteNibble@data,c
  1652  001196  0E01               	movlw	1
  1653  001198  ECF8  F00A         	call	_WriteNibble
  1654                           
  1655                           ;lcd.c: 150: WriteNibble(1, 0b00001000);
  1656  00119C  0E08               	movlw	8
  1657  00119E  6E26               	movwf	WriteNibble@data,c
  1658  0011A0  0E01               	movlw	1
  1659  0011A2  ECF8  F00A         	call	_WriteNibble
  1660                           
  1661                           ;lcd.c: 151: WaitLCD();
  1662  0011A6  EC12  F00C         	call	_WaitLCD	;wreg free
  1663                           
  1664                           ;lcd.c: 152: WriteNibble(1, 0b00000000);
  1665  0011AA  0E00               	movlw	0
  1666  0011AC  6E26               	movwf	WriteNibble@data,c
  1667  0011AE  0E01               	movlw	1
  1668  0011B0  ECF8  F00A         	call	_WriteNibble
  1669                           
  1670                           ;lcd.c: 153: WriteNibble(1, 0b00001100);
  1671  0011B4  0E0C               	movlw	12
  1672  0011B6  6E26               	movwf	WriteNibble@data,c
  1673  0011B8  0E01               	movlw	1
  1674  0011BA  ECF8  F00A         	call	_WriteNibble
  1675                           
  1676                           ;lcd.c: 155: WaitLCD();
  1677  0011BE  EC12  F00C         	call	_WaitLCD	;wreg free
  1678                           
  1679                           ;lcd.c: 156: WriteNibble(1, 0b00000000);
  1680  0011C2  0E00               	movlw	0
  1681  0011C4  6E26               	movwf	WriteNibble@data,c
  1682  0011C6  0E01               	movlw	1
  1683  0011C8  ECF8  F00A         	call	_WriteNibble
  1684                           
  1685                           ;lcd.c: 157: WriteNibble(1, 0b00000001);
  1686  0011CC  0E01               	movlw	1
  1687  0011CE  6E26               	movwf	WriteNibble@data,c
  1688  0011D0  0E01               	movlw	1
  1689  0011D2  ECF8  F00A         	call	_WriteNibble
  1690                           
  1691                           ;lcd.c: 158: WaitLCD();
  1692  0011D6  EC12  F00C         	call	_WaitLCD	;wreg free
  1693                           
  1694                           ;lcd.c: 159: WriteNibble(1, 0b00000000);
  1695  0011DA  0E00               	movlw	0
  1696  0011DC  6E26               	movwf	WriteNibble@data,c
  1697  0011DE  0E01               	movlw	1
  1698  0011E0  ECF8  F00A         	call	_WriteNibble
  1699                           
  1700                           ;lcd.c: 160: WriteNibble(1, 0b00000110);
  1701  0011E4  0E06               	movlw	6
  1702  0011E6  6E26               	movwf	WriteNibble@data,c
  1703  0011E8  0E01               	movlw	1
  1704  0011EA  ECF8  F00A         	call	_WriteNibble
  1705                           
  1706                           ;lcd.c: 161: WaitLCD();
  1707  0011EE  EC12  F00C         	call	_WaitLCD	;wreg free
  1708  0011F2  0012               	return		;funcret
  1709  0011F4                     __end_of_LCDInit:
  1710                           	opt stack 0
  1711                           tblptru	equ	0xFF8
  1712                           tblptrh	equ	0xFF7
  1713                           tblptrl	equ	0xFF6
  1714                           tablat	equ	0xFF5
  1715                           prodh	equ	0xFF4
  1716                           prodl	equ	0xFF3
  1717                           intcon	equ	0xFF2
  1718                           intcon2	equ	0xFF1
  1719                           intcon3	equ	0xFF0
  1720                           indf0	equ	0xFEF
  1721                           postinc0	equ	0xFEE
  1722                           fsr0h	equ	0xFEA
  1723                           fsr0l	equ	0xFE9
  1724                           wreg	equ	0xFE8
  1725                           postdec1	equ	0xFE5
  1726                           fsr1l	equ	0xFE1
  1727                           status	equ	0xFD8
  1728                           
  1729 ;; *************** function _LCDClear *****************
  1730 ;; Defined at:
  1731 ;;		line 164 in file "lcd.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;		None
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;		None
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  1    wreg      void 
  1738 ;; Registers used:
  1739 ;;		wreg, status,2, status,0, cstack
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1747 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1748 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1749 ;;Total ram usage:        1 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; Hardware stack levels required when called:   10
  1752 ;; This function calls:
  1753 ;;		_WaitLCD
  1754 ;;		_WriteByte
  1755 ;; This function is called by:
  1756 ;;		_init_debug
  1757 ;; This function uses a non-reentrant model
  1758 ;;
  1759                           
  1760                           	psect	text11
  1761  0017A2                     __ptext11:
  1762                           	opt stack 0
  1763  0017A2                     _LCDClear:
  1764                           	opt stack 18
  1765                           
  1766                           ;lcd.c: 166: WriteByte(1, 0x01);
  1767                           
  1768                           ;incstack = 0
  1769  0017A2  0E01               	movlw	1
  1770  0017A4  6E29               	movwf	WriteByte@data,c
  1771  0017A6  0E01               	movlw	1
  1772  0017A8  ECEF  F00B         	call	_WriteByte
  1773                           
  1774                           ;lcd.c: 167: _delay(12500);
  1775  0017AC  0E11               	movlw	17
  1776  0017AE  6E2B               	movwf	??_LCDClear& (0+255),c
  1777  0017B0  0E3A               	movlw	58
  1778  0017B2                     u1727:
  1779  0017B2  2EE8               	decfsz	wreg,f,c
  1780  0017B4  D7FE               	bra	u1727
  1781  0017B6  2E2B               	decfsz	??_LCDClear& (0+255),f,c
  1782  0017B8  D7FC               	bra	u1727
  1783  0017BA  D000               	nop2	
  1784                           
  1785                           ;lcd.c: 168: WaitLCD();
  1786  0017BC  EC12  F00C         	call	_WaitLCD	;wreg free
  1787  0017C0  0012               	return		;funcret
  1788  0017C2                     __end_of_LCDClear:
  1789                           	opt stack 0
  1790                           tblptru	equ	0xFF8
  1791                           tblptrh	equ	0xFF7
  1792                           tblptrl	equ	0xFF6
  1793                           tablat	equ	0xFF5
  1794                           prodh	equ	0xFF4
  1795                           prodl	equ	0xFF3
  1796                           intcon	equ	0xFF2
  1797                           intcon2	equ	0xFF1
  1798                           intcon3	equ	0xFF0
  1799                           indf0	equ	0xFEF
  1800                           postinc0	equ	0xFEE
  1801                           fsr0h	equ	0xFEA
  1802                           fsr0l	equ	0xFE9
  1803                           wreg	equ	0xFE8
  1804                           postdec1	equ	0xFE5
  1805                           fsr1l	equ	0xFE1
  1806                           status	equ	0xFD8
  1807                           
  1808 ;; *************** function _WriteByte *****************
  1809 ;; Defined at:
  1810 ;;		line 83 in file "lcd.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;  cmd             1    wreg     unsigned char 
  1813 ;;  data            1   40[COMRAM] unsigned char 
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;  cmd             1   41[COMRAM] unsigned char 
  1816 ;; Return value:  Size  Location     Type
  1817 ;;                  1    wreg      void 
  1818 ;; Registers used:
  1819 ;;		wreg, status,2, status,0, cstack
  1820 ;; Tracked objects:
  1821 ;;		On entry : 0/0
  1822 ;;		On exit  : 0/0
  1823 ;;		Unchanged: 0/0
  1824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1825 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1826 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1828 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1829 ;;Total ram usage:        2 bytes
  1830 ;; Hardware stack levels used:    1
  1831 ;; Hardware stack levels required when called:    9
  1832 ;; This function calls:
  1833 ;;		_WriteNibble
  1834 ;; This function is called by:
  1835 ;;		_LCDClear
  1836 ;;		_LCDGoto
  1837 ;;		_LCDPutChar
  1838 ;;		_LCDShiftDisplay
  1839 ;; This function uses a non-reentrant model
  1840 ;;
  1841                           
  1842                           	psect	text12
  1843  0017DE                     __ptext12:
  1844                           	opt stack 0
  1845  0017DE                     _WriteByte:
  1846                           	opt stack 15
  1847                           
  1848                           ;incstack = 0
  1849                           ;WriteByte@cmd stored from wreg
  1850  0017DE  6E2A               	movwf	WriteByte@cmd,c
  1851                           
  1852                           ;lcd.c: 85: WriteNibble(cmd, data >> 4);
  1853  0017E0  3829               	swapf	WriteByte@data,w,c
  1854  0017E2  0B0F               	andlw	15
  1855  0017E4  6E26               	movwf	WriteNibble@data,c
  1856  0017E6  502A               	movf	WriteByte@cmd,w,c
  1857  0017E8  ECF8  F00A         	call	_WriteNibble
  1858                           
  1859                           ;lcd.c: 86: WriteNibble(cmd, data);
  1860  0017EC  C029  F026         	movff	WriteByte@data,WriteNibble@data
  1861  0017F0  502A               	movf	WriteByte@cmd,w,c
  1862  0017F2  ECF8  F00A         	call	_WriteNibble
  1863  0017F6  0012               	return		;funcret
  1864  0017F8                     __end_of_WriteByte:
  1865                           	opt stack 0
  1866                           tblptru	equ	0xFF8
  1867                           tblptrh	equ	0xFF7
  1868                           tblptrl	equ	0xFF6
  1869                           tablat	equ	0xFF5
  1870                           prodh	equ	0xFF4
  1871                           prodl	equ	0xFF3
  1872                           intcon	equ	0xFF2
  1873                           intcon2	equ	0xFF1
  1874                           intcon3	equ	0xFF0
  1875                           indf0	equ	0xFEF
  1876                           postinc0	equ	0xFEE
  1877                           fsr0h	equ	0xFEA
  1878                           fsr0l	equ	0xFE9
  1879                           wreg	equ	0xFE8
  1880                           postdec1	equ	0xFE5
  1881                           fsr1l	equ	0xFE1
  1882                           status	equ	0xFD8
  1883                           
  1884 ;; *************** function _WriteNibble *****************
  1885 ;; Defined at:
  1886 ;;		line 66 in file "lcd.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;  cmd             1    wreg     unsigned char 
  1889 ;;  data            1   37[COMRAM] unsigned char 
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;  cmd             1   39[COMRAM] unsigned char 
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  1    wreg      void 
  1894 ;; Registers used:
  1895 ;;		wreg, status,2, status,0
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1901 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1903 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1904 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1905 ;;Total ram usage:        3 bytes
  1906 ;; Hardware stack levels used:    1
  1907 ;; Hardware stack levels required when called:    8
  1908 ;; This function calls:
  1909 ;;		Nothing
  1910 ;; This function is called by:
  1911 ;;		_WriteByte
  1912 ;;		_LCDInit
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916                           	psect	text13
  1917  0015F0                     __ptext13:
  1918                           	opt stack 0
  1919  0015F0                     _WriteNibble:
  1920                           	opt stack 15
  1921                           
  1922                           ;incstack = 0
  1923                           ;WriteNibble@cmd stored from wreg
  1924  0015F0  6E28               	movwf	WriteNibble@cmd,c
  1925                           
  1926                           ;lcd.c: 68: LATDbits.LATD4 = (cmd ? 0 : 1);
  1927  0015F2  5028               	movf	WriteNibble@cmd,w,c
  1928  0015F4  A4D8               	btfss	status,2,c
  1929  0015F6  D003               	goto	u1130
  1930  0015F8  6A27               	clrf	??_WriteNibble& (0+255),c
  1931  0015FA  2A27               	incf	??_WriteNibble& (0+255),f,c
  1932  0015FC  D001               	goto	u1148
  1933  0015FE                     u1130:
  1934  0015FE  6A27               	clrf	??_WriteNibble& (0+255),c
  1935  001600                     u1148:
  1936  001600  3A27               	swapf	??_WriteNibble,f,c
  1937  001602  508C               	movf	3980,w,c	;volatile
  1938  001604  1827               	xorwf	??_WriteNibble,w,c
  1939  001606  0BEF               	andlw	-17
  1940  001608  1827               	xorwf	??_WriteNibble,w,c
  1941  00160A  6E8C               	movwf	3980,c	;volatile
  1942                           
  1943                           ;lcd.c: 69: LATDbits.LATD5 = 0;
  1944  00160C  9A8C               	bcf	3980,5,c	;volatile
  1945                           
  1946                           ;lcd.c: 70: LATDbits.LATD6 = 1;
  1947  00160E  8C8C               	bsf	3980,6,c	;volatile
  1948                           
  1949                           ;lcd.c: 72: LATDbits.LATD0 = LATDbits.LATD1 = LATDbits.LATD2 = LATDbits.LATD3 = 0;
  1950  001610  968C               	bcf	3980,3,c	;volatile
  1951  001612  948C               	bcf	3980,2,c	;volatile
  1952  001614  928C               	bcf	3980,1,c	;volatile
  1953  001616  908C               	bcf	3980,0,c	;volatile
  1954                           
  1955                           ;lcd.c: 73: __nop();
  1956  001618  F000               	nop	
  1957                           
  1958                           ;lcd.c: 74: __nop();
  1959  00161A  F000               	nop	
  1960                           
  1961                           ;lcd.c: 76: LATD = (LATD & 0xF0) | (data & 0x0F);
  1962  00161C  C026  F027         	movff	WriteNibble@data,??_WriteNibble
  1963  001620  0E0F               	movlw	15
  1964  001622  1627               	andwf	??_WriteNibble,f,c
  1965  001624  508C               	movf	3980,w,c	;volatile
  1966  001626  0BF0               	andlw	240
  1967  001628  1027               	iorwf	??_WriteNibble,w,c
  1968  00162A  6E8C               	movwf	3980,c	;volatile
  1969                           
  1970                           ;lcd.c: 77: __nop();
  1971  00162C  F000               	nop	
  1972                           
  1973                           ;lcd.c: 78: __nop();
  1974  00162E  F000               	nop	
  1975                           
  1976                           ;lcd.c: 80: LATDbits.LATD6 = 0;
  1977  001630  9C8C               	bcf	3980,6,c	;volatile
  1978  001632  0012               	return		;funcret
  1979  001634                     __end_of_WriteNibble:
  1980                           	opt stack 0
  1981                           tblptru	equ	0xFF8
  1982                           tblptrh	equ	0xFF7
  1983                           tblptrl	equ	0xFF6
  1984                           tablat	equ	0xFF5
  1985                           prodh	equ	0xFF4
  1986                           prodl	equ	0xFF3
  1987                           intcon	equ	0xFF2
  1988                           intcon2	equ	0xFF1
  1989                           intcon3	equ	0xFF0
  1990                           indf0	equ	0xFEF
  1991                           postinc0	equ	0xFEE
  1992                           fsr0h	equ	0xFEA
  1993                           fsr0l	equ	0xFE9
  1994                           wreg	equ	0xFE8
  1995                           postdec1	equ	0xFE5
  1996                           fsr1l	equ	0xFE1
  1997                           status	equ	0xFD8
  1998                           
  1999 ;; *************** function _WaitLCD *****************
  2000 ;; Defined at:
  2001 ;;		line 52 in file "lcd.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;		None
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;  status          1   38[COMRAM] unsigned char 
  2006 ;; Return value:  Size  Location     Type
  2007 ;;                  1    wreg      void 
  2008 ;; Registers used:
  2009 ;;		wreg, status,2, status,0, cstack
  2010 ;; Tracked objects:
  2011 ;;		On entry : 0/0
  2012 ;;		On exit  : 0/0
  2013 ;;		Unchanged: 0/0
  2014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2016 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2018 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2019 ;;Total ram usage:        1 bytes
  2020 ;; Hardware stack levels used:    1
  2021 ;; Hardware stack levels required when called:    9
  2022 ;; This function calls:
  2023 ;;		_ReadByte
  2024 ;; This function is called by:
  2025 ;;		_LCDInit
  2026 ;;		_LCDClear
  2027 ;;		_LCDGoto
  2028 ;;		_LCDPutChar
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032                           	psect	text14
  2033  001824                     __ptext14:
  2034                           	opt stack 0
  2035  001824                     _WaitLCD:
  2036                           	opt stack 15
  2037                           
  2038                           ;lcd.c: 54: UINT8_T status;
  2039                           ;lcd.c: 56: LATDbits.LATD4 = 0;
  2040                           
  2041                           ;incstack = 0
  2042  001824  988C               	bcf	3980,4,c	;volatile
  2043                           
  2044                           ;lcd.c: 57: LATDbits.LATD5 = 1;
  2045  001826  8A8C               	bsf	3980,5,c	;volatile
  2046  001828                     l1946:
  2047                           
  2048                           ;lcd.c: 60: status = ReadByte();
  2049  001828  EC8F  F00B         	call	_ReadByte	;wreg free
  2050  00182C  6E27               	movwf	WaitLCD@status,c
  2051                           
  2052                           ;lcd.c: 61: } while (status & 0x80);
  2053  00182E  BE27               	btfsc	WaitLCD@status,7,c
  2054  001830  D7FB               	goto	l1946
  2055                           
  2056                           ;lcd.c: 63: LATDbits.LATD5 = 0;
  2057  001832  9A8C               	bcf	3980,5,c	;volatile
  2058  001834  0012               	return		;funcret
  2059  001836                     __end_of_WaitLCD:
  2060                           	opt stack 0
  2061                           tblptru	equ	0xFF8
  2062                           tblptrh	equ	0xFF7
  2063                           tblptrl	equ	0xFF6
  2064                           tablat	equ	0xFF5
  2065                           prodh	equ	0xFF4
  2066                           prodl	equ	0xFF3
  2067                           intcon	equ	0xFF2
  2068                           intcon2	equ	0xFF1
  2069                           intcon3	equ	0xFF0
  2070                           indf0	equ	0xFEF
  2071                           postinc0	equ	0xFEE
  2072                           fsr0h	equ	0xFEA
  2073                           fsr0l	equ	0xFE9
  2074                           wreg	equ	0xFE8
  2075                           postdec1	equ	0xFE5
  2076                           fsr1l	equ	0xFE1
  2077                           status	equ	0xFD8
  2078                           
  2079 ;; *************** function _ReadByte *****************
  2080 ;; Defined at:
  2081 ;;		line 21 in file "lcd.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;		None
  2084 ;; Auto vars:     Size  Location     Type
  2085 ;;  status          1   37[COMRAM] unsigned char 
  2086 ;; Return value:  Size  Location     Type
  2087 ;;                  1    wreg      unsigned char 
  2088 ;; Registers used:
  2089 ;;		wreg, status,2, status,0
  2090 ;; Tracked objects:
  2091 ;;		On entry : 0/0
  2092 ;;		On exit  : 0/0
  2093 ;;		Unchanged: 0/0
  2094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2096 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2098 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2099 ;;Total ram usage:        1 bytes
  2100 ;; Hardware stack levels used:    1
  2101 ;; Hardware stack levels required when called:    8
  2102 ;; This function calls:
  2103 ;;		Nothing
  2104 ;; This function is called by:
  2105 ;;		_WaitLCD
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109                           	psect	text15
  2110  00171E                     __ptext15:
  2111                           	opt stack 0
  2112  00171E                     _ReadByte:
  2113                           	opt stack 15
  2114                           
  2115                           ;lcd.c: 23: UINT8_T status;
  2116                           ;lcd.c: 25: TRISDbits.TRISD0 = 1;
  2117                           
  2118                           ;incstack = 0
  2119  00171E  8095               	bsf	3989,0,c	;volatile
  2120                           
  2121                           ;lcd.c: 26: TRISDbits.TRISD1 = 1;
  2122  001720  8295               	bsf	3989,1,c	;volatile
  2123                           
  2124                           ;lcd.c: 27: TRISDbits.TRISD2 = 1;
  2125  001722  8495               	bsf	3989,2,c	;volatile
  2126                           
  2127                           ;lcd.c: 28: TRISDbits.TRISD3 = 1;
  2128  001724  8695               	bsf	3989,3,c	;volatile
  2129                           
  2130                           ;lcd.c: 30: LATDbits.LATD6 = 1;
  2131  001726  8C8C               	bsf	3980,6,c	;volatile
  2132                           
  2133                           ;lcd.c: 31: __nop();
  2134  001728  F000               	nop	
  2135                           
  2136                           ;lcd.c: 32: __nop();
  2137  00172A  F000               	nop	
  2138                           
  2139                           ;lcd.c: 34: status = PORTD << 4;
  2140  00172C  3883               	swapf	3971,w,c	;volatile
  2141  00172E  0BF0               	andlw	240
  2142  001730  6E26               	movwf	ReadByte@status,c
  2143                           
  2144                           ;lcd.c: 35: LATDbits.LATD6 = 0;
  2145  001732  9C8C               	bcf	3980,6,c	;volatile
  2146                           
  2147                           ;lcd.c: 37: LATDbits.LATD6 = 1;
  2148  001734  8C8C               	bsf	3980,6,c	;volatile
  2149                           
  2150                           ;lcd.c: 38: __nop();
  2151  001736  F000               	nop	
  2152                           
  2153                           ;lcd.c: 39: __nop();
  2154  001738  F000               	nop	
  2155                           
  2156                           ;lcd.c: 41: status |= PORTD & 0x0F;
  2157  00173A  5083               	movf	3971,w,c	;volatile
  2158  00173C  0B0F               	andlw	15
  2159  00173E  1226               	iorwf	ReadByte@status,f,c
  2160                           
  2161                           ;lcd.c: 42: LATDbits.LATD6 = 0;
  2162  001740  9C8C               	bcf	3980,6,c	;volatile
  2163                           
  2164                           ;lcd.c: 44: TRISDbits.TRISD0 = 0;
  2165  001742  9095               	bcf	3989,0,c	;volatile
  2166                           
  2167                           ;lcd.c: 45: TRISDbits.TRISD1 = 0;
  2168  001744  9295               	bcf	3989,1,c	;volatile
  2169                           
  2170                           ;lcd.c: 46: TRISDbits.TRISD2 = 0;
  2171  001746  9495               	bcf	3989,2,c	;volatile
  2172                           
  2173                           ;lcd.c: 47: TRISDbits.TRISD3 = 0;
  2174  001748  9695               	bcf	3989,3,c	;volatile
  2175                           
  2176                           ;lcd.c: 49: return(status);
  2177  00174A  5026               	movf	ReadByte@status,w,c
  2178  00174C  0012               	return	
  2179  00174E                     __end_of_ReadByte:
  2180                           	opt stack 0
  2181                           tblptru	equ	0xFF8
  2182                           tblptrh	equ	0xFF7
  2183                           tblptrl	equ	0xFF6
  2184                           tablat	equ	0xFF5
  2185                           prodh	equ	0xFF4
  2186                           prodl	equ	0xFF3
  2187                           intcon	equ	0xFF2
  2188                           intcon2	equ	0xFF1
  2189                           intcon3	equ	0xFF0
  2190                           indf0	equ	0xFEF
  2191                           postinc0	equ	0xFEE
  2192                           fsr0h	equ	0xFEA
  2193                           fsr0l	equ	0xFE9
  2194                           wreg	equ	0xFE8
  2195                           postdec1	equ	0xFE5
  2196                           fsr1l	equ	0xFE1
  2197                           status	equ	0xFD8
  2198                           
  2199 ;; *************** function _ISR *****************
  2200 ;; Defined at:
  2201 ;;		line 216 in file "main.c"
  2202 ;; Parameters:    Size  Location     Type
  2203 ;;		None
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;  i               2   35[COMRAM] int 
  2206 ;; Return value:  Size  Location     Type
  2207 ;;                  1    wreg      void 
  2208 ;; Registers used:
  2209 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2210 ;; Tracked objects:
  2211 ;;		On entry : 0/0
  2212 ;;		On exit  : 0/0
  2213 ;;		Unchanged: 0/0
  2214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2216 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2217 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2218 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2219 ;;Total ram usage:       17 bytes
  2220 ;; Hardware stack levels used:    1
  2221 ;; Hardware stack levels required when called:    7
  2222 ;; This function calls:
  2223 ;;		_flashlight
  2224 ;;		_pedometer
  2225 ;;		_searched
  2226 ;;		_synchronize
  2227 ;; This function is called by:
  2228 ;;		Interrupt level 2
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           	psect	intcode
  2233  000008                     __pintcode:
  2234                           	opt stack 0
  2235  000008                     _ISR:
  2236                           	opt stack 15
  2237                           
  2238                           ;incstack = 0
  2239  000008  8239               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2240  00000A  CFFA F016          	movff	pclath,??_ISR+1
  2241  00000E  CFFB F017          	movff	pclatu,??_ISR+2
  2242  000012  CFE9 F018          	movff	fsr0l,??_ISR+3
  2243  000016  CFEA F019          	movff	fsr0h,??_ISR+4
  2244  00001A  CFE1 F01A          	movff	fsr1l,??_ISR+5
  2245  00001E  CFE2 F01B          	movff	fsr1h,??_ISR+6
  2246  000022  CFD9 F01C          	movff	fsr2l,??_ISR+7
  2247  000026  CFDA F01D          	movff	fsr2h,??_ISR+8
  2248  00002A  CFF3 F01E          	movff	prodl,??_ISR+9
  2249  00002E  CFF4 F01F          	movff	prodh,??_ISR+10
  2250  000032  CFF6 F020          	movff	tblptrl,??_ISR+11
  2251  000036  CFF7 F021          	movff	tblptrh,??_ISR+12
  2252  00003A  CFF8 F022          	movff	tblptru,??_ISR+13
  2253  00003E  CFF5 F023          	movff	tablat,??_ISR+14
  2254                           
  2255                           ;main.c: 218: if (INTCONbits.INT0IF) { pedometer(); }
  2256  000042  B2F2               	btfsc	intcon,1,c	;volatile
  2257  000044  EC3D  F00C         	call	_pedometer	;wreg free
  2258                           
  2259                           ;main.c: 219: if (INTCON3bits.INT1IF) { searched(); }
  2260  000048  B0F0               	btfsc	intcon3,0,c	;volatile
  2261  00004A  EC0F  F008         	call	_searched	;wreg free
  2262                           
  2263                           ;main.c: 221: if (INTCON3bits.INT2IF) {
  2264  00004E  A2F0               	btfss	intcon3,1,c	;volatile
  2265  000050  D027               	goto	i2l81
  2266                           
  2267                           ;main.c: 223: int i = 0;
  2268  000052  0E00               	movlw	0
  2269  000054  6E25               	movwf	ISR@i+1,c
  2270  000056  0E00               	movlw	0
  2271  000058  6E24               	movwf	ISR@i,c
  2272                           
  2273                           ;main.c: 224: for (i = 0; i < 30; i++) {
  2274  00005A  0E00               	movlw	0
  2275  00005C  6E25               	movwf	ISR@i+1,c
  2276  00005E  0E00               	movlw	0
  2277  000060  6E24               	movwf	ISR@i,c
  2278  000062                     i2l2410:
  2279  000062  BE25               	btfsc	ISR@i+1,7,c
  2280  000064  D006               	goto	i2l76
  2281  000066  5025               	movf	ISR@i+1,w,c
  2282  000068  E111               	bnz	i2l2420
  2283  00006A  0E1E               	movlw	30
  2284  00006C  5C24               	subwf	ISR@i,w,c
  2285  00006E  B0D8               	btfsc	status,0,c
  2286  000070  D00D               	goto	i2l2420
  2287  000072                     i2l76:
  2288                           
  2289                           ;main.c: 225: if (!LATBbits.LATB2) { break ; }
  2290  000072  A48A               	btfss	3978,2,c	;volatile
  2291  000074  D00B               	goto	i2l2420
  2292                           
  2293                           ;main.c: 226: _delay(25000);
  2294  000076  0E21               	movlw	33
  2295  000078  6E15               	movwf	??_ISR& (0+255),c
  2296  00007A  0E76               	movlw	118
  2297  00007C                     i2u173_47:
  2298  00007C  2EE8               	decfsz	wreg,f,c
  2299  00007E  D7FE               	bra	i2u173_47
  2300  000080  2E15               	decfsz	??_ISR& (0+255),f,c
  2301  000082  D7FC               	bra	i2u173_47
  2302  000084  D000               	nop2	
  2303  000086  4A24               	infsnz	ISR@i,f,c
  2304  000088  2A25               	incf	ISR@i+1,f,c
  2305  00008A  D7EB               	goto	i2l2410
  2306  00008C                     i2l2420:
  2307                           
  2308                           ;main.c: 227: }
  2309                           ;main.c: 229: if (i == 30) { synchronize(); }
  2310  00008C  0E1E               	movlw	30
  2311  00008E  1824               	xorwf	ISR@i,w,c
  2312  000090  1025               	iorwf	ISR@i+1,w,c
  2313  000092  A4D8               	btfss	status,2,c
  2314  000094  D003               	goto	i2l2424
  2315  000096  EC43  F00C         	call	_synchronize	;wreg free
  2316  00009A  D002               	goto	i2l81
  2317  00009C                     i2l2424:
  2318                           
  2319                           ;main.c: 231: else { flashlight(); }
  2320  00009C  ECE1  F00B         	call	_flashlight	;wreg free
  2321  0000A0                     i2l81:
  2322  0000A0  C023  FFF5         	movff	??_ISR+14,tablat
  2323  0000A4  C022  FFF8         	movff	??_ISR+13,tblptru
  2324  0000A8  C021  FFF7         	movff	??_ISR+12,tblptrh
  2325  0000AC  C020  FFF6         	movff	??_ISR+11,tblptrl
  2326  0000B0  C01F  FFF4         	movff	??_ISR+10,prodh
  2327  0000B4  C01E  FFF3         	movff	??_ISR+9,prodl
  2328  0000B8  C01D  FFDA         	movff	??_ISR+8,fsr2h
  2329  0000BC  C01C  FFD9         	movff	??_ISR+7,fsr2l
  2330  0000C0  C01B  FFE2         	movff	??_ISR+6,fsr1h
  2331  0000C4  C01A  FFE1         	movff	??_ISR+5,fsr1l
  2332  0000C8  C019  FFEA         	movff	??_ISR+4,fsr0h
  2333  0000CC  C018  FFE9         	movff	??_ISR+3,fsr0l
  2334  0000D0  C017  FFFB         	movff	??_ISR+2,pclatu
  2335  0000D4  C016  FFFA         	movff	??_ISR+1,pclath
  2336  0000D8  9239               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2337  0000DA  0011               	retfie		f
  2338  0000DC                     __end_of_ISR:
  2339                           	opt stack 0
  2340                           pclatu	equ	0xFFB
  2341                           pclath	equ	0xFFA
  2342                           tblptru	equ	0xFF8
  2343                           tblptrh	equ	0xFF7
  2344                           tblptrl	equ	0xFF6
  2345                           tablat	equ	0xFF5
  2346                           prodh	equ	0xFF4
  2347                           prodl	equ	0xFF3
  2348                           intcon	equ	0xFF2
  2349                           intcon2	equ	0xFF1
  2350                           intcon3	equ	0xFF0
  2351                           indf0	equ	0xFEF
  2352                           postinc0	equ	0xFEE
  2353                           fsr0h	equ	0xFEA
  2354                           fsr0l	equ	0xFE9
  2355                           wreg	equ	0xFE8
  2356                           postdec1	equ	0xFE5
  2357                           fsr1h	equ	0xFE2
  2358                           fsr1l	equ	0xFE1
  2359                           fsr2h	equ	0xFDA
  2360                           fsr2l	equ	0xFD9
  2361                           status	equ	0xFD8
  2362                           
  2363 ;; *************** function _synchronize *****************
  2364 ;; Defined at:
  2365 ;;		line 209 in file "main.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;		None
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;		None
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      void 
  2372 ;; Registers used:
  2373 ;;		wreg, status,2
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2383 ;;Total ram usage:        0 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; This function calls:
  2386 ;;		Nothing
  2387 ;; This function is called by:
  2388 ;;		_ISR
  2389 ;; This function uses a non-reentrant model
  2390 ;;
  2391                           
  2392                           	psect	text17
  2393  001886                     __ptext17:
  2394                           	opt stack 0
  2395  001886                     _synchronize:
  2396                           	opt stack 21
  2397                           
  2398                           ;main.c: 212: steps = 0;
  2399                           
  2400                           ;incstack = 0
  2401  001886  0E00               	movlw	0
  2402  001888  6E38               	movwf	_steps+1,c
  2403  00188A  0E00               	movlw	0
  2404  00188C  6E37               	movwf	_steps,c
  2405  00188E  0012               	return		;funcret
  2406  001890                     __end_of_synchronize:
  2407                           	opt stack 0
  2408                           pclatu	equ	0xFFB
  2409                           pclath	equ	0xFFA
  2410                           tblptru	equ	0xFF8
  2411                           tblptrh	equ	0xFF7
  2412                           tblptrl	equ	0xFF6
  2413                           tablat	equ	0xFF5
  2414                           prodh	equ	0xFF4
  2415                           prodl	equ	0xFF3
  2416                           intcon	equ	0xFF2
  2417                           intcon2	equ	0xFF1
  2418                           intcon3	equ	0xFF0
  2419                           indf0	equ	0xFEF
  2420                           postinc0	equ	0xFEE
  2421                           fsr0h	equ	0xFEA
  2422                           fsr0l	equ	0xFE9
  2423                           wreg	equ	0xFE8
  2424                           postdec1	equ	0xFE5
  2425                           fsr1h	equ	0xFE2
  2426                           fsr1l	equ	0xFE1
  2427                           fsr2h	equ	0xFDA
  2428                           fsr2l	equ	0xFD9
  2429                           status	equ	0xFD8
  2430                           
  2431 ;; *************** function _searched *****************
  2432 ;; Defined at:
  2433 ;;		line 182 in file "main.c"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;		None
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;  i               2   18[COMRAM] int 
  2438 ;;  time            2   16[COMRAM] int 
  2439 ;; Return value:  Size  Location     Type
  2440 ;;                  1    wreg      void 
  2441 ;; Registers used:
  2442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2443 ;; Tracked objects:
  2444 ;;		On entry : 0/0
  2445 ;;		On exit  : 0/0
  2446 ;;		Unchanged: 0/0
  2447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2449 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2450 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2451 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2452 ;;Total ram usage:        6 bytes
  2453 ;; Hardware stack levels used:    1
  2454 ;; Hardware stack levels required when called:    1
  2455 ;; This function calls:
  2456 ;;		_flashlight
  2457 ;;		i2___awdiv
  2458 ;;		i2___awmod
  2459 ;; This function is called by:
  2460 ;;		_ISR
  2461 ;; This function uses a non-reentrant model
  2462 ;;
  2463                           
  2464                           	psect	text18
  2465  00101E                     __ptext18:
  2466                           	opt stack 0
  2467  00101E                     _searched:
  2468                           	opt stack 20
  2469                           
  2470                           ;main.c: 184: int time = 50, i = 0;
  2471                           
  2472                           ;incstack = 0
  2473  00101E  0E00               	movlw	0
  2474  001020  6E12               	movwf	searched@time+1,c
  2475  001022  0E32               	movlw	50
  2476  001024  6E11               	movwf	searched@time,c
  2477  001026  0E00               	movlw	0
  2478  001028  6E14               	movwf	searched@i+1,c
  2479  00102A  0E00               	movlw	0
  2480  00102C  6E13               	movwf	searched@i,c
  2481                           
  2482                           ;main.c: 187: while (time-- > 0) {
  2483  00102E  D05A               	goto	i2l2390
  2484  001030                     i2l2368:
  2485                           
  2486                           ;main.c: 189: PR2bits.PR2 = kiwi_frequence[time%kiwi_length];
  2487  001030  C011  F001         	movff	searched@time,i2___awmod@dividend
  2488  001034  C012  F002         	movff	searched@time+1,i2___awmod@dividend+1
  2489  001038  C036  F003         	movff	_kiwi_length,i2___awmod@divisor
  2490  00103C  6A04               	clrf	i2___awmod@divisor+1,c
  2491  00103E  EC36  F00A         	call	i2___awmod	;wreg free
  2492  001042  0E33               	movlw	low _kiwi_frequence
  2493  001044  2401               	addwf	?i2___awmod,w,c
  2494  001046  6ED9               	movwf	fsr2l,c
  2495  001048  0E00               	movlw	high _kiwi_frequence
  2496  00104A  2002               	addwfc	?i2___awmod+1,w,c
  2497  00104C  6EDA               	movwf	fsr2h,c
  2498  00104E  50DF               	movf	indf2,w,c
  2499  001050  6EBB               	movwf	4027,c	;volatile
  2500                           
  2501                           ;main.c: 190: CCPR1Lbits.CCPR1L = (unsigned char) ((kiwi_frequence[time%kiwi_length] + 1
      +                          )/2) ;
  2502  001052  C036  F003         	movff	_kiwi_length,i2___awmod@divisor
  2503  001056  6A04               	clrf	i2___awmod@divisor+1,c
  2504  001058  C011  F001         	movff	searched@time,i2___awmod@dividend
  2505  00105C  C012  F002         	movff	searched@time+1,i2___awmod@dividend+1
  2506  001060  EC36  F00A         	call	i2___awmod	;wreg free
  2507  001064  0E33               	movlw	low _kiwi_frequence
  2508  001066  2401               	addwf	?i2___awmod,w,c
  2509  001068  6ED9               	movwf	fsr2l,c
  2510  00106A  0E00               	movlw	high _kiwi_frequence
  2511  00106C  2002               	addwfc	?i2___awmod+1,w,c
  2512  00106E  6EDA               	movwf	fsr2h,c
  2513  001070  50DF               	movf	indf2,w,c
  2514  001072  6E0F               	movwf	??_searched& (0+255),c
  2515  001074  0E01               	movlw	1
  2516  001076  240F               	addwf	??_searched,w,c
  2517  001078  6E07               	movwf	i2___awdiv@dividend,c
  2518  00107A  6A08               	clrf	i2___awdiv@dividend+1,c
  2519  00107C  0E00               	movlw	0
  2520  00107E  2208               	addwfc	i2___awdiv@dividend+1,f,c
  2521  001080  0E00               	movlw	0
  2522  001082  6E0A               	movwf	i2___awdiv@divisor+1,c
  2523  001084  0E02               	movlw	2
  2524  001086  6E09               	movwf	i2___awdiv@divisor,c
  2525  001088  EC3C  F009         	call	i2___awdiv	;wreg free
  2526  00108C  5007               	movf	?i2___awdiv,w,c
  2527  00108E  6EBE               	movwf	4030,c	;volatile
  2528                           
  2529                           ;main.c: 192: flashlight();
  2530  001090  ECE1  F00B         	call	_flashlight	;wreg free
  2531                           
  2532                           ;main.c: 194: for (i = 0; i < 10; i++) {
  2533  001094  0E00               	movlw	0
  2534  001096  6E14               	movwf	searched@i+1,c
  2535  001098  0E00               	movlw	0
  2536  00109A  6E13               	movwf	searched@i,c
  2537  00109C                     i2l2374:
  2538  00109C  BE14               	btfsc	searched@i+1,7,c
  2539  00109E  D006               	goto	i2l62
  2540  0010A0  5014               	movf	searched@i+1,w,c
  2541  0010A2  E120               	bnz	i2l2390
  2542  0010A4  0E0A               	movlw	10
  2543  0010A6  5C13               	subwf	searched@i,w,c
  2544  0010A8  B0D8               	btfsc	status,0,c
  2545  0010AA  D01C               	goto	i2l2390
  2546  0010AC                     i2l62:
  2547                           
  2548                           ;main.c: 195: if (INTCON3bits.INT2IF) { time = 0; break ; }
  2549  0010AC  A2F0               	btfss	intcon3,1,c	;volatile
  2550  0010AE  D005               	goto	i2l2380
  2551  0010B0  0E00               	movlw	0
  2552  0010B2  6E12               	movwf	searched@time+1,c
  2553  0010B4  0E00               	movlw	0
  2554  0010B6  6E11               	movwf	searched@time,c
  2555  0010B8  D015               	goto	i2l2390
  2556  0010BA                     i2l2380:
  2557                           
  2558                           ;main.c: 197: _delay(25000);
  2559  0010BA  0E21               	movlw	33
  2560  0010BC  6E0F               	movwf	??_searched& (0+255),c
  2561  0010BE  0E76               	movlw	118
  2562  0010C0                     i2u174_47:
  2563  0010C0  2EE8               	decfsz	wreg,f,c
  2564  0010C2  D7FE               	bra	i2u174_47
  2565  0010C4  2E0F               	decfsz	??_searched& (0+255),f,c
  2566  0010C6  D7FC               	bra	i2u174_47
  2567  0010C8  D000               	nop2	
  2568                           
  2569                           ;main.c: 198: if (i > 5) { CCPR1Lbits.CCPR1L = 0; }
  2570  0010CA  BE14               	btfsc	searched@i+1,7,c
  2571  0010CC  D008               	goto	i2l2386
  2572  0010CE  5014               	movf	searched@i+1,w,c
  2573  0010D0  E104               	bnz	i2u157_40
  2574  0010D2  0E06               	movlw	6
  2575  0010D4  5C13               	subwf	searched@i,w,c
  2576  0010D6  A0D8               	btfss	status,0,c
  2577  0010D8  D002               	goto	i2l2386
  2578  0010DA                     i2u157_40:
  2579  0010DA  0E00               	movlw	0
  2580  0010DC  6EBE               	movwf	4030,c	;volatile
  2581  0010DE                     i2l2386:
  2582  0010DE  4A13               	infsnz	searched@i,f,c
  2583  0010E0  2A14               	incf	searched@i+1,f,c
  2584  0010E2  D7DC               	goto	i2l2374
  2585  0010E4                     i2l2390:
  2586  0010E4  5011               	movf	searched@time,w,c
  2587  0010E6  6E0F               	movwf	??_searched& (0+255),c
  2588  0010E8  5012               	movf	searched@time+1,w,c
  2589  0010EA  6E10               	movwf	(??_searched+1)& (0+255),c
  2590  0010EC  0E01               	movlw	1
  2591  0010EE  5E11               	subwf	searched@time,f,c
  2592  0010F0  0E00               	movlw	0
  2593  0010F2  5A12               	subwfb	searched@time+1,f,c
  2594  0010F4  BE10               	btfsc	??_searched+1,7,c
  2595  0010F6  D005               	goto	i2l2392
  2596  0010F8  5010               	movf	??_searched+1,w,c
  2597  0010FA  E19A               	bnz	i2l2368
  2598  0010FC  040F               	decf	??_searched,w,c
  2599  0010FE  B0D8               	btfsc	status,0,c
  2600  001100  D797               	goto	i2l2368
  2601  001102                     i2l2392:
  2602                           
  2603                           ;main.c: 199: }
  2604                           ;main.c: 200: }
  2605                           ;main.c: 203: CCPR1Lbits.CCPR1L = 0 ;
  2606  001102  0E00               	movlw	0
  2607  001104  6EBE               	movwf	4030,c	;volatile
  2608                           
  2609                           ;main.c: 204: LATCbits.LATC1 = 0;
  2610  001106  928B               	bcf	3979,1,c	;volatile
  2611                           
  2612                           ;main.c: 205: INTCON3bits.INT2IF = 0;
  2613  001108  92F0               	bcf	intcon3,1,c	;volatile
  2614  00110A  0012               	return		;funcret
  2615  00110C                     __end_of_searched:
  2616                           	opt stack 0
  2617                           pclatu	equ	0xFFB
  2618                           pclath	equ	0xFFA
  2619                           tblptru	equ	0xFF8
  2620                           tblptrh	equ	0xFF7
  2621                           tblptrl	equ	0xFF6
  2622                           tablat	equ	0xFF5
  2623                           prodh	equ	0xFF4
  2624                           prodl	equ	0xFF3
  2625                           intcon	equ	0xFF2
  2626                           intcon2	equ	0xFF1
  2627                           intcon3	equ	0xFF0
  2628                           indf0	equ	0xFEF
  2629                           postinc0	equ	0xFEE
  2630                           fsr0h	equ	0xFEA
  2631                           fsr0l	equ	0xFE9
  2632                           wreg	equ	0xFE8
  2633                           postdec1	equ	0xFE5
  2634                           fsr1h	equ	0xFE2
  2635                           fsr1l	equ	0xFE1
  2636                           indf2	equ	0xFDF
  2637                           fsr2h	equ	0xFDA
  2638                           fsr2l	equ	0xFD9
  2639                           status	equ	0xFD8
  2640                           
  2641 ;; *************** function _flashlight *****************
  2642 ;; Defined at:
  2643 ;;		line 157 in file "main.c"
  2644 ;; Parameters:    Size  Location     Type
  2645 ;;		None
  2646 ;; Auto vars:     Size  Location     Type
  2647 ;;		None
  2648 ;; Return value:  Size  Location     Type
  2649 ;;                  1    wreg      void 
  2650 ;; Registers used:
  2651 ;;		wreg, status,2, status,0
  2652 ;; Tracked objects:
  2653 ;;		On entry : 0/0
  2654 ;;		On exit  : 0/0
  2655 ;;		Unchanged: 0/0
  2656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2659 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2660 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2661 ;;Total ram usage:        1 bytes
  2662 ;; Hardware stack levels used:    1
  2663 ;; This function calls:
  2664 ;;		Nothing
  2665 ;; This function is called by:
  2666 ;;		_searched
  2667 ;;		_ISR
  2668 ;; This function uses a non-reentrant model
  2669 ;;
  2670                           
  2671                           	psect	text19
  2672  0017C2                     __ptext19:
  2673                           	opt stack 0
  2674  0017C2                     _flashlight:
  2675                           	opt stack 20
  2676                           
  2677                           ;main.c: 159: LATCbits.LATC1 = (unsigned char) !LATCbits.LATC1;
  2678                           
  2679                           ;incstack = 0
  2680  0017C2  B28B               	btfsc	3979,1,c	;volatile
  2681  0017C4  D003               	goto	i2u43_40
  2682  0017C6  6A01               	clrf	??_flashlight& (0+255),c
  2683  0017C8  2A01               	incf	??_flashlight& (0+255),f,c
  2684  0017CA  D001               	goto	i2u44_48
  2685  0017CC                     i2u43_40:
  2686  0017CC  6A01               	clrf	??_flashlight& (0+255),c
  2687  0017CE                     i2u44_48:
  2688  0017CE  4601               	rlncf	??_flashlight,f,c
  2689  0017D0  508B               	movf	3979,w,c	;volatile
  2690  0017D2  1801               	xorwf	??_flashlight,w,c
  2691  0017D4  0BFD               	andlw	-3
  2692  0017D6  1801               	xorwf	??_flashlight,w,c
  2693  0017D8  6E8B               	movwf	3979,c	;volatile
  2694                           
  2695                           ;main.c: 161: INTCON3bits.INT2IF = 0;
  2696  0017DA  92F0               	bcf	intcon3,1,c	;volatile
  2697  0017DC  0012               	return		;funcret
  2698  0017DE                     __end_of_flashlight:
  2699                           	opt stack 0
  2700                           pclatu	equ	0xFFB
  2701                           pclath	equ	0xFFA
  2702                           tblptru	equ	0xFF8
  2703                           tblptrh	equ	0xFF7
  2704                           tblptrl	equ	0xFF6
  2705                           tablat	equ	0xFF5
  2706                           prodh	equ	0xFF4
  2707                           prodl	equ	0xFF3
  2708                           intcon	equ	0xFF2
  2709                           intcon2	equ	0xFF1
  2710                           intcon3	equ	0xFF0
  2711                           indf0	equ	0xFEF
  2712                           postinc0	equ	0xFEE
  2713                           fsr0h	equ	0xFEA
  2714                           fsr0l	equ	0xFE9
  2715                           wreg	equ	0xFE8
  2716                           postdec1	equ	0xFE5
  2717                           fsr1h	equ	0xFE2
  2718                           fsr1l	equ	0xFE1
  2719                           indf2	equ	0xFDF
  2720                           fsr2h	equ	0xFDA
  2721                           fsr2l	equ	0xFD9
  2722                           status	equ	0xFD8
  2723                           
  2724 ;; *************** function _pedometer *****************
  2725 ;; Defined at:
  2726 ;;		line 145 in file "main.c"
  2727 ;; Parameters:    Size  Location     Type
  2728 ;;		None
  2729 ;; Auto vars:     Size  Location     Type
  2730 ;;		None
  2731 ;; Return value:  Size  Location     Type
  2732 ;;                  1    wreg      void 
  2733 ;; Registers used:
  2734 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2735 ;; Tracked objects:
  2736 ;;		On entry : 0/0
  2737 ;;		On exit  : 0/0
  2738 ;;		Unchanged: 0/0
  2739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2744 ;;Total ram usage:        0 bytes
  2745 ;; Hardware stack levels used:    1
  2746 ;; Hardware stack levels required when called:    6
  2747 ;; This function calls:
  2748 ;;		i2_show_debug
  2749 ;; This function is called by:
  2750 ;;		_ISR
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           	psect	text20
  2755  00187A                     __ptext20:
  2756                           	opt stack 0
  2757  00187A                     _pedometer:
  2758                           	opt stack 15
  2759                           
  2760                           ;main.c: 147: steps++;
  2761                           
  2762                           ;incstack = 0
  2763  00187A  4A37               	infsnz	_steps,f,c
  2764  00187C  2A38               	incf	_steps+1,f,c
  2765                           
  2766                           ;main.c: 149: INTCONbits.INT0IF = 0 ;
  2767  00187E  92F2               	bcf	intcon,1,c	;volatile
  2768                           
  2769                           ;main.c: 152: show_debug();
  2770  001880  EC35  F00C         	call	i2_show_debug	;wreg free
  2771  001884  0012               	return		;funcret
  2772  001886                     __end_of_pedometer:
  2773                           	opt stack 0
  2774                           pclatu	equ	0xFFB
  2775                           pclath	equ	0xFFA
  2776                           tblptru	equ	0xFF8
  2777                           tblptrh	equ	0xFF7
  2778                           tblptrl	equ	0xFF6
  2779                           tablat	equ	0xFF5
  2780                           prodh	equ	0xFF4
  2781                           prodl	equ	0xFF3
  2782                           intcon	equ	0xFF2
  2783                           intcon2	equ	0xFF1
  2784                           intcon3	equ	0xFF0
  2785                           indf0	equ	0xFEF
  2786                           postinc0	equ	0xFEE
  2787                           fsr0h	equ	0xFEA
  2788                           fsr0l	equ	0xFE9
  2789                           wreg	equ	0xFE8
  2790                           postdec1	equ	0xFE5
  2791                           fsr1h	equ	0xFE2
  2792                           fsr1l	equ	0xFE1
  2793                           indf2	equ	0xFDF
  2794                           fsr2h	equ	0xFDA
  2795                           fsr2l	equ	0xFD9
  2796                           status	equ	0xFD8
  2797                           
  2798 ;; *************** function i2_show_debug *****************
  2799 ;; Defined at:
  2800 ;;		line 75 in file "main.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;		None
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;		None
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  1    wreg      void 
  2807 ;; Registers used:
  2808 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2818 ;;Total ram usage:        0 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    5
  2821 ;; This function calls:
  2822 ;;		i2_LCDWriteInt
  2823 ;; This function is called by:
  2824 ;;		_pedometer
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           	psect	text21
  2829  00186A                     __ptext21:
  2830                           	opt stack 0
  2831  00186A                     i2_show_debug:
  2832                           	opt stack 15
  2833                           
  2834                           ;main.c: 76: LCDWriteInt(0, 1, steps);
  2835                           
  2836                           ;incstack = 0
  2837  00186A  0E01               	movlw	1
  2838  00186C  6E0F               	movwf	i2LCDWriteInt@row,c
  2839  00186E  C037  F010         	movff	_steps,i2LCDWriteInt@value
  2840  001872  0E00               	movlw	0
  2841  001874  ECD1  F00A         	call	i2_LCDWriteInt
  2842  001878  0012               	return		;funcret
  2843  00187A                     __end_ofi2_show_debug:
  2844                           	opt stack 0
  2845                           pclatu	equ	0xFFB
  2846                           pclath	equ	0xFFA
  2847                           tblptru	equ	0xFF8
  2848                           tblptrh	equ	0xFF7
  2849                           tblptrl	equ	0xFF6
  2850                           tablat	equ	0xFF5
  2851                           prodh	equ	0xFF4
  2852                           prodl	equ	0xFF3
  2853                           intcon	equ	0xFF2
  2854                           intcon2	equ	0xFF1
  2855                           intcon3	equ	0xFF0
  2856                           indf0	equ	0xFEF
  2857                           postinc0	equ	0xFEE
  2858                           fsr0h	equ	0xFEA
  2859                           fsr0l	equ	0xFE9
  2860                           wreg	equ	0xFE8
  2861                           postdec1	equ	0xFE5
  2862                           fsr1h	equ	0xFE2
  2863                           fsr1l	equ	0xFE1
  2864                           indf2	equ	0xFDF
  2865                           fsr2h	equ	0xFDA
  2866                           fsr2l	equ	0xFD9
  2867                           status	equ	0xFD8
  2868                           
  2869 ;; *************** function i2_LCDWriteInt *****************
  2870 ;; Defined at:
  2871 ;;		line 229 in file "lcd.c"
  2872 ;; Parameters:    Size  Location     Type
  2873 ;;  column          1    wreg     unsigned char 
  2874 ;;  row             1   14[COMRAM] unsigned char 
  2875 ;;  value           1   15[COMRAM] unsigned char 
  2876 ;; Auto vars:     Size  Location     Type
  2877 ;;  column          1   19[COMRAM] unsigned char 
  2878 ;;  LCDWriteInt     3   16[COMRAM] unsigned char [3]
  2879 ;; Return value:  Size  Location     Type
  2880 ;;                  1    wreg      void 
  2881 ;; Registers used:
  2882 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2883 ;; Tracked objects:
  2884 ;;		On entry : 0/0
  2885 ;;		On exit  : 0/0
  2886 ;;		Unchanged: 0/0
  2887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2888 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2889 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2891 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2892 ;;Total ram usage:        6 bytes
  2893 ;; Hardware stack levels used:    1
  2894 ;; Hardware stack levels required when called:    4
  2895 ;; This function calls:
  2896 ;;		i2_LCDGoto
  2897 ;;		i2_LCDWriteStr
  2898 ;;		i2___awdiv
  2899 ;;		i2___awmod
  2900 ;; This function is called by:
  2901 ;;		i2_show_debug
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           	psect	text22
  2906  0015A2                     __ptext22:
  2907                           	opt stack 0
  2908  0015A2                     i2_LCDWriteInt:
  2909                           	opt stack 15
  2910                           
  2911                           ;incstack = 0
  2912                           ;i2LCDWriteInt@column stored from wreg
  2913  0015A2  6E14               	movwf	i2LCDWriteInt@column,c
  2914                           
  2915                           ;lcd.c: 230: char string[3];
  2916                           ;lcd.c: 232: string[0] = value / 10 + '0';
  2917  0015A4  C010  F007         	movff	i2LCDWriteInt@value,i2___awdiv@dividend
  2918  0015A8  6A08               	clrf	i2___awdiv@dividend+1,c
  2919  0015AA  0E00               	movlw	0
  2920  0015AC  6E0A               	movwf	i2___awdiv@divisor+1,c
  2921  0015AE  0E0A               	movlw	10
  2922  0015B0  6E09               	movwf	i2___awdiv@divisor,c
  2923  0015B2  EC3C  F009         	call	i2___awdiv	;wreg free
  2924  0015B6  5007               	movf	?i2___awdiv,w,c
  2925  0015B8  0F30               	addlw	48
  2926  0015BA  6E11               	movwf	i2LCDWriteInt@string,c
  2927                           
  2928                           ;lcd.c: 233: string[1] = value % 10 + '0';
  2929  0015BC  C010  F001         	movff	i2LCDWriteInt@value,i2___awmod@dividend
  2930  0015C0  6A02               	clrf	i2___awmod@dividend+1,c
  2931  0015C2  0E00               	movlw	0
  2932  0015C4  6E04               	movwf	i2___awmod@divisor+1,c
  2933  0015C6  0E0A               	movlw	10
  2934  0015C8  6E03               	movwf	i2___awmod@divisor,c
  2935  0015CA  EC36  F00A         	call	i2___awmod	;wreg free
  2936  0015CE  5001               	movf	?i2___awmod,w,c
  2937  0015D0  0F30               	addlw	48
  2938  0015D2  6E12               	movwf	i2LCDWriteInt@string+1,c
  2939                           
  2940                           ;lcd.c: 234: string[2] = '\0';
  2941  0015D4  0E00               	movlw	0
  2942  0015D6  6E13               	movwf	i2LCDWriteInt@string+2,c
  2943                           
  2944                           ;lcd.c: 236: LCDGoto(column, row);
  2945  0015D8  C00F  F006         	movff	i2LCDWriteInt@row,i2LCDGoto@row
  2946  0015DC  5014               	movf	i2LCDWriteInt@column,w,c
  2947  0015DE  EC59  F00B         	call	i2_LCDGoto
  2948                           
  2949                           ;lcd.c: 237: LCDWriteStr(string);
  2950  0015E2  0E11               	movlw	low i2LCDWriteInt@string
  2951  0015E4  6E07               	movwf	i2LCDWriteStr@string,c
  2952  0015E6  0E00               	movlw	high i2LCDWriteInt@string
  2953  0015E8  6E08               	movwf	i2LCDWriteStr@string+1,c
  2954  0015EA  ECBE  F009         	call	i2_LCDWriteStr	;wreg free
  2955  0015EE  0012               	return		;funcret
  2956  0015F0                     __end_ofi2_LCDWriteInt:
  2957                           	opt stack 0
  2958                           pclatu	equ	0xFFB
  2959                           pclath	equ	0xFFA
  2960                           tblptru	equ	0xFF8
  2961                           tblptrh	equ	0xFF7
  2962                           tblptrl	equ	0xFF6
  2963                           tablat	equ	0xFF5
  2964                           prodh	equ	0xFF4
  2965                           prodl	equ	0xFF3
  2966                           intcon	equ	0xFF2
  2967                           intcon2	equ	0xFF1
  2968                           intcon3	equ	0xFF0
  2969                           indf0	equ	0xFEF
  2970                           postinc0	equ	0xFEE
  2971                           fsr0h	equ	0xFEA
  2972                           fsr0l	equ	0xFE9
  2973                           wreg	equ	0xFE8
  2974                           postdec1	equ	0xFE5
  2975                           fsr1h	equ	0xFE2
  2976                           fsr1l	equ	0xFE1
  2977                           indf2	equ	0xFDF
  2978                           fsr2h	equ	0xFDA
  2979                           fsr2l	equ	0xFD9
  2980                           status	equ	0xFD8
  2981                           
  2982 ;; *************** function i2___awmod *****************
  2983 ;; Defined at:
  2984 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  2985 ;; Parameters:    Size  Location     Type
  2986 ;;  dividend        2    0[COMRAM] int 
  2987 ;;  divisor         2    2[COMRAM] int 
  2988 ;; Auto vars:     Size  Location     Type
  2989 ;;  __awmod         1    5[COMRAM] unsigned char 
  2990 ;;  __awmod         1    4[COMRAM] unsigned char 
  2991 ;; Return value:  Size  Location     Type
  2992 ;;                  2    0[COMRAM] int 
  2993 ;; Registers used:
  2994 ;;		wreg, status,2, status,0
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3000 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3003 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;Total ram usage:        6 bytes
  3005 ;; Hardware stack levels used:    1
  3006 ;; This function calls:
  3007 ;;		Nothing
  3008 ;; This function is called by:
  3009 ;;		_searched
  3010 ;;		i2_LCDWriteInt
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           	psect	text23
  3015  00146C                     __ptext23:
  3016                           	opt stack 0
  3017  00146C                     i2___awmod:
  3018                           	opt stack 20
  3019                           
  3020                           ;incstack = 0
  3021  00146C  0E00               	movlw	0
  3022  00146E  6E06               	movwf	i2___awmod@sign,c
  3023  001470  AE02               	btfss	i2___awmod@dividend+1,7,c
  3024  001472  D006               	goto	i2l2192
  3025  001474  6C01               	negf	i2___awmod@dividend,c
  3026  001476  1E02               	comf	i2___awmod@dividend+1,f,c
  3027  001478  B0D8               	btfsc	status,0,c
  3028  00147A  2A02               	incf	i2___awmod@dividend+1,f,c
  3029  00147C  0E01               	movlw	1
  3030  00147E  6E06               	movwf	i2___awmod@sign,c
  3031  001480                     i2l2192:
  3032  001480  AE04               	btfss	i2___awmod@divisor+1,7,c
  3033  001482  D004               	goto	i2l2196
  3034  001484  6C03               	negf	i2___awmod@divisor,c
  3035  001486  1E04               	comf	i2___awmod@divisor+1,f,c
  3036  001488  B0D8               	btfsc	status,0,c
  3037  00148A  2A04               	incf	i2___awmod@divisor+1,f,c
  3038  00148C                     i2l2196:
  3039  00148C  5003               	movf	i2___awmod@divisor,w,c
  3040  00148E  1004               	iorwf	i2___awmod@divisor+1,w,c
  3041  001490  B4D8               	btfsc	status,2,c
  3042  001492  D018               	goto	i2l2212
  3043  001494  0E01               	movlw	1
  3044  001496  6E05               	movwf	i2___awmod@counter,c
  3045  001498  D004               	goto	i2l2202
  3046  00149A                     i2l2200:
  3047  00149A  90D8               	bcf	status,0,c
  3048  00149C  3603               	rlcf	i2___awmod@divisor,f,c
  3049  00149E  3604               	rlcf	i2___awmod@divisor+1,f,c
  3050  0014A0  2A05               	incf	i2___awmod@counter,f,c
  3051  0014A2                     i2l2202:
  3052  0014A2  AE04               	btfss	i2___awmod@divisor+1,7,c
  3053  0014A4  D7FA               	goto	i2l2200
  3054  0014A6                     i2l2204:
  3055  0014A6  5003               	movf	i2___awmod@divisor,w,c
  3056  0014A8  5C01               	subwf	i2___awmod@dividend,w,c
  3057  0014AA  5004               	movf	i2___awmod@divisor+1,w,c
  3058  0014AC  5802               	subwfb	i2___awmod@dividend+1,w,c
  3059  0014AE  A0D8               	btfss	status,0,c
  3060  0014B0  D004               	goto	i2l2208
  3061  0014B2  5003               	movf	i2___awmod@divisor,w,c
  3062  0014B4  5E01               	subwf	i2___awmod@dividend,f,c
  3063  0014B6  5004               	movf	i2___awmod@divisor+1,w,c
  3064  0014B8  5A02               	subwfb	i2___awmod@dividend+1,f,c
  3065  0014BA                     i2l2208:
  3066  0014BA  90D8               	bcf	status,0,c
  3067  0014BC  3204               	rrcf	i2___awmod@divisor+1,f,c
  3068  0014BE  3203               	rrcf	i2___awmod@divisor,f,c
  3069  0014C0  2E05               	decfsz	i2___awmod@counter,f,c
  3070  0014C2  D7F1               	goto	i2l2204
  3071  0014C4                     i2l2212:
  3072  0014C4  5006               	movf	i2___awmod@sign,w,c
  3073  0014C6  B4D8               	btfsc	status,2,c
  3074  0014C8  D004               	goto	i2l2216
  3075  0014CA  6C01               	negf	i2___awmod@dividend,c
  3076  0014CC  1E02               	comf	i2___awmod@dividend+1,f,c
  3077  0014CE  B0D8               	btfsc	status,0,c
  3078  0014D0  2A02               	incf	i2___awmod@dividend+1,f,c
  3079  0014D2                     i2l2216:
  3080  0014D2  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  3081  0014D6  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  3082  0014DA  0012               	return	
  3083  0014DC                     __end_ofi2___awmod:
  3084                           	opt stack 0
  3085                           pclatu	equ	0xFFB
  3086                           pclath	equ	0xFFA
  3087                           tblptru	equ	0xFF8
  3088                           tblptrh	equ	0xFF7
  3089                           tblptrl	equ	0xFF6
  3090                           tablat	equ	0xFF5
  3091                           prodh	equ	0xFF4
  3092                           prodl	equ	0xFF3
  3093                           intcon	equ	0xFF2
  3094                           intcon2	equ	0xFF1
  3095                           intcon3	equ	0xFF0
  3096                           indf0	equ	0xFEF
  3097                           postinc0	equ	0xFEE
  3098                           fsr0h	equ	0xFEA
  3099                           fsr0l	equ	0xFE9
  3100                           wreg	equ	0xFE8
  3101                           postdec1	equ	0xFE5
  3102                           fsr1h	equ	0xFE2
  3103                           fsr1l	equ	0xFE1
  3104                           indf2	equ	0xFDF
  3105                           fsr2h	equ	0xFDA
  3106                           fsr2l	equ	0xFD9
  3107                           status	equ	0xFD8
  3108                           
  3109 ;; *************** function i2___awdiv *****************
  3110 ;; Defined at:
  3111 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;  dividend        2    6[COMRAM] int 
  3114 ;;  divisor         2    8[COMRAM] int 
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;  __awdiv         2   12[COMRAM] int 
  3117 ;;  __awdiv         1   11[COMRAM] unsigned char 
  3118 ;;  __awdiv         1   10[COMRAM] unsigned char 
  3119 ;; Return value:  Size  Location     Type
  3120 ;;                  2    6[COMRAM] int 
  3121 ;; Registers used:
  3122 ;;		wreg, status,2, status,0
  3123 ;; Tracked objects:
  3124 ;;		On entry : 0/0
  3125 ;;		On exit  : 0/0
  3126 ;;		Unchanged: 0/0
  3127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3128 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3132 ;;Total ram usage:        8 bytes
  3133 ;; Hardware stack levels used:    1
  3134 ;; This function calls:
  3135 ;;		Nothing
  3136 ;; This function is called by:
  3137 ;;		_searched
  3138 ;;		i2_LCDWriteInt
  3139 ;; This function uses a non-reentrant model
  3140 ;;
  3141                           
  3142                           	psect	text24
  3143  001278                     __ptext24:
  3144                           	opt stack 0
  3145  001278                     i2___awdiv:
  3146                           	opt stack 20
  3147                           
  3148                           ;incstack = 0
  3149  001278  0E00               	movlw	0
  3150  00127A  6E0C               	movwf	i2___awdiv@sign,c
  3151  00127C  AE0A               	btfss	i2___awdiv@divisor+1,7,c
  3152  00127E  D006               	goto	i2l2148
  3153  001280  6C09               	negf	i2___awdiv@divisor,c
  3154  001282  1E0A               	comf	i2___awdiv@divisor+1,f,c
  3155  001284  B0D8               	btfsc	status,0,c
  3156  001286  2A0A               	incf	i2___awdiv@divisor+1,f,c
  3157  001288  0E01               	movlw	1
  3158  00128A  6E0C               	movwf	i2___awdiv@sign,c
  3159  00128C                     i2l2148:
  3160  00128C  AE08               	btfss	i2___awdiv@dividend+1,7,c
  3161  00128E  D006               	goto	i2l2154
  3162  001290  6C07               	negf	i2___awdiv@dividend,c
  3163  001292  1E08               	comf	i2___awdiv@dividend+1,f,c
  3164  001294  B0D8               	btfsc	status,0,c
  3165  001296  2A08               	incf	i2___awdiv@dividend+1,f,c
  3166  001298  0E01               	movlw	1
  3167  00129A  1A0C               	xorwf	i2___awdiv@sign,f,c
  3168  00129C                     i2l2154:
  3169  00129C  0E00               	movlw	0
  3170  00129E  6E0E               	movwf	i2___awdiv@quotient+1,c
  3171  0012A0  0E00               	movlw	0
  3172  0012A2  6E0D               	movwf	i2___awdiv@quotient,c
  3173  0012A4  5009               	movf	i2___awdiv@divisor,w,c
  3174  0012A6  100A               	iorwf	i2___awdiv@divisor+1,w,c
  3175  0012A8  B4D8               	btfsc	status,2,c
  3176  0012AA  D01C               	goto	i2l2176
  3177  0012AC  0E01               	movlw	1
  3178  0012AE  6E0B               	movwf	i2___awdiv@counter,c
  3179  0012B0  D004               	goto	i2l2162
  3180  0012B2                     i2l2160:
  3181  0012B2  90D8               	bcf	status,0,c
  3182  0012B4  3609               	rlcf	i2___awdiv@divisor,f,c
  3183  0012B6  360A               	rlcf	i2___awdiv@divisor+1,f,c
  3184  0012B8  2A0B               	incf	i2___awdiv@counter,f,c
  3185  0012BA                     i2l2162:
  3186  0012BA  AE0A               	btfss	i2___awdiv@divisor+1,7,c
  3187  0012BC  D7FA               	goto	i2l2160
  3188  0012BE                     i2l2164:
  3189  0012BE  90D8               	bcf	status,0,c
  3190  0012C0  360D               	rlcf	i2___awdiv@quotient,f,c
  3191  0012C2  360E               	rlcf	i2___awdiv@quotient+1,f,c
  3192  0012C4  5009               	movf	i2___awdiv@divisor,w,c
  3193  0012C6  5C07               	subwf	i2___awdiv@dividend,w,c
  3194  0012C8  500A               	movf	i2___awdiv@divisor+1,w,c
  3195  0012CA  5808               	subwfb	i2___awdiv@dividend+1,w,c
  3196  0012CC  A0D8               	btfss	status,0,c
  3197  0012CE  D005               	goto	i2l2172
  3198  0012D0  5009               	movf	i2___awdiv@divisor,w,c
  3199  0012D2  5E07               	subwf	i2___awdiv@dividend,f,c
  3200  0012D4  500A               	movf	i2___awdiv@divisor+1,w,c
  3201  0012D6  5A08               	subwfb	i2___awdiv@dividend+1,f,c
  3202  0012D8  800D               	bsf	i2___awdiv@quotient,0,c
  3203  0012DA                     i2l2172:
  3204  0012DA  90D8               	bcf	status,0,c
  3205  0012DC  320A               	rrcf	i2___awdiv@divisor+1,f,c
  3206  0012DE  3209               	rrcf	i2___awdiv@divisor,f,c
  3207  0012E0  2E0B               	decfsz	i2___awdiv@counter,f,c
  3208  0012E2  D7ED               	goto	i2l2164
  3209  0012E4                     i2l2176:
  3210  0012E4  500C               	movf	i2___awdiv@sign,w,c
  3211  0012E6  B4D8               	btfsc	status,2,c
  3212  0012E8  D004               	goto	i2l2180
  3213  0012EA  6C0D               	negf	i2___awdiv@quotient,c
  3214  0012EC  1E0E               	comf	i2___awdiv@quotient+1,f,c
  3215  0012EE  B0D8               	btfsc	status,0,c
  3216  0012F0  2A0E               	incf	i2___awdiv@quotient+1,f,c
  3217  0012F2                     i2l2180:
  3218  0012F2  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
  3219  0012F6  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  3220  0012FA  0012               	return	
  3221  0012FC                     __end_ofi2___awdiv:
  3222                           	opt stack 0
  3223                           pclatu	equ	0xFFB
  3224                           pclath	equ	0xFFA
  3225                           tblptru	equ	0xFF8
  3226                           tblptrh	equ	0xFF7
  3227                           tblptrl	equ	0xFF6
  3228                           tablat	equ	0xFF5
  3229                           prodh	equ	0xFF4
  3230                           prodl	equ	0xFF3
  3231                           intcon	equ	0xFF2
  3232                           intcon2	equ	0xFF1
  3233                           intcon3	equ	0xFF0
  3234                           indf0	equ	0xFEF
  3235                           postinc0	equ	0xFEE
  3236                           fsr0h	equ	0xFEA
  3237                           fsr0l	equ	0xFE9
  3238                           wreg	equ	0xFE8
  3239                           postdec1	equ	0xFE5
  3240                           fsr1h	equ	0xFE2
  3241                           fsr1l	equ	0xFE1
  3242                           indf2	equ	0xFDF
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function i2_LCDWriteStr *****************
  3248 ;; Defined at:
  3249 ;;		line 193 in file "lcd.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;  string          2    6[COMRAM] PTR const unsigned char 
  3252 ;;		 -> LCDWriteInt@string(3), LCDWriteFloat@string(5), LCDWriteHexa@string(3), STR_1(11), 
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;  LCDWriteStr     1   10[COMRAM] unsigned char 
  3255 ;; Return value:  Size  Location     Type
  3256 ;;                  1    wreg      void 
  3257 ;; Registers used:
  3258 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/0
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3264 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3268 ;;Total ram usage:        5 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; Hardware stack levels required when called:    3
  3271 ;; This function calls:
  3272 ;;		i2_LCDPutChar
  3273 ;; This function is called by:
  3274 ;;		i2_LCDWriteInt
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278                           	psect	text25
  3279  00137C                     __ptext25:
  3280                           	opt stack 0
  3281  00137C                     i2_LCDWriteStr:
  3282                           	opt stack 15
  3283                           
  3284                           ;lcd.c: 195: UINT8_T i = 0;
  3285                           
  3286                           ;incstack = 0
  3287  00137C  0E00               	movlw	0
  3288  00137E  6E0B               	movwf	i2LCDWriteStr@i,c
  3289                           
  3290                           ;lcd.c: 197: while (string[i])
  3291  001380  D01E               	goto	i2l2138
  3292  001382                     i2l2134:
  3293                           
  3294                           ;lcd.c: 198: LCDPutChar(string[i++]);
  3295  001382  500B               	movf	i2LCDWriteStr@i,w,c
  3296  001384  0D01               	mullw	1
  3297  001386  C007  F009         	movff	i2LCDWriteStr@string,??i2_LCDWriteStr
  3298  00138A  C008  F00A         	movff	i2LCDWriteStr@string+1,??i2_LCDWriteStr+1
  3299  00138E  50F3               	movf	prodl,w,c
  3300  001390  2609               	addwf	??i2_LCDWriteStr,f,c
  3301  001392  50F4               	movf	prodh,w,c
  3302  001394  220A               	addwfc	??i2_LCDWriteStr+1,f,c
  3303  001396  C009  FFF6         	movff	??i2_LCDWriteStr,tblptrl
  3304  00139A  C00A  FFF7         	movff	??i2_LCDWriteStr+1,tblptrh
  3305  00139E  0E00               	movlw	low (__smallconst shr (0+16))
  3306  0013A0  6EF8               	movwf	tblptru,c
  3307  0013A2  0E0F               	movlw	(high __ramtop+-1)
  3308  0013A4  64F7               	cpfsgt	tblptrh,c
  3309  0013A6  D003               	bra	i2u140_47
  3310  0013A8  0008               	tblrd		*
  3311  0013AA  50F5               	movf	tablat,w,c
  3312  0013AC  D005               	bra	i2u140_40
  3313  0013AE                     i2u140_47:
  3314  0013AE  CFF6 FFE9          	movff	tblptrl,fsr0l
  3315  0013B2  CFF7 FFEA          	movff	tblptrh,fsr0h
  3316  0013B6  50EF               	movf	indf0,w,c
  3317  0013B8                     i2u140_40:
  3318  0013B8  EC1B  F00C         	call	i2_LCDPutChar
  3319  0013BC  2A0B               	incf	i2LCDWriteStr@i,f,c
  3320  0013BE                     i2l2138:
  3321  0013BE  500B               	movf	i2LCDWriteStr@i,w,c
  3322  0013C0  0D01               	mullw	1
  3323  0013C2  C007  F009         	movff	i2LCDWriteStr@string,??i2_LCDWriteStr
  3324  0013C6  C008  F00A         	movff	i2LCDWriteStr@string+1,??i2_LCDWriteStr+1
  3325  0013CA  50F3               	movf	prodl,w,c
  3326  0013CC  2609               	addwf	??i2_LCDWriteStr,f,c
  3327  0013CE  50F4               	movf	prodh,w,c
  3328  0013D0  220A               	addwfc	??i2_LCDWriteStr+1,f,c
  3329  0013D2  C009  FFF6         	movff	??i2_LCDWriteStr,tblptrl
  3330  0013D6  C00A  FFF7         	movff	??i2_LCDWriteStr+1,tblptrh
  3331  0013DA  0E00               	movlw	low (__smallconst shr (0+16))
  3332  0013DC  6EF8               	movwf	tblptru,c
  3333  0013DE  0E0F               	movlw	(high __ramtop+-1)
  3334  0013E0  64F7               	cpfsgt	tblptrh,c
  3335  0013E2  D003               	bra	i2u141_47
  3336  0013E4  0008               	tblrd		*
  3337  0013E6  50F5               	movf	tablat,w,c
  3338  0013E8  D005               	bra	i2u141_40
  3339  0013EA                     i2u141_47:
  3340  0013EA  CFF6 FFE9          	movff	tblptrl,fsr0l
  3341  0013EE  CFF7 FFEA          	movff	tblptrh,fsr0h
  3342  0013F2  50EF               	movf	indf0,w,c
  3343  0013F4                     i2u141_40:
  3344  0013F4  0900               	iorlw	0
  3345  0013F6  B4D8               	btfsc	status,2,c
  3346  0013F8  0012               	return	
  3347  0013FA  D7C3               	goto	i2l2134
  3348  0013FC                     __end_ofi2_LCDWriteStr:
  3349                           	opt stack 0
  3350                           pclatu	equ	0xFFB
  3351                           pclath	equ	0xFFA
  3352                           tblptru	equ	0xFF8
  3353                           tblptrh	equ	0xFF7
  3354                           tblptrl	equ	0xFF6
  3355                           tablat	equ	0xFF5
  3356                           prodh	equ	0xFF4
  3357                           prodl	equ	0xFF3
  3358                           intcon	equ	0xFF2
  3359                           intcon2	equ	0xFF1
  3360                           intcon3	equ	0xFF0
  3361                           indf0	equ	0xFEF
  3362                           postinc0	equ	0xFEE
  3363                           fsr0h	equ	0xFEA
  3364                           fsr0l	equ	0xFE9
  3365                           wreg	equ	0xFE8
  3366                           postdec1	equ	0xFE5
  3367                           fsr1h	equ	0xFE2
  3368                           fsr1l	equ	0xFE1
  3369                           indf2	equ	0xFDF
  3370                           fsr2h	equ	0xFDA
  3371                           fsr2l	equ	0xFD9
  3372                           status	equ	0xFD8
  3373                           
  3374 ;; *************** function i2_LCDPutChar *****************
  3375 ;; Defined at:
  3376 ;;		line 180 in file "lcd.c"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;  data            1    wreg     unsigned char 
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;  data            1    5[COMRAM] unsigned char 
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  1    wreg      void 
  3383 ;; Registers used:
  3384 ;;		wreg, status,2, status,0, cstack
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3391 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;Total ram usage:        1 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    2
  3397 ;; This function calls:
  3398 ;;		i2_WaitLCD
  3399 ;;		i2_WriteByte
  3400 ;; This function is called by:
  3401 ;;		i2_LCDWriteStr
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text26
  3406  001836                     __ptext26:
  3407                           	opt stack 0
  3408  001836                     i2_LCDPutChar:
  3409                           	opt stack 15
  3410                           
  3411                           ;incstack = 0
  3412                           ;i2LCDPutChar@data stored from wreg
  3413  001836  6E06               	movwf	i2LCDPutChar@data,c
  3414                           
  3415                           ;lcd.c: 182: WriteByte(0, data);
  3416  001838  C006  F004         	movff	i2LCDPutChar@data,i2WriteByte@data
  3417  00183C  0E00               	movlw	0
  3418  00183E  ECFC  F00B         	call	i2_WriteByte
  3419                           
  3420                           ;lcd.c: 183: WaitLCD();
  3421  001842  EC24  F00C         	call	i2_WaitLCD	;wreg free
  3422  001846  0012               	return		;funcret
  3423  001848                     __end_ofi2_LCDPutChar:
  3424                           	opt stack 0
  3425                           pclatu	equ	0xFFB
  3426                           pclath	equ	0xFFA
  3427                           tblptru	equ	0xFF8
  3428                           tblptrh	equ	0xFF7
  3429                           tblptrl	equ	0xFF6
  3430                           tablat	equ	0xFF5
  3431                           prodh	equ	0xFF4
  3432                           prodl	equ	0xFF3
  3433                           intcon	equ	0xFF2
  3434                           intcon2	equ	0xFF1
  3435                           intcon3	equ	0xFF0
  3436                           indf0	equ	0xFEF
  3437                           postinc0	equ	0xFEE
  3438                           fsr0h	equ	0xFEA
  3439                           fsr0l	equ	0xFE9
  3440                           wreg	equ	0xFE8
  3441                           postdec1	equ	0xFE5
  3442                           fsr1h	equ	0xFE2
  3443                           fsr1l	equ	0xFE1
  3444                           indf2	equ	0xFDF
  3445                           fsr2h	equ	0xFDA
  3446                           fsr2l	equ	0xFD9
  3447                           status	equ	0xFD8
  3448                           
  3449 ;; *************** function i2_LCDGoto *****************
  3450 ;; Defined at:
  3451 ;;		line 171 in file "lcd.c"
  3452 ;; Parameters:    Size  Location     Type
  3453 ;;  column          1    wreg     unsigned char 
  3454 ;;  row             1    5[COMRAM] unsigned char 
  3455 ;; Auto vars:     Size  Location     Type
  3456 ;;  column          1   10[COMRAM] unsigned char 
  3457 ;; Return value:  Size  Location     Type
  3458 ;;                  1    wreg      void 
  3459 ;; Registers used:
  3460 ;;		wreg, status,2, status,0, cstack
  3461 ;; Tracked objects:
  3462 ;;		On entry : 0/0
  3463 ;;		On exit  : 0/0
  3464 ;;		Unchanged: 0/0
  3465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3466 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3467 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3468 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3469 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3470 ;;Total ram usage:        6 bytes
  3471 ;; Hardware stack levels used:    1
  3472 ;; Hardware stack levels required when called:    2
  3473 ;; This function calls:
  3474 ;;		i2_WaitLCD
  3475 ;;		i2_WriteByte
  3476 ;; This function is called by:
  3477 ;;		i2_LCDWriteInt
  3478 ;; This function uses a non-reentrant model
  3479 ;;
  3480                           
  3481                           	psect	text27
  3482  0016B2                     __ptext27:
  3483                           	opt stack 0
  3484  0016B2                     i2_LCDGoto:
  3485                           	opt stack 16
  3486                           
  3487                           ;incstack = 0
  3488                           ;i2LCDGoto@column stored from wreg
  3489  0016B2  6E0B               	movwf	i2LCDGoto@column,c
  3490                           
  3491                           ;lcd.c: 173: if ((row > (2 - 1)) || (column > (16 - 1)))
  3492  0016B4  0E02               	movlw	2
  3493  0016B6  6006               	cpfslt	i2LCDGoto@row,c
  3494  0016B8  0012               	return	
  3495  0016BA  0E0F               	movlw	15
  3496  0016BC  640B               	cpfsgt	i2LCDGoto@column,c
  3497  0016BE  D001               	goto	i2l2122
  3498  0016C0  0012               	return	
  3499  0016C2                     i2l2122:
  3500                           
  3501                           ;lcd.c: 176: WriteByte(1, (row == 1) ? (0xC0 | column) : (0x80 | column));
  3502  0016C2  0406               	decf	i2LCDGoto@row,w,c
  3503  0016C4  B4D8               	btfsc	status,2,c
  3504  0016C6  D002               	goto	i2l2126
  3505  0016C8  0E80               	movlw	128
  3506  0016CA  D001               	goto	L2
  3507  0016CC                     i2l2126:
  3508  0016CC  0EC0               	movlw	192
  3509  0016CE                     L2:
  3510  0016CE  C00B  F007         	movff	i2LCDGoto@column,??i2_LCDGoto
  3511  0016D2  6A08               	clrf	(??i2_LCDGoto+1)& (0+255),c
  3512  0016D4  1007               	iorwf	??i2_LCDGoto,w,c
  3513  0016D6  6E09               	movwf	i2_LCDGoto$661,c
  3514  0016D8  5008               	movf	??i2_LCDGoto+1,w,c
  3515  0016DA  6E0A               	movwf	i2_LCDGoto$661+1,c
  3516  0016DC  C009  F004         	movff	i2_LCDGoto$661,i2WriteByte@data
  3517  0016E0  0E01               	movlw	1
  3518  0016E2  ECFC  F00B         	call	i2_WriteByte
  3519                           
  3520                           ;lcd.c: 177: WaitLCD();
  3521  0016E6  EC24  F00C         	call	i2_WaitLCD	;wreg free
  3522  0016EA  0012               	return		;funcret
  3523  0016EC                     __end_ofi2_LCDGoto:
  3524                           	opt stack 0
  3525                           pclatu	equ	0xFFB
  3526                           pclath	equ	0xFFA
  3527                           tblptru	equ	0xFF8
  3528                           tblptrh	equ	0xFF7
  3529                           tblptrl	equ	0xFF6
  3530                           tablat	equ	0xFF5
  3531                           prodh	equ	0xFF4
  3532                           prodl	equ	0xFF3
  3533                           intcon	equ	0xFF2
  3534                           intcon2	equ	0xFF1
  3535                           intcon3	equ	0xFF0
  3536                           indf0	equ	0xFEF
  3537                           postinc0	equ	0xFEE
  3538                           fsr0h	equ	0xFEA
  3539                           fsr0l	equ	0xFE9
  3540                           wreg	equ	0xFE8
  3541                           postdec1	equ	0xFE5
  3542                           fsr1h	equ	0xFE2
  3543                           fsr1l	equ	0xFE1
  3544                           indf2	equ	0xFDF
  3545                           fsr2h	equ	0xFDA
  3546                           fsr2l	equ	0xFD9
  3547                           status	equ	0xFD8
  3548                           
  3549 ;; *************** function i2_WriteByte *****************
  3550 ;; Defined at:
  3551 ;;		line 83 in file "lcd.c"
  3552 ;; Parameters:    Size  Location     Type
  3553 ;;  cmd             1    wreg     unsigned char 
  3554 ;;  data            1    3[COMRAM] unsigned char 
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;  cmd             1    4[COMRAM] unsigned char 
  3557 ;; Return value:  Size  Location     Type
  3558 ;;                  1    wreg      void 
  3559 ;; Registers used:
  3560 ;;		wreg, status,2, status,0, cstack
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3566 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3567 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;Total ram usage:        2 bytes
  3571 ;; Hardware stack levels used:    1
  3572 ;; Hardware stack levels required when called:    1
  3573 ;; This function calls:
  3574 ;;		i2_WriteNibble
  3575 ;; This function is called by:
  3576 ;;		i2_LCDGoto
  3577 ;;		i2_LCDPutChar
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581                           	psect	text28
  3582  0017F8                     __ptext28:
  3583                           	opt stack 0
  3584  0017F8                     i2_WriteByte:
  3585                           	opt stack 15
  3586                           
  3587                           ;incstack = 0
  3588                           ;i2WriteByte@cmd stored from wreg
  3589  0017F8  6E05               	movwf	i2WriteByte@cmd,c
  3590                           
  3591                           ;lcd.c: 85: WriteNibble(cmd, data >> 4);
  3592  0017FA  3804               	swapf	i2WriteByte@data,w,c
  3593  0017FC  0B0F               	andlw	15
  3594  0017FE  6E01               	movwf	i2WriteNibble@data,c
  3595  001800  5005               	movf	i2WriteByte@cmd,w,c
  3596  001802  EC1A  F00B         	call	i2_WriteNibble
  3597                           
  3598                           ;lcd.c: 86: WriteNibble(cmd, data);
  3599  001806  C004  F001         	movff	i2WriteByte@data,i2WriteNibble@data
  3600  00180A  5005               	movf	i2WriteByte@cmd,w,c
  3601  00180C  EC1A  F00B         	call	i2_WriteNibble
  3602  001810  0012               	return		;funcret
  3603  001812                     __end_ofi2_WriteByte:
  3604                           	opt stack 0
  3605                           pclatu	equ	0xFFB
  3606                           pclath	equ	0xFFA
  3607                           tblptru	equ	0xFF8
  3608                           tblptrh	equ	0xFF7
  3609                           tblptrl	equ	0xFF6
  3610                           tablat	equ	0xFF5
  3611                           prodh	equ	0xFF4
  3612                           prodl	equ	0xFF3
  3613                           intcon	equ	0xFF2
  3614                           intcon2	equ	0xFF1
  3615                           intcon3	equ	0xFF0
  3616                           indf0	equ	0xFEF
  3617                           postinc0	equ	0xFEE
  3618                           fsr0h	equ	0xFEA
  3619                           fsr0l	equ	0xFE9
  3620                           wreg	equ	0xFE8
  3621                           postdec1	equ	0xFE5
  3622                           fsr1h	equ	0xFE2
  3623                           fsr1l	equ	0xFE1
  3624                           indf2	equ	0xFDF
  3625                           fsr2h	equ	0xFDA
  3626                           fsr2l	equ	0xFD9
  3627                           status	equ	0xFD8
  3628                           
  3629 ;; *************** function i2_WriteNibble *****************
  3630 ;; Defined at:
  3631 ;;		line 66 in file "lcd.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;  cmd             1    wreg     unsigned char 
  3634 ;;  data            1    0[COMRAM] unsigned char 
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;  cmd             1    2[COMRAM] unsigned char 
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  1    wreg      void 
  3639 ;; Registers used:
  3640 ;;		wreg, status,2, status,0
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3646 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;Total ram usage:        3 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; This function calls:
  3653 ;;		Nothing
  3654 ;; This function is called by:
  3655 ;;		i2_WriteByte
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659                           	psect	text29
  3660  001634                     __ptext29:
  3661                           	opt stack 0
  3662  001634                     i2_WriteNibble:
  3663                           	opt stack 15
  3664                           
  3665                           ;incstack = 0
  3666                           ;i2WriteNibble@cmd stored from wreg
  3667  001634  6E03               	movwf	i2WriteNibble@cmd,c
  3668                           
  3669                           ;lcd.c: 68: LATDbits.LATD4 = (cmd ? 0 : 1);
  3670  001636  5003               	movf	i2WriteNibble@cmd,w,c
  3671  001638  A4D8               	btfss	status,2,c
  3672  00163A  D003               	goto	i2u116_40
  3673  00163C  6A02               	clrf	??i2_WriteNibble& (0+255),c
  3674  00163E  2A02               	incf	??i2_WriteNibble& (0+255),f,c
  3675  001640  D001               	goto	i2u117_48
  3676  001642                     i2u116_40:
  3677  001642  6A02               	clrf	??i2_WriteNibble& (0+255),c
  3678  001644                     i2u117_48:
  3679  001644  3A02               	swapf	??i2_WriteNibble,f,c
  3680  001646  508C               	movf	3980,w,c	;volatile
  3681  001648  1802               	xorwf	??i2_WriteNibble,w,c
  3682  00164A  0BEF               	andlw	-17
  3683  00164C  1802               	xorwf	??i2_WriteNibble,w,c
  3684  00164E  6E8C               	movwf	3980,c	;volatile
  3685                           
  3686                           ;lcd.c: 69: LATDbits.LATD5 = 0;
  3687  001650  9A8C               	bcf	3980,5,c	;volatile
  3688                           
  3689                           ;lcd.c: 70: LATDbits.LATD6 = 1;
  3690  001652  8C8C               	bsf	3980,6,c	;volatile
  3691                           
  3692                           ;lcd.c: 72: LATDbits.LATD0 = LATDbits.LATD1 = LATDbits.LATD2 = LATDbits.LATD3 = 0;
  3693  001654  968C               	bcf	3980,3,c	;volatile
  3694  001656  948C               	bcf	3980,2,c	;volatile
  3695  001658  928C               	bcf	3980,1,c	;volatile
  3696  00165A  908C               	bcf	3980,0,c	;volatile
  3697                           
  3698                           ;lcd.c: 73: __nop();
  3699  00165C  F000               	nop	
  3700                           
  3701                           ;lcd.c: 74: __nop();
  3702  00165E  F000               	nop	
  3703                           
  3704                           ;lcd.c: 76: LATD = (LATD & 0xF0) | (data & 0x0F);
  3705  001660  C001  F002         	movff	i2WriteNibble@data,??i2_WriteNibble
  3706  001664  0E0F               	movlw	15
  3707  001666  1602               	andwf	??i2_WriteNibble,f,c
  3708  001668  508C               	movf	3980,w,c	;volatile
  3709  00166A  0BF0               	andlw	240
  3710  00166C  1002               	iorwf	??i2_WriteNibble,w,c
  3711  00166E  6E8C               	movwf	3980,c	;volatile
  3712                           
  3713                           ;lcd.c: 77: __nop();
  3714  001670  F000               	nop	
  3715                           
  3716                           ;lcd.c: 78: __nop();
  3717  001672  F000               	nop	
  3718                           
  3719                           ;lcd.c: 80: LATDbits.LATD6 = 0;
  3720  001674  9C8C               	bcf	3980,6,c	;volatile
  3721  001676  0012               	return		;funcret
  3722  001678                     __end_ofi2_WriteNibble:
  3723                           	opt stack 0
  3724                           pclatu	equ	0xFFB
  3725                           pclath	equ	0xFFA
  3726                           tblptru	equ	0xFF8
  3727                           tblptrh	equ	0xFF7
  3728                           tblptrl	equ	0xFF6
  3729                           tablat	equ	0xFF5
  3730                           prodh	equ	0xFF4
  3731                           prodl	equ	0xFF3
  3732                           intcon	equ	0xFF2
  3733                           intcon2	equ	0xFF1
  3734                           intcon3	equ	0xFF0
  3735                           indf0	equ	0xFEF
  3736                           postinc0	equ	0xFEE
  3737                           fsr0h	equ	0xFEA
  3738                           fsr0l	equ	0xFE9
  3739                           wreg	equ	0xFE8
  3740                           postdec1	equ	0xFE5
  3741                           fsr1h	equ	0xFE2
  3742                           fsr1l	equ	0xFE1
  3743                           indf2	equ	0xFDF
  3744                           fsr2h	equ	0xFDA
  3745                           fsr2l	equ	0xFD9
  3746                           status	equ	0xFD8
  3747                           
  3748 ;; *************** function i2_WaitLCD *****************
  3749 ;; Defined at:
  3750 ;;		line 52 in file "lcd.c"
  3751 ;; Parameters:    Size  Location     Type
  3752 ;;		None
  3753 ;; Auto vars:     Size  Location     Type
  3754 ;;  WaitLCD         1    1[COMRAM] unsigned char 
  3755 ;; Return value:  Size  Location     Type
  3756 ;;                  1    wreg      void 
  3757 ;; Registers used:
  3758 ;;		wreg, status,2, status,0, cstack
  3759 ;; Tracked objects:
  3760 ;;		On entry : 0/0
  3761 ;;		On exit  : 0/0
  3762 ;;		Unchanged: 0/0
  3763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3768 ;;Total ram usage:        1 bytes
  3769 ;; Hardware stack levels used:    1
  3770 ;; Hardware stack levels required when called:    1
  3771 ;; This function calls:
  3772 ;;		i2_ReadByte
  3773 ;; This function is called by:
  3774 ;;		i2_LCDGoto
  3775 ;;		i2_LCDPutChar
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           	psect	text30
  3780  001848                     __ptext30:
  3781                           	opt stack 0
  3782  001848                     i2_WaitLCD:
  3783                           	opt stack 15
  3784                           
  3785                           ;lcd.c: 54: UINT8_T status;
  3786                           ;lcd.c: 56: LATDbits.LATD4 = 0;
  3787                           
  3788                           ;incstack = 0
  3789  001848  988C               	bcf	3980,4,c	;volatile
  3790                           
  3791                           ;lcd.c: 57: LATDbits.LATD5 = 1;
  3792  00184A  8A8C               	bsf	3980,5,c	;volatile
  3793  00184C                     i2l2000:
  3794                           
  3795                           ;lcd.c: 60: status = ReadByte();
  3796  00184C  ECA7  F00B         	call	i2_ReadByte	;wreg free
  3797  001850  6E02               	movwf	i2WaitLCD@status,c
  3798                           
  3799                           ;lcd.c: 61: } while (status & 0x80);
  3800  001852  BE02               	btfsc	i2WaitLCD@status,7,c
  3801  001854  D7FB               	goto	i2l2000
  3802                           
  3803                           ;lcd.c: 63: LATDbits.LATD5 = 0;
  3804  001856  9A8C               	bcf	3980,5,c	;volatile
  3805  001858  0012               	return		;funcret
  3806  00185A                     __end_ofi2_WaitLCD:
  3807                           	opt stack 0
  3808                           pclatu	equ	0xFFB
  3809                           pclath	equ	0xFFA
  3810                           tblptru	equ	0xFF8
  3811                           tblptrh	equ	0xFF7
  3812                           tblptrl	equ	0xFF6
  3813                           tablat	equ	0xFF5
  3814                           prodh	equ	0xFF4
  3815                           prodl	equ	0xFF3
  3816                           intcon	equ	0xFF2
  3817                           intcon2	equ	0xFF1
  3818                           intcon3	equ	0xFF0
  3819                           indf0	equ	0xFEF
  3820                           postinc0	equ	0xFEE
  3821                           fsr0h	equ	0xFEA
  3822                           fsr0l	equ	0xFE9
  3823                           wreg	equ	0xFE8
  3824                           postdec1	equ	0xFE5
  3825                           fsr1h	equ	0xFE2
  3826                           fsr1l	equ	0xFE1
  3827                           indf2	equ	0xFDF
  3828                           fsr2h	equ	0xFDA
  3829                           fsr2l	equ	0xFD9
  3830                           status	equ	0xFD8
  3831                           
  3832 ;; *************** function i2_ReadByte *****************
  3833 ;; Defined at:
  3834 ;;		line 21 in file "lcd.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;		None
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;  ReadByte        1    0[COMRAM] unsigned char 
  3839 ;; Return value:  Size  Location     Type
  3840 ;;                  1    wreg      unsigned char 
  3841 ;; Registers used:
  3842 ;;		wreg, status,2, status,0
  3843 ;; Tracked objects:
  3844 ;;		On entry : 0/0
  3845 ;;		On exit  : 0/0
  3846 ;;		Unchanged: 0/0
  3847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3849 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3851 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3852 ;;Total ram usage:        1 bytes
  3853 ;; Hardware stack levels used:    1
  3854 ;; This function calls:
  3855 ;;		Nothing
  3856 ;; This function is called by:
  3857 ;;		i2_WaitLCD
  3858 ;; This function uses a non-reentrant model
  3859 ;;
  3860                           
  3861                           	psect	text31
  3862  00174E                     __ptext31:
  3863                           	opt stack 0
  3864  00174E                     i2_ReadByte:
  3865                           	opt stack 15
  3866                           
  3867                           ;lcd.c: 23: UINT8_T status;
  3868                           ;lcd.c: 25: TRISDbits.TRISD0 = 1;
  3869                           
  3870                           ;incstack = 0
  3871  00174E  8095               	bsf	3989,0,c	;volatile
  3872                           
  3873                           ;lcd.c: 26: TRISDbits.TRISD1 = 1;
  3874  001750  8295               	bsf	3989,1,c	;volatile
  3875                           
  3876                           ;lcd.c: 27: TRISDbits.TRISD2 = 1;
  3877  001752  8495               	bsf	3989,2,c	;volatile
  3878                           
  3879                           ;lcd.c: 28: TRISDbits.TRISD3 = 1;
  3880  001754  8695               	bsf	3989,3,c	;volatile
  3881                           
  3882                           ;lcd.c: 30: LATDbits.LATD6 = 1;
  3883  001756  8C8C               	bsf	3980,6,c	;volatile
  3884                           
  3885                           ;lcd.c: 31: __nop();
  3886  001758  F000               	nop	
  3887                           
  3888                           ;lcd.c: 32: __nop();
  3889  00175A  F000               	nop	
  3890                           
  3891                           ;lcd.c: 34: status = PORTD << 4;
  3892  00175C  3883               	swapf	3971,w,c	;volatile
  3893  00175E  0BF0               	andlw	240
  3894  001760  6E01               	movwf	i2ReadByte@status,c
  3895                           
  3896                           ;lcd.c: 35: LATDbits.LATD6 = 0;
  3897  001762  9C8C               	bcf	3980,6,c	;volatile
  3898                           
  3899                           ;lcd.c: 37: LATDbits.LATD6 = 1;
  3900  001764  8C8C               	bsf	3980,6,c	;volatile
  3901                           
  3902                           ;lcd.c: 38: __nop();
  3903  001766  F000               	nop	
  3904                           
  3905                           ;lcd.c: 39: __nop();
  3906  001768  F000               	nop	
  3907                           
  3908                           ;lcd.c: 41: status |= PORTD & 0x0F;
  3909  00176A  5083               	movf	3971,w,c	;volatile
  3910  00176C  0B0F               	andlw	15
  3911  00176E  1201               	iorwf	i2ReadByte@status,f,c
  3912                           
  3913                           ;lcd.c: 42: LATDbits.LATD6 = 0;
  3914  001770  9C8C               	bcf	3980,6,c	;volatile
  3915                           
  3916                           ;lcd.c: 44: TRISDbits.TRISD0 = 0;
  3917  001772  9095               	bcf	3989,0,c	;volatile
  3918                           
  3919                           ;lcd.c: 45: TRISDbits.TRISD1 = 0;
  3920  001774  9295               	bcf	3989,1,c	;volatile
  3921                           
  3922                           ;lcd.c: 46: TRISDbits.TRISD2 = 0;
  3923  001776  9495               	bcf	3989,2,c	;volatile
  3924                           
  3925                           ;lcd.c: 47: TRISDbits.TRISD3 = 0;
  3926  001778  9695               	bcf	3989,3,c	;volatile
  3927                           
  3928                           ;lcd.c: 49: return(status);
  3929  00177A  5001               	movf	i2ReadByte@status,w,c
  3930  00177C  0012               	return	
  3931  00177E                     __end_ofi2_ReadByte:
  3932                           	opt stack 0
  3933                           pclatu	equ	0xFFB
  3934                           pclath	equ	0xFFA
  3935                           tblptru	equ	0xFF8
  3936                           tblptrh	equ	0xFF7
  3937                           tblptrl	equ	0xFF6
  3938                           tablat	equ	0xFF5
  3939                           prodh	equ	0xFF4
  3940                           prodl	equ	0xFF3
  3941                           intcon	equ	0xFF2
  3942                           intcon2	equ	0xFF1
  3943                           intcon3	equ	0xFF0
  3944                           indf0	equ	0xFEF
  3945                           postinc0	equ	0xFEE
  3946                           fsr0h	equ	0xFEA
  3947                           fsr0l	equ	0xFE9
  3948                           wreg	equ	0xFE8
  3949                           postdec1	equ	0xFE5
  3950                           fsr1h	equ	0xFE2
  3951                           fsr1l	equ	0xFE1
  3952                           indf2	equ	0xFDF
  3953                           fsr2h	equ	0xFDA
  3954                           fsr2l	equ	0xFD9
  3955                           status	equ	0xFD8
  3956                           pclatu	equ	0xFFB
  3957                           pclath	equ	0xFFA
  3958                           tblptru	equ	0xFF8
  3959                           tblptrh	equ	0xFF7
  3960                           tblptrl	equ	0xFF6
  3961                           tablat	equ	0xFF5
  3962                           prodh	equ	0xFF4
  3963                           prodl	equ	0xFF3
  3964                           intcon	equ	0xFF2
  3965                           intcon2	equ	0xFF1
  3966                           intcon3	equ	0xFF0
  3967                           indf0	equ	0xFEF
  3968                           postinc0	equ	0xFEE
  3969                           fsr0h	equ	0xFEA
  3970                           fsr0l	equ	0xFE9
  3971                           wreg	equ	0xFE8
  3972                           postdec1	equ	0xFE5
  3973                           fsr1h	equ	0xFE2
  3974                           fsr1l	equ	0xFE1
  3975                           indf2	equ	0xFDF
  3976                           fsr2h	equ	0xFDA
  3977                           fsr2l	equ	0xFD9
  3978                           status	equ	0xFD8
  3979                           
  3980                           	psect	rparam
  3981  0000                     pclatu	equ	0xFFB
  3982                           pclath	equ	0xFFA
  3983                           tblptru	equ	0xFF8
  3984                           tblptrh	equ	0xFF7
  3985                           tblptrl	equ	0xFF6
  3986                           tablat	equ	0xFF5
  3987                           prodh	equ	0xFF4
  3988                           prodl	equ	0xFF3
  3989                           intcon	equ	0xFF2
  3990                           intcon2	equ	0xFF1
  3991                           intcon3	equ	0xFF0
  3992                           indf0	equ	0xFEF
  3993                           postinc0	equ	0xFEE
  3994                           fsr0h	equ	0xFEA
  3995                           fsr0l	equ	0xFE9
  3996                           wreg	equ	0xFE8
  3997                           postdec1	equ	0xFE5
  3998                           fsr1h	equ	0xFE2
  3999                           fsr1l	equ	0xFE1
  4000                           indf2	equ	0xFDF
  4001                           fsr2h	equ	0xFDA
  4002                           fsr2l	equ	0xFD9
  4003                           status	equ	0xFD8
  4004                           
  4005                           	psect	temp
  4006  000039                     btemp:
  4007                           	opt stack 0
  4008  000039                     	ds	1
  4009  0000                     int$flags	set	btemp
  4010                           pclatu	equ	0xFFB
  4011                           pclath	equ	0xFFA
  4012                           tblptru	equ	0xFF8
  4013                           tblptrh	equ	0xFF7
  4014                           tblptrl	equ	0xFF6
  4015                           tablat	equ	0xFF5
  4016                           prodh	equ	0xFF4
  4017                           prodl	equ	0xFF3
  4018                           intcon	equ	0xFF2
  4019                           intcon2	equ	0xFF1
  4020                           intcon3	equ	0xFF0
  4021                           indf0	equ	0xFEF
  4022                           postinc0	equ	0xFEE
  4023                           fsr0h	equ	0xFEA
  4024                           fsr0l	equ	0xFE9
  4025                           wreg	equ	0xFE8
  4026                           postdec1	equ	0xFE5
  4027                           fsr1h	equ	0xFE2
  4028                           fsr1l	equ	0xFE1
  4029                           indf2	equ	0xFDF
  4030                           fsr2h	equ	0xFDA
  4031                           fsr2l	equ	0xFD9
  4032                           status	equ	0xFD8


Data Sizes:
    Strings     28
    Constant    0
    Data        4
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     50      56
    BANK0           160      9       9
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    LCDWriteStr@string	PTR const unsigned char  size(2) Largest target is 11
		 -> LCDWriteInt@string(BANK0[3]), LCDWriteFloat@string(COMRAM[5]), LCDWriteHexa@string(COMRAM[3]), STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _show_debug->_LCDWriteInt
    _LCDWriteInt->_LCDGoto
    _LCDWriteInt->_LCDWriteStr
    _LCDWriteStr->_LCDPutChar
    _LCDPutChar->_WriteByte
    _LCDGoto->_WriteByte
    _LCDInit->_WriteNibble
    _LCDClear->_WriteByte
    _WriteByte->_WriteNibble
    _WaitLCD->_ReadByte

Critical Paths under _ISR in COMRAM

    _ISR->_searched
    _searched->i2___awdiv
    i2_show_debug->i2_LCDWriteInt
    i2_LCDWriteInt->i2___awdiv
    i2___awdiv->i2___awmod
    i2_LCDWriteStr->i2_LCDPutChar
    i2_LCDPutChar->i2_WriteByte
    i2_LCDGoto->i2_WriteByte
    i2_WriteByte->i2_WriteNibble
    i2_WaitLCD->i2_ReadByte

Critical Paths under _main in BANK0

    _show_debug->_LCDWriteInt

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5   14752
                                              4 BANK0      5     0      5
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0   14752
                         _init_debug
 ---------------------------------------------------------------------------------
 (2) _init_debug                                           0     0      0   14752
                           _LCDClear
                            _LCDGoto
                            _LCDInit
                        _LCDWriteStr
                         _show_debug
 ---------------------------------------------------------------------------------
 (3) _show_debug                                           0     0      0    7027
                        _LCDWriteInt
 ---------------------------------------------------------------------------------
 (4) _LCDWriteInt                                          6     4      2    7027
                                             48 COMRAM     2     0      2
                                              0 BANK0      4     4      0
                            _LCDGoto
                        _LCDWriteStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1063
                                             37 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     991
                                             37 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _LCDWriteStr                                          5     3      2    2266
                                             43 COMRAM     5     3      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (6) _LCDPutChar                                           1     1      0    1828
                                             42 COMRAM     1     1      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (5) _LCDGoto                                              6     5      1    2297
                                             42 COMRAM     6     5      1
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (3) _LCDInit                                              1     1      0    1365
                                             40 COMRAM     1     1      0
                            _WaitLCD
                        _WriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDClear                                             1     1      0    1797
                                             42 COMRAM     1     1      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (7) _WriteByte                                            2     1      1    1726
                                             40 COMRAM     2     1      1
                        _WriteNibble
 ---------------------------------------------------------------------------------
 (8) _WriteNibble                                          3     2      1    1294
                                             37 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _WaitLCD                                              1     1      0      71
                                             38 COMRAM     1     1      0
                           _ReadByte
 ---------------------------------------------------------------------------------
 (8) _ReadByte                                             1     1      0      37
                                             37 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                 17    17      0    4266
                                             20 COMRAM    17    17      0
                         _flashlight
                          _pedometer
                           _searched
                        _synchronize
 ---------------------------------------------------------------------------------
 (10) _synchronize                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _searched                                            6     6      0    1429
                                             14 COMRAM     6     6      0
                         _flashlight
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (11) _flashlight                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _pedometer                                           0     0      0    2735
                       i2_show_debug
 ---------------------------------------------------------------------------------
 (11) i2_show_debug                                        0     0      0    2735
                      i2_LCDWriteInt
 ---------------------------------------------------------------------------------
 (12) i2_LCDWriteInt                                       6     4      2    2735
                                             14 COMRAM     6     4      2
                          i2_LCDGoto
                      i2_LCDWriteStr
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (11) i2___awmod                                           6     2      4     643
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___awdiv                                           8     4      4     585
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (13) i2_LCDWriteStr                                       5     3      2     593
                                              6 COMRAM     5     3      2
                       i2_LCDPutChar
 ---------------------------------------------------------------------------------
 (14) i2_LCDPutChar                                        1     1      0     428
                                              5 COMRAM     1     1      0
                          i2_WaitLCD
                        i2_WriteByte
 ---------------------------------------------------------------------------------
 (13) i2_LCDGoto                                           6     5      1     624
                                              5 COMRAM     6     5      1
                          i2_WaitLCD
                        i2_WriteByte
 ---------------------------------------------------------------------------------
 (15) i2_WriteByte                                         2     1      1     326
                                              3 COMRAM     2     1      1
                      i2_WriteNibble
 ---------------------------------------------------------------------------------
 (16) i2_WriteNibble                                       3     2      1     132
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (15) i2_WaitLCD                                           1     1      0      71
                                              1 COMRAM     1     1      0
                         i2_ReadByte
 ---------------------------------------------------------------------------------
 (16) i2_ReadByte                                          1     1      0      37
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _init_debug
       _LCDClear
         _WaitLCD
           _ReadByte
         _WriteByte
           _WriteNibble
       _LCDGoto
         _WaitLCD
           _ReadByte
         _WriteByte
           _WriteNibble
       _LCDInit
         _WaitLCD
           _ReadByte
         _WriteNibble
       _LCDWriteStr
         _LCDPutChar
           _WaitLCD
             _ReadByte
           _WriteByte
             _WriteNibble
       _show_debug
         _LCDWriteInt
           _LCDGoto
             _WaitLCD
               _ReadByte
             _WriteByte
               _WriteNibble
           _LCDWriteStr
             _LCDPutChar
               _WaitLCD
                 _ReadByte
               _WriteByte
                 _WriteNibble
           ___awdiv
           ___awmod

 _ISR (ROOT)
   _flashlight
   _pedometer
     i2_show_debug
       i2_LCDWriteInt
         i2_LCDGoto
           i2_WaitLCD
             i2_ReadByte
           i2_WriteByte
             i2_WriteNibble
         i2_LCDWriteStr
           i2_LCDPutChar
             i2_WaitLCD
               i2_ReadByte
             i2_WriteByte
               i2_WriteNibble
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
   _searched
     _flashlight
     i2___awdiv
       i2___awmod (ARG)
     i2___awmod
   _synchronize

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      9       9       5        5.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     32      38       1       59.6%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      41      12        0.0%
DATA                 0      0      41       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Jun 01 17:52:18 2017

            __CFG_CP0$ON 000000              __CFG_CP1$ON 000000              __CFG_CP2$ON 000000  
            __CFG_CP3$ON 000000              ?_LCDPutChar 0001                       l84 1894  
            __CFG_CPB$ON 000000              __CFG_CPD$ON 000000             ___awdiv@sign 002B  
   __size_of_WriteNibble 0044                      _ISR 0008       i2LCDWriteInt@value 0010  
           ___awmod@sign 002B                      wreg 000FE8              i2_WriteByte 17F8  
        __end_of_LCDInit 11F4             __CFG_LVP$OFF 000000          __end_of_LCDGoto 16B2  
           ?_LCDWriteInt 0031                     ?_ISR 0001             ?_LCDWriteStr 002C  
                   ISR@i 0024                     l2010 1688                     l2100 1454  
                   l2014 1692                     l2022 1302                     l2104 1462  
                   l2026 133E                     l2050 1236                     l2042 1218  
                   l2060 1256                     l2052 123A                     l2036 1208  
                   l2048 122E                     l2064 1260                     l2080 1410  
                   l2090 1432                     l2068 126E                     l2092 1436  
                   l2084 141C                     l2096 144A                     l2088 142A  
                   l1946 1828                     STR_1 1012                     STR_2 1001  
                   u1130 15FE                     u1220 1338                     u1230 1374  
                   u1227 132E                     u1148 1600                     u1237 136A  
                   _LATD 000F8C                     u1707 1154                     u1717 1166  
                   u1727 17B2                     u1687 1124                     u1697 113E  
                   i2l62 10AC                     i2l81 00A0                     i2l76 0072  
    i2LCDWriteInt@column 0014          i2WriteByte@data 0004             __CFG_WRT0$ON 000000  
           __CFG_WRT1$ON 000000             __CFG_WRT2$ON 000000             __CFG_WRT3$ON 000000  
          __CFG_EBTR0$ON 000000            __CFG_EBTR1$ON 000000            __CFG_EBTR2$ON 000000  
          __CFG_EBTR3$ON 000000             __CFG_WRTB$ON 000000             __CFG_WRTC$ON 000000  
           __CFG_WRTD$ON 000000   __size_ofi2_WriteNibble 0044            __CFG_EBTRB$ON 000000  
                   _main 1890     __end_ofi2_show_debug 187A                     fsr0h 000FEA  
                   fsr1h 000FE2                     indf0 000FEF                     fsr2h 000FDA  
                   fsr0l 000FE9                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 0039            __CFG_BORV$190 000000  
    i2LCDWriteInt@string 0011                     prodh 000FF4                     prodl 000FF3  
                   start 00DC            __CFG_IESO$OFF 000000             ___param_bank 000000  
                  ??_ISR 0015         __end_of_LCDClear 17C2          __end_of_WaitLCD 1836  
     __size_ofi2_LCDGoto 003A                    ?_main 0064          __end_of___awdiv 1278  
        __end_of___awmod 146C          ___awdiv@divisor 0028              _synchronize 1886  
        ___awdiv@counter 002A                    _PORTD 000F83           __CFG_FCMEN$OFF 000000  
       i2WriteNibble@cmd 0003       __CFG_MCLRE$EXTMCLR 000000                    _setup 14DC  
                  _steps 0037                    pclath 000FFA                    tablat 000FF5  
    __size_of_LCDPutChar 0012       __size_ofi2_WaitLCD 0012              ?i2_ReadByte 0001  
                  status 000FD8           __CFG_HFOFST$ON 000000            WaitLCD@status 0027  
     __size_ofi2___awdiv 0084       __size_ofi2___awmod 0070           __CFG_PBADEN$ON 000000  
        __initialization 16EC             __end_of_main 1896         __end_of_ReadByte 174E  
          i2_WriteNibble 1634                   ??_main 0033            __activetblptr 000002  
              ??_LCDInit 0029                ??_LCDGoto 002C      i2LCDWriteStr@string 0007  
       ___awdiv@dividend 0026                   ?_setup 0001            LCDGoto@column 0030  
      __end_ofi2_LCDGoto 16EC                   i2l2000 184C                   i2l2200 149A  
                 i2l2122 16C2                   i2l2202 14A2                   i2l2204 14A6  
                 i2l2212 14C4                   i2l2126 16CC                   i2l2134 1382  
                 i2l2160 12B2                   i2l2216 14D2                   i2l2208 14BA  
                 i2l2138 13BE                   i2l2162 12BA                   i2l2154 129C  
                 i2l2410 0062                   i2l2180 12F2                   i2l2172 12DA  
                 i2l2164 12BE                   i2l2148 128C                   i2l2420 008C  
                 i2l2176 12E4                   i2l2192 1480                   i2l2424 009C  
                 i2l2196 148C                   i2l2380 10BA                   i2l2374 109C  
                 i2l2390 10E4           __CFG_WDTEN$OFF 000000                   i2l2392 1102  
                 i2l2368 1030                   i2l2386 10DE                ??_WaitLCD 0027  
         __CFG_PWRTEN$ON 000000           __CFG_XINST$OFF 000000                ??___awdiv 002A  
         __CFG_STVREN$ON 000000                ??___awmod 002A            ?i2_LCDPutChar 0001  
      i2WriteNibble@data 0001           ?i2_WriteNibble 0001         ___awdiv@quotient 002C  
        ___awmod@divisor 0028          ___awmod@counter 002A        __end_ofi2_WaitLCD 185A  
       __end_of_searched 110C           i2___awdiv@sign 000C      __size_ofi2_ReadByte 0030  
           __pdataCOMRAM 0033        __end_ofi2___awdiv 12FC        __end_ofi2___awmod 14DC  
           __mediumconst 0000                   tblptrh 000FF7             LCDWriteStr@i 0030  
                 tblptrl 000FF6                   tblptru 000FF8           i2___awmod@sign 0006  
  __size_ofi2_show_debug 0010                ?_LCDClear 0001     __size_of_LCDWriteInt 0058  
   __size_of_LCDWriteStr 0080               __accesstop 0060  __end_of__initialization 1710  
     __size_of_WriteByte 001A            ___rparam_used 000001           __pcstackCOMRAM 0001  
         WriteNibble@cmd 0028           ??i2_LCDPutChar 0006             ??_LCDPutChar 002B  
          __end_of_setup 154A   __size_ofi2_LCDWriteInt 004E   __size_ofi2_LCDWriteStr 0080  
           i2_show_debug 186A             ?i2_WriteByte 0004                  ??_setup 0033  
           WriteByte@cmd 002A               ??_LCDClear 002B          __CFG_PLLCFG$OFF 000000  
              ?_ReadByte 0001       __end_of_LCDPutChar 1824             i2LCDGoto@row 0006  
     __size_of_pedometer 000C       __CFG_CCP2MX$PORTC1 000000            i2_LCDGoto$661 0009  
        ??i2_WriteNibble 0002       __CFG_CCP3MX$PORTB5 000000            ??_WriteNibble 0027  
      LCDWriteInt@column 0060        LCDWriteInt@string 0061             ?_synchronize 0001  
      __end_of_WriteByte 17F8                  _LCDInit 110C                  _LCDGoto 1678  
             _flashlight 17C2                  i2u43_40 17CC                  i2u44_48 17CE  
                _PR2bits 000FBB            i2_LCDWriteInt 15A2            i2_LCDWriteStr 137C  
           ??i2_ReadByte 0001               ??_ReadByte 0026                ?_searched 0001  
                __Hparam 0000                  _WaitLCD 1824                  __Lparam 0000  
                ___awdiv 11F4                  ___awmod 13FC               _init_debug 177E  
           __psmallconst 1000                  __pcinit 16EC                  __ramtop 1000  
                __ptext0 1890                  __ptext1 14DC                  __ptext2 177E  
                __ptext3 185A                  __ptext4 154A                  __ptext5 13FC  
                __ptext6 11F4                  __ptext7 12FC                  __ptext8 1812  
                __ptext9 1678             __size_of_ISR 00D4       __end_ofi2_ReadByte 177E  
              _T2CONbits 000FBA      __end_of_WriteNibble 1634         ___awmod@dividend 0026  
      __end_of_pedometer 1886           ?i2_LCDWriteInt 000F           i2LCDWriteStr@i 000B  
         ?i2_LCDWriteStr 0007     end_of_initialization 1710     __end_ofi2_LCDPutChar 1848  
          __Lmediumconst 0000                i2_LCDGoto 16B2               ??_searched 000F  
      LCDWriteStr@string 002C                  postdec1 000FE5                  postinc0 000FEE  
       i2LCDPutChar@data 0006               _show_debug 185A         __CFG_FOSC$INTIO7 000000  
              i2_WaitLCD 1848                _TRISBbits 000F93                _TRISCbits 000F94  
              _TRISDbits 000F95              ?_flashlight 0001                i2___awdiv 1278  
              i2___awmod 146C     __size_ofi2_WriteByte 001A              _CCP1CONbits 000FBD  
             LCDGoto@row 002B           i2WriteByte@cmd 0005        __size_of_LCDClear 0020  
     i2___awdiv@dividend 0007               ?i2_LCDGoto 0006          WriteNibble@data 0026  
            ?_init_debug 0001          i2WaitLCD@status 0002              _WriteNibble 15F0  
          __pidataCOMRAM 1896      start_initialization 16EC               ?i2_WaitLCD 0001  
     i2___awdiv@quotient 000D              __end_of_ISR 00DC     __size_of_synchronize 000A  
        ??i2_LCDWriteInt 0011          ??i2_LCDWriteStr 0009            ??_LCDWriteInt 0033  
          ??_LCDWriteStr 002E               ?i2___awdiv 0007               ?i2___awmod 0001  
      __size_of_ReadByte 0030          i2LCDGoto@column 000B      __size_of_flashlight 001C  
            ?_show_debug 0001                 ?_LCDInit 0001                 ?_LCDGoto 002B  
          WriteByte@data 0029              __pbssCOMRAM 0037    __size_ofi2_LCDPutChar 0012  
          __pcstackBANK0 0060                _WriteByte 17DE           LCDPutChar@data 002B  
    __size_of_init_debug 0024      __end_of_LCDWriteInt 15A2      __end_of_LCDWriteStr 137C  
           searched@time 0011              ??i2_LCDGoto 0007                 ?_WaitLCD 0001  
      __size_of_searched 00EE                __pintcode 0008                 ?___awdiv 0026  
               ?___awmod 0026         LCDWriteInt@value 0032    __end_ofi2_WriteNibble 1678  
           i2_LCDPutChar 1836         __CFG_PRICLKEN$ON 000000              __smallconst 1000  
            ??i2_WaitLCD 0002               ?_WriteByte 0029              ??i2___awdiv 000B  
            ??i2___awmod 0005           __size_of_setup 006E         i2ReadByte@status 0001  
              _pedometer 187A                 _LCDClear 17A2                 _LATBbits 000F8A  
               _LATCbits 000F8B                 _LATDbits 000F8C      __size_of_show_debug 0010  
            _LCDGoto$661 002E                 i2u116_40 1642                 i2u140_40 13B8  
               i2u140_47 13AE                 i2u141_40 13F4                 i2u141_47 13EA  
               i2u117_48 1644                 i2u157_40 10DA                 i2u173_47 007C  
               i2u174_47 10C0         __CFG_WDTPS$32768 000000         i2LCDWriteInt@row 000F  
       __size_of_LCDInit 00E8         __size_of_LCDGoto 003A        i2___awdiv@divisor 0009  
           ??_flashlight 0001        i2___awdiv@counter 000B              _LCDWriteInt 154A  
            _LCDWriteStr 12FC              _INTCON2bits 000FF1              _INTCON3bits 000FF0  
              copy_data0 1700       i2___awmod@dividend 0001               ?_pedometer 0001  
               _ReadByte 171E               _CCPR1Lbits 000FBE                 __Hrparam 0000  
               __Lrparam 0000       __CFG_BOREN$SBORDIS 000000         __size_of_WaitLCD 0012  
      __CFG_P2BMX$PORTD2 000000       __end_of_flashlight 17DE             ??_init_debug 0033  
       __size_of___awdiv 0084             ?_WriteNibble 0026         __size_of___awmod 0070  
          ?i2_show_debug 0001               _ANSELBbits 000F39                searched@i 0013  
          ??i2_WriteByte 0005              ??_WriteByte 002A                 __ptext10 110C  
               __ptext11 17A2                 __ptext20 187A                 __ptext12 17DE  
               __ptext21 186A                 __ptext13 15F0                 __ptext30 1848  
               __ptext22 15A2                 __ptext14 1824                 __ptext31 174E  
               __ptext23 146C                 __ptext15 171E                 __ptext24 1278  
               __ptext25 137C                 __ptext17 1886                 __ptext26 1836  
               __ptext18 101E                 __ptext27 16B2                 __ptext19 17C2  
               __ptext28 17F8                 __ptext29 1634           _kiwi_frequence 0033  
     __end_of_init_debug 17A2            __size_of_main 0006              _kiwi_length 0036  
               _searched 101E           ReadByte@status 0026                 int$flags 0039  
             _LCDPutChar 1812                 main@argc 0064                 main@argv 0066  
         ??i2_show_debug 0015             ??_show_debug 0033            ??_synchronize 0001  
      i2___awmod@divisor 0003        i2___awmod@counter 0005               _INTCONbits 000FF2  
  __end_ofi2_LCDWriteInt 15F0    __end_ofi2_LCDWriteStr 13FC                 intlevel2 0000  
            ??_pedometer 0015           LCDWriteInt@row 0031      __end_ofi2_WriteByte 1812  
     __end_of_show_debug 186A        __CFG_T3CMX$PORTC0 000000      __end_of_synchronize 1890  
             i2_ReadByte 174E  
