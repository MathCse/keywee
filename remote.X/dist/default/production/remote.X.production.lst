

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed May 31 21:23:09 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           ; Version 1.42
    49                           ; Generated 13/04/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F46K22 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	idataCOMRAM
    84  0018A2                     __pidataCOMRAM:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _kiwi_frequence
    88  0018A2  1A                 	db	26
    89  0018A3  1A                 	db	26
    90  0018A4  1A                 	db	26
    91  0018A5  15                 	db	21
    92  0018A6  1A                 	db	26
    93  0018A7  1F                 	db	31
    94  0018A8  1F                 	db	31
    95                           
    96                           ;initializer for _kiwi_length
    97  0018A9  07                 	db	7
    98  0000                     _ANSELBbits	set	3897
    99  0000                     _LATD	set	3980
   100  0000                     _PORTD	set	3971
   101  0000                     _LATDbits	set	3980
   102  0000                     _TRISDbits	set	3989
   103  0000                     _PR2bits	set	4027
   104  0000                     _CCPR1Lbits	set	4030
   105  0000                     _CCP1CONbits	set	4029
   106  0000                     _T2CONbits	set	4026
   107  0000                     _LATCbits	set	3979
   108  0000                     _TRISCbits	set	3988
   109  0000                     _INTCON3bits	set	4080
   110  0000                     _LATBbits	set	3978
   111  0000                     _TRISBbits	set	3987
   112  0000                     _INTCONbits	set	4082
   113  0000                     _INTCON2bits	set	4081
   114                           
   115                           	psect	smallconst
   116  001000                     __psmallconst:
   117                           	opt stack 0
   118  001000  00                 	db	0
   119  001001  30                 	db	48	;'0'
   120  001002  31                 	db	49	;'1'
   121  001003  32                 	db	50	;'2'
   122  001004  33                 	db	51	;'3'
   123  001005  34                 	db	52	;'4'
   124  001006  35                 	db	53	;'5'
   125  001007  36                 	db	54	;'6'
   126  001008  37                 	db	55	;'7'
   127  001009  38                 	db	56	;'8'
   128  00100A  39                 	db	57	;'9'
   129  00100B  41                 	db	65	;'A'
   130  00100C  42                 	db	66	;'B'
   131  00100D  43                 	db	67	;'C'
   132  00100E  44                 	db	68	;'D'
   133  00100F  45                 	db	69	;'E'
   134  001010  46                 	db	70	;'F'
   135  001011  00                 	db	0
   136  001012                     STR_1:
   137  001012  4E                 	db	78	;'N'
   138  001013  6F                 	db	111	;'o'
   139  001014  6D                 	db	109	;'m'
   140  001015  62                 	db	98	;'b'
   141  001016  72                 	db	114	;'r'
   142  001017  65                 	db	101	;'e'
   143  001018  20                 	db	32
   144  001019  70                 	db	112	;'p'
   145  00101A  61                 	db	97	;'a'
   146  00101B  73                 	db	115	;'s'
   147  00101C  00                 	db	0
   148                           
   149                           ; #config settings
   150  00101D  00                 	db	0	; dummy byte at the end
   151  0000                     
   152                           	psect	cinit
   153  0016FC                     __pcinit:
   154                           	opt stack 0
   155  0016FC                     start_initialization:
   156                           	opt stack 0
   157  0016FC                     __initialization:
   158                           	opt stack 0
   159                           
   160                           ; Initialize objects allocated to COMRAM (8 bytes)
   161                           ; load TBLPTR registers with __pidataCOMRAM
   162  0016FC  0EA2               	movlw	low __pidataCOMRAM
   163  0016FE  6EF6               	movwf	tblptrl,c
   164  001700  0E18               	movlw	high __pidataCOMRAM
   165  001702  6EF7               	movwf	tblptrh,c
   166  001704  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   167  001706  6EF8               	movwf	tblptru,c
   168  001708  EE00  F030         	lfsr	0,__pdataCOMRAM
   169  00170C  EE10 F008          	lfsr	1,8
   170  001710                     copy_data0:
   171  001710  0009               	tblrd		*+
   172  001712  CFF5 FFEE          	movff	tablat,postinc0
   173  001716  50E5               	movf	postdec1,w,c
   174  001718  50E1               	movf	fsr1l,w,c
   175  00171A  E1FA               	bnz	copy_data0
   176                           
   177                           ; Clear objects allocated to COMRAM (2 bytes)
   178  00171C  6A39               	clrf	(__pbssCOMRAM+1)& (0+255),c
   179  00171E  6A38               	clrf	__pbssCOMRAM& (0+255),c
   180  001720                     end_of_initialization:
   181                           	opt stack 0
   182  001720                     __end_of__initialization:
   183                           	opt stack 0
   184  001720  903A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   185  001722  923A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   186  001724  0E00               	movlw	low (__Lmediumconst shr (0+16))
   187  001726  6EF8               	movwf	tblptru,c
   188  001728  0100               	movlb	0
   189  00172A  EF55  F00C         	goto	_main	;jump to C main() function
   190                           tblptru	equ	0xFF8
   191                           tblptrh	equ	0xFF7
   192                           tblptrl	equ	0xFF6
   193                           tablat	equ	0xFF5
   194                           postinc0	equ	0xFEE
   195                           postdec1	equ	0xFE5
   196                           fsr1l	equ	0xFE1
   197                           
   198                           	psect	bssCOMRAM
   199  000038                     __pbssCOMRAM:
   200                           	opt stack 0
   201  000038                     _steps:
   202                           	opt stack 0
   203  000038                     	ds	2
   204                           tblptru	equ	0xFF8
   205                           tblptrh	equ	0xFF7
   206                           tblptrl	equ	0xFF6
   207                           tablat	equ	0xFF5
   208                           postinc0	equ	0xFEE
   209                           postdec1	equ	0xFE5
   210                           fsr1l	equ	0xFE1
   211                           
   212                           	psect	dataCOMRAM
   213  000030                     __pdataCOMRAM:
   214                           	opt stack 0
   215  000030                     _kiwi_frequence:
   216                           	opt stack 0
   217  000030                     	ds	7
   218  000037                     _kiwi_length:
   219                           	opt stack 0
   220  000037                     	ds	1
   221                           tblptru	equ	0xFF8
   222                           tblptrh	equ	0xFF7
   223                           tblptrl	equ	0xFF6
   224                           tablat	equ	0xFF5
   225                           postinc0	equ	0xFEE
   226                           postdec1	equ	0xFE5
   227                           fsr1l	equ	0xFE1
   228                           
   229                           	psect	cstackBANK0
   230  000060                     __pcstackBANK0:
   231                           	opt stack 0
   232  000060                     LCDWriteStr@i:
   233                           	opt stack 0
   234  000060                     _LCDGoto$669:
   235                           	opt stack 0
   236                           
   237                           ; 2 bytes @ 0x0
   238  000060                     	ds	2
   239  000062                     LCDGoto@column:
   240                           	opt stack 0
   241                           
   242                           ; 1 bytes @ 0x2
   243  000062                     	ds	1
   244  000063                     LCDWriteInt@row:
   245                           	opt stack 0
   246                           
   247                           ; 1 bytes @ 0x3
   248  000063                     	ds	1
   249  000064                     LCDWriteInt@value:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x4
   253  000064                     	ds	1
   254  000065                     LCDWriteInt@column:
   255                           	opt stack 0
   256                           
   257                           ; 1 bytes @ 0x5
   258  000065                     	ds	1
   259  000066                     LCDWriteInt@string:
   260                           	opt stack 0
   261                           
   262                           ; 3 bytes @ 0x6
   263  000066                     	ds	3
   264  000069                     
   265                           ; 2 bytes @ 0x9
   266  000069                     	ds	2
   267  00006B                     
   268                           ; 3 bytes @ 0xB
   269  00006B                     	ds	3
   270                           tblptru	equ	0xFF8
   271                           tblptrh	equ	0xFF7
   272                           tblptrl	equ	0xFF6
   273                           tablat	equ	0xFF5
   274                           postinc0	equ	0xFEE
   275                           postdec1	equ	0xFE5
   276                           fsr1l	equ	0xFE1
   277                           
   278                           	psect	cstackCOMRAM
   279  000001                     __pcstackCOMRAM:
   280                           	opt stack 0
   281  000001                     ??_flashlight:
   282  000001                     ?i2___awmod:
   283                           	opt stack 0
   284  000001                     i2ReadByte@status:
   285                           	opt stack 0
   286  000001                     i2WriteNibble@data:
   287                           	opt stack 0
   288  000001                     i2___awmod@dividend:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x0
   292  000001                     	ds	1
   293  000002                     ??i2_WriteNibble:
   294  000002                     i2WaitLCD@status:
   295                           	opt stack 0
   296                           
   297                           ; 1 bytes @ 0x1
   298  000002                     	ds	1
   299  000003                     i2WriteNibble@cmd:
   300                           	opt stack 0
   301  000003                     i2___awmod@divisor:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0x2
   305  000003                     	ds	1
   306  000004                     i2WriteByte@data:
   307                           	opt stack 0
   308                           
   309                           ; 1 bytes @ 0x3
   310  000004                     	ds	1
   311  000005                     i2WriteByte@cmd:
   312                           	opt stack 0
   313  000005                     i2___awmod@counter:
   314                           	opt stack 0
   315                           
   316                           ; 1 bytes @ 0x4
   317  000005                     	ds	1
   318  000006                     i2LCDGoto@row:
   319                           	opt stack 0
   320  000006                     i2LCDPutChar@data:
   321                           	opt stack 0
   322  000006                     i2___awmod@sign:
   323                           	opt stack 0
   324                           
   325                           ; 1 bytes @ 0x5
   326  000006                     	ds	1
   327  000007                     ??i2_LCDGoto:
   328  000007                     ?i2___awdiv:
   329                           	opt stack 0
   330  000007                     i2LCDWriteStr@string:
   331                           	opt stack 0
   332  000007                     i2___awdiv@dividend:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x6
   336  000007                     	ds	2
   337  000009                     ??i2_LCDWriteStr:
   338  000009                     i2_LCDGoto$669:
   339                           	opt stack 0
   340  000009                     i2___awdiv@divisor:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x8
   344  000009                     	ds	2
   345  00000B                     i2LCDGoto@column:
   346                           	opt stack 0
   347  00000B                     i2LCDWriteStr@i:
   348                           	opt stack 0
   349  00000B                     i2___awdiv@counter:
   350                           	opt stack 0
   351                           
   352                           ; 1 bytes @ 0xA
   353  00000B                     	ds	1
   354  00000C                     i2___awdiv@sign:
   355                           	opt stack 0
   356                           
   357                           ; 1 bytes @ 0xB
   358  00000C                     	ds	1
   359  00000D                     i2___awdiv@quotient:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0xC
   363  00000D                     	ds	2
   364  00000F                     ??_searched:
   365  00000F                     i2LCDWriteInt@row:
   366                           	opt stack 0
   367                           
   368                           ; 1 bytes @ 0xE
   369  00000F                     	ds	1
   370  000010                     i2LCDWriteInt@value:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0xF
   374  000010                     	ds	1
   375  000011                     searched@time:
   376                           	opt stack 0
   377  000011                     i2LCDWriteInt@string:
   378                           	opt stack 0
   379                           
   380                           ; 3 bytes @ 0x10
   381  000011                     	ds	2
   382  000013                     searched@i:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x12
   386  000013                     	ds	1
   387  000014                     i2LCDWriteInt@column:
   388                           	opt stack 0
   389                           
   390                           ; 1 bytes @ 0x13
   391  000014                     	ds	1
   392  000015                     ??_ISR:
   393  000015                     
   394                           ; 1 bytes @ 0x14
   395  000015                     	ds	15
   396  000024                     ISR@i:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x23
   400  000024                     	ds	2
   401  000026                     ?___awdiv:
   402                           	opt stack 0
   403  000026                     ?___awmod:
   404                           	opt stack 0
   405  000026                     ReadByte@status:
   406                           	opt stack 0
   407  000026                     WriteNibble@data:
   408                           	opt stack 0
   409  000026                     ___awdiv@dividend:
   410                           	opt stack 0
   411  000026                     ___awmod@dividend:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0x25
   415  000026                     	ds	1
   416  000027                     ??_WriteNibble:
   417  000027                     WaitLCD@status:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0x26
   421  000027                     	ds	1
   422  000028                     WriteNibble@cmd:
   423                           	opt stack 0
   424  000028                     ___awdiv@divisor:
   425                           	opt stack 0
   426  000028                     ___awmod@divisor:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x27
   430  000028                     	ds	1
   431  000029                     ??_LCDInit:
   432  000029                     WriteByte@data:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x28
   436  000029                     	ds	1
   437  00002A                     WriteByte@cmd:
   438                           	opt stack 0
   439  00002A                     ___awdiv@counter:
   440                           	opt stack 0
   441  00002A                     ___awmod@counter:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x29
   445  00002A                     	ds	1
   446  00002B                     ??_LCDClear:
   447  00002B                     LCDGoto@row:
   448                           	opt stack 0
   449  00002B                     LCDPutChar@data:
   450                           	opt stack 0
   451  00002B                     ___awdiv@sign:
   452                           	opt stack 0
   453  00002B                     ___awmod@sign:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x2A
   457  00002B                     	ds	1
   458  00002C                     ??_LCDGoto:
   459  00002C                     LCDWriteStr@string:
   460                           	opt stack 0
   461  00002C                     ___awdiv@quotient:
   462                           	opt stack 0
   463                           
   464                           ; 2 bytes @ 0x2B
   465  00002C                     	ds	2
   466  00002E                     ??_LCDWriteStr:
   467                           
   468                           ; 1 bytes @ 0x2D
   469  00002E                     	ds	2
   470  000030                     tblptru	equ	0xFF8
   471                           tblptrh	equ	0xFF7
   472                           tblptrl	equ	0xFF6
   473                           tablat	equ	0xFF5
   474                           postinc0	equ	0xFEE
   475                           postdec1	equ	0xFE5
   476                           fsr1l	equ	0xFE1
   477                           
   478                           ; 1 bytes @ 0x2F
   479 ;;
   480 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   481 ;;
   482 ;; *************** function _main *****************
   483 ;; Defined at:
   484 ;;		line 230 in file "main.c"
   485 ;; Parameters:    Size  Location     Type
   486 ;;  argc            2    9[BANK0 ] int 
   487 ;;  argv            3   11[BANK0 ] PTR PTR unsigned char 
   488 ;; Auto vars:     Size  Location     Type
   489 ;;		None
   490 ;; Return value:  Size  Location     Type
   491 ;;                  2    9[BANK0 ] int 
   492 ;; Registers used:
   493 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   494 ;; Tracked objects:
   495 ;;		On entry : 0/0
   496 ;;		On exit  : 0/0
   497 ;;		Unchanged: 0/0
   498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   499 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   502 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   503 ;;Total ram usage:        5 bytes
   504 ;; Hardware stack levels required when called:   16
   505 ;; This function calls:
   506 ;;		_setup
   507 ;; This function is called by:
   508 ;;		Startup code after reset
   509 ;; This function uses a non-reentrant model
   510 ;;
   511                           
   512                           	psect	text0
   513  0018AA                     __ptext0:
   514                           	opt stack 0
   515  0018AA                     _main:
   516                           	opt stack 15
   517                           
   518                           ;main.c: 232: setup();
   519                           
   520                           ;incstack = 0
   521  0018AA  EC72  F00A         	call	_setup	;wreg free
   522  0018AE                     l88:
   523  0018AE  D7FF               	goto	l88
   524  0018B0                     __end_of_main:
   525                           	opt stack 0
   526                           tblptru	equ	0xFF8
   527                           tblptrh	equ	0xFF7
   528                           tblptrl	equ	0xFF6
   529                           tablat	equ	0xFF5
   530                           postinc0	equ	0xFEE
   531                           postdec1	equ	0xFE5
   532                           fsr1l	equ	0xFE1
   533                           
   534 ;; *************** function _setup *****************
   535 ;; Defined at:
   536 ;;		line 90 in file "main.c"
   537 ;; Parameters:    Size  Location     Type
   538 ;;		None
   539 ;; Auto vars:     Size  Location     Type
   540 ;;		None
   541 ;; Return value:  Size  Location     Type
   542 ;;                  1    wreg      void 
   543 ;; Registers used:
   544 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   545 ;; Tracked objects:
   546 ;;		On entry : 0/0
   547 ;;		On exit  : 0/0
   548 ;;		Unchanged: 0/0
   549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   554 ;;Total ram usage:        0 bytes
   555 ;; Hardware stack levels used:    1
   556 ;; Hardware stack levels required when called:   15
   557 ;; This function calls:
   558 ;;		_init_debug
   559 ;; This function is called by:
   560 ;;		_main
   561 ;; This function uses a non-reentrant model
   562 ;;
   563                           
   564                           	psect	text1
   565  0014E4                     __ptext1:
   566                           	opt stack 0
   567  0014E4                     _setup:
   568                           	opt stack 15
   569                           
   570                           ;main.c: 92: init_debug();
   571                           
   572                           ;incstack = 0
   573  0014E4  ECC7  F00B         	call	_init_debug	;wreg free
   574                           
   575                           ;main.c: 95: INTCON2bits.INTEDG0 = 1;
   576  0014E8  8CF1               	bsf	intcon2,6,c	;volatile
   577                           
   578                           ;main.c: 96: INTCONbits.INT0IF = 0 ;
   579  0014EA  92F2               	bcf	intcon,1,c	;volatile
   580                           
   581                           ;main.c: 97: TRISBbits.TRISB0 = 0;
   582  0014EC  9093               	bcf	3987,0,c	;volatile
   583                           
   584                           ;main.c: 98: LATBbits.LATB0 = 0;
   585  0014EE  908A               	bcf	3978,0,c	;volatile
   586                           
   587                           ;main.c: 99: TRISBbits.TRISB0 = 1;
   588  0014F0  8093               	bsf	3987,0,c	;volatile
   589                           
   590                           ;main.c: 100: ANSELBbits.ANSB0 = 0;
   591  0014F2  010F               	movlb	15	; () banked
   592  0014F4  9139               	bcf	57,0,b	;volatile
   593                           
   594                           ; BSR set to: 15
   595                           ;main.c: 101: INTCONbits.INT0E = 1 ;
   596  0014F6  88F2               	bsf	intcon,4,c	;volatile
   597                           
   598                           ; BSR set to: 15
   599                           ;main.c: 104: INTCON2bits.INTEDG1 = 1;
   600  0014F8  8AF1               	bsf	intcon2,5,c	;volatile
   601                           
   602                           ; BSR set to: 15
   603                           ;main.c: 105: INTCON3bits.INT1IF = 0 ;
   604  0014FA  90F0               	bcf	intcon3,0,c	;volatile
   605                           
   606                           ; BSR set to: 15
   607                           ;main.c: 106: TRISBbits.TRISB1 = 0;
   608  0014FC  9293               	bcf	3987,1,c	;volatile
   609                           
   610                           ; BSR set to: 15
   611                           ;main.c: 107: LATBbits.LATB1 = 0;
   612  0014FE  928A               	bcf	3978,1,c	;volatile
   613                           
   614                           ; BSR set to: 15
   615                           ;main.c: 108: TRISBbits.TRISB1 = 1;
   616  001500  8293               	bsf	3987,1,c	;volatile
   617                           
   618                           ; BSR set to: 15
   619                           ;main.c: 109: ANSELBbits.ANSB1 = 0;
   620  001502  010F               	movlb	15	; () banked
   621  001504  9339               	bcf	57,1,b	;volatile
   622                           
   623                           ; BSR set to: 15
   624                           ;main.c: 110: INTCON3bits.INT1E = 1 ;
   625  001506  86F0               	bsf	intcon3,3,c	;volatile
   626                           
   627                           ; BSR set to: 15
   628                           ;main.c: 113: INTCON2bits.INTEDG2 = 1;
   629  001508  88F1               	bsf	intcon2,4,c	;volatile
   630                           
   631                           ; BSR set to: 15
   632                           ;main.c: 114: INTCON3bits.INT2IF = 0 ;
   633  00150A  92F0               	bcf	intcon3,1,c	;volatile
   634                           
   635                           ; BSR set to: 15
   636                           ;main.c: 115: TRISBbits.TRISB2 = 0;
   637  00150C  9493               	bcf	3987,2,c	;volatile
   638                           
   639                           ; BSR set to: 15
   640                           ;main.c: 116: LATBbits.LATB2 = 0;
   641  00150E  948A               	bcf	3978,2,c	;volatile
   642                           
   643                           ; BSR set to: 15
   644                           ;main.c: 117: TRISBbits.TRISB2 = 1;
   645  001510  8493               	bsf	3987,2,c	;volatile
   646                           
   647                           ; BSR set to: 15
   648                           ;main.c: 118: ANSELBbits.ANSB2 = 0;
   649  001512  010F               	movlb	15	; () banked
   650  001514  9539               	bcf	57,2,b	;volatile
   651                           
   652                           ; BSR set to: 15
   653                           ;main.c: 119: INTCON3bits.INT2E = 1 ;
   654  001516  88F0               	bsf	intcon3,4,c	;volatile
   655                           
   656                           ; BSR set to: 15
   657                           ;main.c: 122: TRISCbits.RC1 = 0 ;
   658  001518  9294               	bcf	3988,1,c	;volatile
   659                           
   660                           ; BSR set to: 15
   661                           ;main.c: 123: LATCbits.LATC1 = 0 ;
   662  00151A  928B               	bcf	3979,1,c	;volatile
   663                           
   664                           ; BSR set to: 15
   665                           ;main.c: 126: T2CONbits.T2OUTPS = 0 ;
   666  00151C  96BA               	bcf	4026,3,c	;volatile
   667  00151E  98BA               	bcf	4026,4,c	;volatile
   668  001520  9ABA               	bcf	4026,5,c	;volatile
   669  001522  9CBA               	bcf	4026,6,c	;volatile
   670                           
   671                           ; BSR set to: 15
   672                           ;main.c: 127: T2CONbits.T2CKPS = 0b10 ;
   673  001524  50BA               	movf	4026,w,c	;volatile
   674  001526  0BFC               	andlw	-4
   675  001528  0902               	iorlw	2
   676  00152A  6EBA               	movwf	4026,c	;volatile
   677                           
   678                           ; BSR set to: 15
   679                           ;main.c: 128: T2CONbits.TMR2ON = 1 ;
   680  00152C  84BA               	bsf	4026,2,c	;volatile
   681                           
   682                           ; BSR set to: 15
   683                           ;main.c: 131: TRISCbits.RC2 = 0;
   684  00152E  9494               	bcf	3988,2,c	;volatile
   685                           
   686                           ; BSR set to: 15
   687                           ;main.c: 132: CCP1CONbits.P1M = 0 ;
   688  001530  0E3F               	movlw	-193
   689  001532  16BD               	andwf	4029,f,c	;volatile
   690                           
   691                           ; BSR set to: 15
   692                           ;main.c: 133: CCP1CONbits.DC1B = 0 ;
   693  001534  0ECF               	movlw	-49
   694  001536  16BD               	andwf	4029,f,c	;volatile
   695                           
   696                           ; BSR set to: 15
   697                           ;main.c: 134: CCP1CONbits.CCP1M = 0b1100 ;
   698  001538  50BD               	movf	4029,w,c	;volatile
   699  00153A  0BF0               	andlw	-16
   700  00153C  090C               	iorlw	12
   701  00153E  6EBD               	movwf	4029,c	;volatile
   702                           
   703                           ; BSR set to: 15
   704                           ;main.c: 135: CCPR1Lbits.CCPR1L = 0 ;
   705  001540  0E00               	movlw	0
   706  001542  6EBE               	movwf	4030,c	;volatile
   707                           
   708                           ; BSR set to: 15
   709                           ;main.c: 138: INTCONbits.PEIE = 1;
   710  001544  8CF2               	bsf	intcon,6,c	;volatile
   711                           
   712                           ; BSR set to: 15
   713                           ;main.c: 139: INTCONbits.GIE = 1 ;
   714  001546  8EF2               	bsf	intcon,7,c	;volatile
   715                           
   716                           ; BSR set to: 15
   717                           ;main.c: 142: steps = 0;
   718  001548  0E00               	movlw	0
   719  00154A  6E39               	movwf	_steps+1,c
   720  00154C  0E00               	movlw	0
   721  00154E  6E38               	movwf	_steps,c
   722                           
   723                           ; BSR set to: 15
   724  001550  0012               	return		;funcret
   725  001552                     __end_of_setup:
   726                           	opt stack 0
   727                           tblptru	equ	0xFF8
   728                           tblptrh	equ	0xFF7
   729                           tblptrl	equ	0xFF6
   730                           tablat	equ	0xFF5
   731                           intcon	equ	0xFF2
   732                           intcon2	equ	0xFF1
   733                           intcon3	equ	0xFF0
   734                           postinc0	equ	0xFEE
   735                           postdec1	equ	0xFE5
   736                           fsr1l	equ	0xFE1
   737                           
   738 ;; *************** function _init_debug *****************
   739 ;; Defined at:
   740 ;;		line 81 in file "main.c"
   741 ;; Parameters:    Size  Location     Type
   742 ;;		None
   743 ;; Auto vars:     Size  Location     Type
   744 ;;		None
   745 ;; Return value:  Size  Location     Type
   746 ;;                  1    wreg      void 
   747 ;; Registers used:
   748 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   749 ;; Tracked objects:
   750 ;;		On entry : 0/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   758 ;;Total ram usage:        0 bytes
   759 ;; Hardware stack levels used:    1
   760 ;; Hardware stack levels required when called:   14
   761 ;; This function calls:
   762 ;;		_LCDClear
   763 ;;		_LCDGoto
   764 ;;		_LCDInit
   765 ;;		_LCDWriteStr
   766 ;;		_show_debug
   767 ;; This function is called by:
   768 ;;		_setup
   769 ;; This function uses a non-reentrant model
   770 ;;
   771                           
   772                           	psect	text2
   773  00178E                     __ptext2:
   774                           	opt stack 0
   775  00178E                     _init_debug:
   776                           	opt stack 15
   777                           
   778                           ;main.c: 82: LCDInit();
   779                           
   780                           ; BSR set to: 15
   781                           ;incstack = 0
   782  00178E  EC86  F008         	call	_LCDInit	;wreg free
   783                           
   784                           ;main.c: 83: LCDClear();
   785  001792  ECD9  F00B         	call	_LCDClear	;wreg free
   786                           
   787                           ;main.c: 84: LCDGoto(0, 0);
   788  001796  0E00               	movlw	0
   789  001798  6E2B               	movwf	LCDGoto@row,c
   790  00179A  0E00               	movlw	0
   791  00179C  EC40  F00B         	call	_LCDGoto
   792                           
   793                           ;main.c: 85: LCDWriteStr("Nombre pas");
   794  0017A0  0E12               	movlw	low STR_1
   795  0017A2  6E2C               	movwf	LCDWriteStr@string,c
   796  0017A4  0E10               	movlw	high STR_1
   797  0017A6  6E2D               	movwf	LCDWriteStr@string+1,c
   798  0017A8  ECFA  F008         	call	_LCDWriteStr	;wreg free
   799                           
   800                           ;main.c: 86: show_debug();
   801  0017AC  EC11  F00C         	call	_show_debug	;wreg free
   802  0017B0  0012               	return		;funcret
   803  0017B2                     __end_of_init_debug:
   804                           	opt stack 0
   805                           tblptru	equ	0xFF8
   806                           tblptrh	equ	0xFF7
   807                           tblptrl	equ	0xFF6
   808                           tablat	equ	0xFF5
   809                           intcon	equ	0xFF2
   810                           intcon2	equ	0xFF1
   811                           intcon3	equ	0xFF0
   812                           postinc0	equ	0xFEE
   813                           postdec1	equ	0xFE5
   814                           fsr1l	equ	0xFE1
   815                           
   816 ;; *************** function _show_debug *****************
   817 ;; Defined at:
   818 ;;		line 76 in file "main.c"
   819 ;; Parameters:    Size  Location     Type
   820 ;;		None
   821 ;; Auto vars:     Size  Location     Type
   822 ;;		None
   823 ;; Return value:  Size  Location     Type
   824 ;;                  1    wreg      void 
   825 ;; Registers used:
   826 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   827 ;; Tracked objects:
   828 ;;		On entry : 0/0
   829 ;;		On exit  : 0/0
   830 ;;		Unchanged: 0/0
   831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   836 ;;Total ram usage:        0 bytes
   837 ;; Hardware stack levels used:    1
   838 ;; Hardware stack levels required when called:   13
   839 ;; This function calls:
   840 ;;		_LCDWriteInt
   841 ;; This function is called by:
   842 ;;		_init_debug
   843 ;; This function uses a non-reentrant model
   844 ;;
   845                           
   846                           	psect	text3
   847  001822                     __ptext3:
   848                           	opt stack 0
   849  001822                     _show_debug:
   850                           	opt stack 15
   851                           
   852                           ;main.c: 77: LCDWriteInt(0, 1, steps);
   853                           
   854                           ;incstack = 0
   855  001822  0E01               	movlw	1
   856  001824  0100               	movlb	0	; () banked
   857  001826  6F63               	movwf	LCDWriteInt@row& (0+255),b
   858  001828  C038  F064         	movff	_steps,LCDWriteInt@value
   859  00182C  0E00               	movlw	0
   860  00182E  ECA9  F00A         	call	_LCDWriteInt
   861  001832  0012               	return		;funcret
   862  001834                     __end_of_show_debug:
   863                           	opt stack 0
   864                           tblptru	equ	0xFF8
   865                           tblptrh	equ	0xFF7
   866                           tblptrl	equ	0xFF6
   867                           tablat	equ	0xFF5
   868                           intcon	equ	0xFF2
   869                           intcon2	equ	0xFF1
   870                           intcon3	equ	0xFF0
   871                           postinc0	equ	0xFEE
   872                           postdec1	equ	0xFE5
   873                           fsr1l	equ	0xFE1
   874                           
   875 ;; *************** function _LCDWriteInt *****************
   876 ;; Defined at:
   877 ;;		line 229 in file "lcd.c"
   878 ;; Parameters:    Size  Location     Type
   879 ;;  column          1    wreg     unsigned char 
   880 ;;  row             1    3[BANK0 ] unsigned char 
   881 ;;  value           1    4[BANK0 ] unsigned char 
   882 ;; Auto vars:     Size  Location     Type
   883 ;;  column          1    5[BANK0 ] unsigned char 
   884 ;;  string          3    6[BANK0 ] unsigned char [3]
   885 ;; Return value:  Size  Location     Type
   886 ;;                  1    wreg      void 
   887 ;; Registers used:
   888 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   889 ;; Tracked objects:
   890 ;;		On entry : 0/0
   891 ;;		On exit  : 0/0
   892 ;;		Unchanged: 0/0
   893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   894 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   895 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   897 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   898 ;;Total ram usage:        6 bytes
   899 ;; Hardware stack levels used:    1
   900 ;; Hardware stack levels required when called:   12
   901 ;; This function calls:
   902 ;;		_LCDGoto
   903 ;;		_LCDWriteStr
   904 ;;		___awdiv
   905 ;;		___awmod
   906 ;; This function is called by:
   907 ;;		_show_debug
   908 ;; This function uses a non-reentrant model
   909 ;;
   910                           
   911                           	psect	text4
   912  001552                     __ptext4:
   913                           	opt stack 0
   914  001552                     _LCDWriteInt:
   915                           	opt stack 15
   916                           
   917                           ;incstack = 0
   918                           ;LCDWriteInt@column stored from wreg
   919  001552  0100               	movlb	0	; () banked
   920  001554  6F65               	movwf	LCDWriteInt@column& (0+255),b
   921                           
   922                           ;lcd.c: 230: char string[3];
   923                           ;lcd.c: 232: string[0] = value / 10 + '0';
   924  001556  C064  F026         	movff	LCDWriteInt@value,___awdiv@dividend
   925  00155A  6A27               	clrf	___awdiv@dividend+1,c
   926  00155C  0E00               	movlw	0
   927  00155E  6E29               	movwf	___awdiv@divisor+1,c
   928  001560  0E0A               	movlw	10
   929  001562  6E28               	movwf	___awdiv@divisor,c
   930  001564  EC3E  F009         	call	___awdiv	;wreg free
   931  001568  5026               	movf	?___awdiv,w,c
   932  00156A  0F30               	addlw	48
   933  00156C  0100               	movlb	0	; () banked
   934  00156E  6F66               	movwf	LCDWriteInt@string& (0+255),b
   935                           
   936                           ;lcd.c: 233: string[1] = value % 10 + '0';
   937  001570  C064  F026         	movff	LCDWriteInt@value,___awmod@dividend
   938  001574  6A27               	clrf	___awmod@dividend+1,c
   939  001576  0E00               	movlw	0
   940  001578  6E29               	movwf	___awmod@divisor+1,c
   941  00157A  0E0A               	movlw	10
   942  00157C  6E28               	movwf	___awmod@divisor,c
   943  00157E  EC02  F00A         	call	___awmod	;wreg free
   944  001582  5026               	movf	?___awmod,w,c
   945  001584  0F30               	addlw	48
   946  001586  0100               	movlb	0	; () banked
   947  001588  6F67               	movwf	(LCDWriteInt@string+1)& (0+255),b
   948                           
   949                           ; BSR set to: 0
   950                           ;lcd.c: 234: string[2] = '\0';
   951  00158A  0E00               	movlw	0
   952  00158C  0100               	movlb	0	; () banked
   953  00158E  6F68               	movwf	(LCDWriteInt@string+2)& (0+255),b
   954                           
   955                           ; BSR set to: 0
   956                           ;lcd.c: 236: LCDGoto(column, row);
   957  001590  C063  F02B         	movff	LCDWriteInt@row,LCDGoto@row
   958  001594  0100               	movlb	0	; () banked
   959  001596  5165               	movf	LCDWriteInt@column& (0+255),w,b
   960  001598  EC40  F00B         	call	_LCDGoto
   961                           
   962                           ;lcd.c: 237: LCDWriteStr(string);
   963  00159C  0E66               	movlw	low LCDWriteInt@string
   964  00159E  6E2C               	movwf	LCDWriteStr@string,c
   965  0015A0  0E00               	movlw	high LCDWriteInt@string
   966  0015A2  6E2D               	movwf	LCDWriteStr@string+1,c
   967  0015A4  ECFA  F008         	call	_LCDWriteStr	;wreg free
   968  0015A8  0012               	return		;funcret
   969  0015AA                     __end_of_LCDWriteInt:
   970                           	opt stack 0
   971                           tblptru	equ	0xFF8
   972                           tblptrh	equ	0xFF7
   973                           tblptrl	equ	0xFF6
   974                           tablat	equ	0xFF5
   975                           intcon	equ	0xFF2
   976                           intcon2	equ	0xFF1
   977                           intcon3	equ	0xFF0
   978                           postinc0	equ	0xFEE
   979                           postdec1	equ	0xFE5
   980                           fsr1l	equ	0xFE1
   981                           
   982 ;; *************** function ___awmod *****************
   983 ;; Defined at:
   984 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
   985 ;; Parameters:    Size  Location     Type
   986 ;;  dividend        2   37[COMRAM] int 
   987 ;;  divisor         2   39[COMRAM] int 
   988 ;; Auto vars:     Size  Location     Type
   989 ;;  sign            1   42[COMRAM] unsigned char 
   990 ;;  counter         1   41[COMRAM] unsigned char 
   991 ;; Return value:  Size  Location     Type
   992 ;;                  2   37[COMRAM] int 
   993 ;; Registers used:
   994 ;;		wreg, status,2, status,0
   995 ;; Tracked objects:
   996 ;;		On entry : 0/0
   997 ;;		On exit  : 0/0
   998 ;;		Unchanged: 0/0
   999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1000 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1001 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1003 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1004 ;;Total ram usage:        6 bytes
  1005 ;; Hardware stack levels used:    1
  1006 ;; Hardware stack levels required when called:    8
  1007 ;; This function calls:
  1008 ;;		Nothing
  1009 ;; This function is called by:
  1010 ;;		_LCDWriteInt
  1011 ;;		_LCDPutByte
  1012 ;; This function uses a non-reentrant model
  1013 ;;
  1014                           
  1015                           	psect	text5
  1016  001404                     __ptext5:
  1017                           	opt stack 0
  1018  001404                     ___awmod:
  1019                           	opt stack 18
  1020                           
  1021                           ;incstack = 0
  1022  001404  0E00               	movlw	0
  1023  001406  6E2B               	movwf	___awmod@sign,c
  1024  001408  AE27               	btfss	___awmod@dividend+1,7,c
  1025  00140A  D006               	goto	l2092
  1026  00140C  6C26               	negf	___awmod@dividend,c
  1027  00140E  1E27               	comf	___awmod@dividend+1,f,c
  1028  001410  B0D8               	btfsc	status,0,c
  1029  001412  2A27               	incf	___awmod@dividend+1,f,c
  1030  001414  0E01               	movlw	1
  1031  001416  6E2B               	movwf	___awmod@sign,c
  1032  001418                     l2092:
  1033  001418  AE29               	btfss	___awmod@divisor+1,7,c
  1034  00141A  D004               	goto	l2096
  1035  00141C  6C28               	negf	___awmod@divisor,c
  1036  00141E  1E29               	comf	___awmod@divisor+1,f,c
  1037  001420  B0D8               	btfsc	status,0,c
  1038  001422  2A29               	incf	___awmod@divisor+1,f,c
  1039  001424                     l2096:
  1040  001424  5028               	movf	___awmod@divisor,w,c
  1041  001426  1029               	iorwf	___awmod@divisor+1,w,c
  1042  001428  B4D8               	btfsc	status,2,c
  1043  00142A  D018               	goto	l2112
  1044  00142C  0E01               	movlw	1
  1045  00142E  6E2A               	movwf	___awmod@counter,c
  1046  001430  D004               	goto	l2102
  1047  001432                     l2100:
  1048  001432  90D8               	bcf	status,0,c
  1049  001434  3628               	rlcf	___awmod@divisor,f,c
  1050  001436  3629               	rlcf	___awmod@divisor+1,f,c
  1051  001438  2A2A               	incf	___awmod@counter,f,c
  1052  00143A                     l2102:
  1053  00143A  AE29               	btfss	___awmod@divisor+1,7,c
  1054  00143C  D7FA               	goto	l2100
  1055  00143E                     l2104:
  1056  00143E  5028               	movf	___awmod@divisor,w,c
  1057  001440  5C26               	subwf	___awmod@dividend,w,c
  1058  001442  5029               	movf	___awmod@divisor+1,w,c
  1059  001444  5827               	subwfb	___awmod@dividend+1,w,c
  1060  001446  A0D8               	btfss	status,0,c
  1061  001448  D004               	goto	l2108
  1062  00144A  5028               	movf	___awmod@divisor,w,c
  1063  00144C  5E26               	subwf	___awmod@dividend,f,c
  1064  00144E  5029               	movf	___awmod@divisor+1,w,c
  1065  001450  5A27               	subwfb	___awmod@dividend+1,f,c
  1066  001452                     l2108:
  1067  001452  90D8               	bcf	status,0,c
  1068  001454  3229               	rrcf	___awmod@divisor+1,f,c
  1069  001456  3228               	rrcf	___awmod@divisor,f,c
  1070  001458  2E2A               	decfsz	___awmod@counter,f,c
  1071  00145A  D7F1               	goto	l2104
  1072  00145C                     l2112:
  1073  00145C  502B               	movf	___awmod@sign,w,c
  1074  00145E  B4D8               	btfsc	status,2,c
  1075  001460  D004               	goto	l2116
  1076  001462  6C26               	negf	___awmod@dividend,c
  1077  001464  1E27               	comf	___awmod@dividend+1,f,c
  1078  001466  B0D8               	btfsc	status,0,c
  1079  001468  2A27               	incf	___awmod@dividend+1,f,c
  1080  00146A                     l2116:
  1081  00146A  C026  F026         	movff	___awmod@dividend,?___awmod
  1082  00146E  C027  F027         	movff	___awmod@dividend+1,?___awmod+1
  1083  001472  0012               	return	
  1084  001474                     __end_of___awmod:
  1085                           	opt stack 0
  1086                           tblptru	equ	0xFF8
  1087                           tblptrh	equ	0xFF7
  1088                           tblptrl	equ	0xFF6
  1089                           tablat	equ	0xFF5
  1090                           intcon	equ	0xFF2
  1091                           intcon2	equ	0xFF1
  1092                           intcon3	equ	0xFF0
  1093                           postinc0	equ	0xFEE
  1094                           postdec1	equ	0xFE5
  1095                           fsr1l	equ	0xFE1
  1096                           status	equ	0xFD8
  1097                           
  1098 ;; *************** function ___awdiv *****************
  1099 ;; Defined at:
  1100 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  1101 ;; Parameters:    Size  Location     Type
  1102 ;;  dividend        2   37[COMRAM] int 
  1103 ;;  divisor         2   39[COMRAM] int 
  1104 ;; Auto vars:     Size  Location     Type
  1105 ;;  quotient        2   43[COMRAM] int 
  1106 ;;  sign            1   42[COMRAM] unsigned char 
  1107 ;;  counter         1   41[COMRAM] unsigned char 
  1108 ;; Return value:  Size  Location     Type
  1109 ;;                  2   37[COMRAM] int 
  1110 ;; Registers used:
  1111 ;;		wreg, status,2, status,0
  1112 ;; Tracked objects:
  1113 ;;		On entry : 0/0
  1114 ;;		On exit  : 0/0
  1115 ;;		Unchanged: 0/0
  1116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1117 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1118 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1120 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1121 ;;Total ram usage:        8 bytes
  1122 ;; Hardware stack levels used:    1
  1123 ;; Hardware stack levels required when called:    8
  1124 ;; This function calls:
  1125 ;;		Nothing
  1126 ;; This function is called by:
  1127 ;;		_LCDWriteInt
  1128 ;;		_LCDPutByte
  1129 ;; This function uses a non-reentrant model
  1130 ;;
  1131                           
  1132                           	psect	text6
  1133  00127C                     __ptext6:
  1134                           	opt stack 0
  1135  00127C                     ___awdiv:
  1136                           	opt stack 18
  1137                           
  1138                           ;incstack = 0
  1139  00127C  0E00               	movlw	0
  1140  00127E  6E2B               	movwf	___awdiv@sign,c
  1141  001280  AE29               	btfss	___awdiv@divisor+1,7,c
  1142  001282  D006               	goto	l2048
  1143  001284  6C28               	negf	___awdiv@divisor,c
  1144  001286  1E29               	comf	___awdiv@divisor+1,f,c
  1145  001288  B0D8               	btfsc	status,0,c
  1146  00128A  2A29               	incf	___awdiv@divisor+1,f,c
  1147  00128C  0E01               	movlw	1
  1148  00128E  6E2B               	movwf	___awdiv@sign,c
  1149  001290                     l2048:
  1150  001290  AE27               	btfss	___awdiv@dividend+1,7,c
  1151  001292  D006               	goto	l2054
  1152  001294  6C26               	negf	___awdiv@dividend,c
  1153  001296  1E27               	comf	___awdiv@dividend+1,f,c
  1154  001298  B0D8               	btfsc	status,0,c
  1155  00129A  2A27               	incf	___awdiv@dividend+1,f,c
  1156  00129C  0E01               	movlw	1
  1157  00129E  1A2B               	xorwf	___awdiv@sign,f,c
  1158  0012A0                     l2054:
  1159  0012A0  0E00               	movlw	0
  1160  0012A2  6E2D               	movwf	___awdiv@quotient+1,c
  1161  0012A4  0E00               	movlw	0
  1162  0012A6  6E2C               	movwf	___awdiv@quotient,c
  1163  0012A8  5028               	movf	___awdiv@divisor,w,c
  1164  0012AA  1029               	iorwf	___awdiv@divisor+1,w,c
  1165  0012AC  B4D8               	btfsc	status,2,c
  1166  0012AE  D01C               	goto	l2076
  1167  0012B0  0E01               	movlw	1
  1168  0012B2  6E2A               	movwf	___awdiv@counter,c
  1169  0012B4  D004               	goto	l2062
  1170  0012B6                     l2060:
  1171  0012B6  90D8               	bcf	status,0,c
  1172  0012B8  3628               	rlcf	___awdiv@divisor,f,c
  1173  0012BA  3629               	rlcf	___awdiv@divisor+1,f,c
  1174  0012BC  2A2A               	incf	___awdiv@counter,f,c
  1175  0012BE                     l2062:
  1176  0012BE  AE29               	btfss	___awdiv@divisor+1,7,c
  1177  0012C0  D7FA               	goto	l2060
  1178  0012C2                     l2064:
  1179  0012C2  90D8               	bcf	status,0,c
  1180  0012C4  362C               	rlcf	___awdiv@quotient,f,c
  1181  0012C6  362D               	rlcf	___awdiv@quotient+1,f,c
  1182  0012C8  5028               	movf	___awdiv@divisor,w,c
  1183  0012CA  5C26               	subwf	___awdiv@dividend,w,c
  1184  0012CC  5029               	movf	___awdiv@divisor+1,w,c
  1185  0012CE  5827               	subwfb	___awdiv@dividend+1,w,c
  1186  0012D0  A0D8               	btfss	status,0,c
  1187  0012D2  D005               	goto	l2072
  1188  0012D4  5028               	movf	___awdiv@divisor,w,c
  1189  0012D6  5E26               	subwf	___awdiv@dividend,f,c
  1190  0012D8  5029               	movf	___awdiv@divisor+1,w,c
  1191  0012DA  5A27               	subwfb	___awdiv@dividend+1,f,c
  1192  0012DC  802C               	bsf	___awdiv@quotient,0,c
  1193  0012DE                     l2072:
  1194  0012DE  90D8               	bcf	status,0,c
  1195  0012E0  3229               	rrcf	___awdiv@divisor+1,f,c
  1196  0012E2  3228               	rrcf	___awdiv@divisor,f,c
  1197  0012E4  2E2A               	decfsz	___awdiv@counter,f,c
  1198  0012E6  D7ED               	goto	l2064
  1199  0012E8                     l2076:
  1200  0012E8  502B               	movf	___awdiv@sign,w,c
  1201  0012EA  B4D8               	btfsc	status,2,c
  1202  0012EC  D004               	goto	l2080
  1203  0012EE  6C2C               	negf	___awdiv@quotient,c
  1204  0012F0  1E2D               	comf	___awdiv@quotient+1,f,c
  1205  0012F2  B0D8               	btfsc	status,0,c
  1206  0012F4  2A2D               	incf	___awdiv@quotient+1,f,c
  1207  0012F6                     l2080:
  1208  0012F6  C02C  F026         	movff	___awdiv@quotient,?___awdiv
  1209  0012FA  C02D  F027         	movff	___awdiv@quotient+1,?___awdiv+1
  1210  0012FE  0012               	return	
  1211  001300                     __end_of___awdiv:
  1212                           	opt stack 0
  1213                           tblptru	equ	0xFF8
  1214                           tblptrh	equ	0xFF7
  1215                           tblptrl	equ	0xFF6
  1216                           tablat	equ	0xFF5
  1217                           intcon	equ	0xFF2
  1218                           intcon2	equ	0xFF1
  1219                           intcon3	equ	0xFF0
  1220                           postinc0	equ	0xFEE
  1221                           postdec1	equ	0xFE5
  1222                           fsr1l	equ	0xFE1
  1223                           status	equ	0xFD8
  1224                           
  1225 ;; *************** function _LCDWriteStr *****************
  1226 ;; Defined at:
  1227 ;;		line 193 in file "lcd.c"
  1228 ;; Parameters:    Size  Location     Type
  1229 ;;  string          2   43[COMRAM] PTR const unsigned char 
  1230 ;;		 -> LCDWriteInt@string(3), LCDWriteFloat@string(5), LCDWriteHexa@string(3), STR_1(11), 
  1231 ;; Auto vars:     Size  Location     Type
  1232 ;;  i               1    0[BANK0 ] unsigned char 
  1233 ;; Return value:  Size  Location     Type
  1234 ;;                  1    wreg      void 
  1235 ;; Registers used:
  1236 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1237 ;; Tracked objects:
  1238 ;;		On entry : 0/0
  1239 ;;		On exit  : 0/0
  1240 ;;		Unchanged: 0/0
  1241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1242 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1243 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1244 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1245 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1246 ;;Total ram usage:        5 bytes
  1247 ;; Hardware stack levels used:    1
  1248 ;; Hardware stack levels required when called:   11
  1249 ;; This function calls:
  1250 ;;		_LCDPutChar
  1251 ;; This function is called by:
  1252 ;;		_init_debug
  1253 ;;		_LCDWriteInt
  1254 ;;		_LCDWriteHexa
  1255 ;;		_LCDWriteFloat
  1256 ;; This function uses a non-reentrant model
  1257 ;;
  1258                           
  1259                           	psect	text7
  1260  0011F4                     __ptext7:
  1261                           	opt stack 0
  1262  0011F4                     _LCDWriteStr:
  1263                           	opt stack 15
  1264                           
  1265                           ;lcd.c: 195: UINT8_T i = 0;
  1266                           
  1267                           ;incstack = 0
  1268  0011F4  0E00               	movlw	0
  1269  0011F6  0100               	movlb	0	; () banked
  1270  0011F8  6F60               	movwf	LCDWriteStr@i& (0+255),b
  1271                           
  1272                           ;lcd.c: 197: while (string[i])
  1273  0011FA  D020               	goto	l2038
  1274  0011FC                     l2034:
  1275                           
  1276                           ;lcd.c: 198: LCDPutChar(string[i++]);
  1277  0011FC  0100               	movlb	0	; () banked
  1278  0011FE  5160               	movf	LCDWriteStr@i& (0+255),w,b
  1279  001200  0D01               	mullw	1
  1280  001202  C02C  F02E         	movff	LCDWriteStr@string,??_LCDWriteStr
  1281  001206  C02D  F02F         	movff	LCDWriteStr@string+1,??_LCDWriteStr+1
  1282  00120A  50F3               	movf	prodl,w,c
  1283  00120C  262E               	addwf	??_LCDWriteStr,f,c
  1284  00120E  50F4               	movf	prodh,w,c
  1285  001210  222F               	addwfc	??_LCDWriteStr+1,f,c
  1286  001212  C02E  FFF6         	movff	??_LCDWriteStr,tblptrl
  1287  001216  C02F  FFF7         	movff	??_LCDWriteStr+1,tblptrh
  1288  00121A  0E00               	movlw	low (__smallconst shr (0+16))
  1289  00121C  6EF8               	movwf	tblptru,c
  1290  00121E  0E0F               	movlw	(high __ramtop+-1)
  1291  001220  64F7               	cpfsgt	tblptrh,c
  1292  001222  D003               	bra	u1227
  1293  001224  0008               	tblrd		*
  1294  001226  50F5               	movf	tablat,w,c
  1295  001228  D005               	bra	u1220
  1296  00122A                     u1227:
  1297  00122A  CFF6 FFE9          	movff	tblptrl,fsr0l
  1298  00122E  CFF7 FFEA          	movff	tblptrh,fsr0h
  1299  001232  50EF               	movf	indf0,w,c
  1300  001234                     u1220:
  1301  001234  EC1A  F00C         	call	_LCDPutChar
  1302  001238  0100               	movlb	0	; () banked
  1303  00123A  2B60               	incf	LCDWriteStr@i& (0+255),f,b
  1304  00123C                     l2038:
  1305                           
  1306                           ; BSR set to: 0
  1307  00123C  0100               	movlb	0	; () banked
  1308  00123E  5160               	movf	LCDWriteStr@i& (0+255),w,b
  1309  001240  0D01               	mullw	1
  1310  001242  C02C  F02E         	movff	LCDWriteStr@string,??_LCDWriteStr
  1311  001246  C02D  F02F         	movff	LCDWriteStr@string+1,??_LCDWriteStr+1
  1312  00124A  50F3               	movf	prodl,w,c
  1313  00124C  262E               	addwf	??_LCDWriteStr,f,c
  1314  00124E  50F4               	movf	prodh,w,c
  1315  001250  222F               	addwfc	??_LCDWriteStr+1,f,c
  1316  001252  C02E  FFF6         	movff	??_LCDWriteStr,tblptrl
  1317  001256  C02F  FFF7         	movff	??_LCDWriteStr+1,tblptrh
  1318  00125A  0E00               	movlw	low (__smallconst shr (0+16))
  1319  00125C  6EF8               	movwf	tblptru,c
  1320  00125E  0E0F               	movlw	(high __ramtop+-1)
  1321  001260  64F7               	cpfsgt	tblptrh,c
  1322  001262  D003               	bra	u1237
  1323  001264  0008               	tblrd		*
  1324  001266  50F5               	movf	tablat,w,c
  1325  001268  D005               	bra	u1230
  1326  00126A                     u1237:
  1327  00126A  CFF6 FFE9          	movff	tblptrl,fsr0l
  1328  00126E  CFF7 FFEA          	movff	tblptrh,fsr0h
  1329  001272  50EF               	movf	indf0,w,c
  1330  001274                     u1230:
  1331  001274  0900               	iorlw	0
  1332  001276  B4D8               	btfsc	status,2,c
  1333  001278  0012               	return	
  1334  00127A  D7C0               	goto	l2034
  1335  00127C                     __end_of_LCDWriteStr:
  1336                           	opt stack 0
  1337                           tblptru	equ	0xFF8
  1338                           tblptrh	equ	0xFF7
  1339                           tblptrl	equ	0xFF6
  1340                           tablat	equ	0xFF5
  1341                           prodh	equ	0xFF4
  1342                           prodl	equ	0xFF3
  1343                           intcon	equ	0xFF2
  1344                           intcon2	equ	0xFF1
  1345                           intcon3	equ	0xFF0
  1346                           indf0	equ	0xFEF
  1347                           postinc0	equ	0xFEE
  1348                           fsr0h	equ	0xFEA
  1349                           fsr0l	equ	0xFE9
  1350                           postdec1	equ	0xFE5
  1351                           fsr1l	equ	0xFE1
  1352                           status	equ	0xFD8
  1353                           
  1354 ;; *************** function _LCDPutChar *****************
  1355 ;; Defined at:
  1356 ;;		line 180 in file "lcd.c"
  1357 ;; Parameters:    Size  Location     Type
  1358 ;;  data            1    wreg     unsigned char 
  1359 ;; Auto vars:     Size  Location     Type
  1360 ;;  data            1   42[COMRAM] unsigned char 
  1361 ;; Return value:  Size  Location     Type
  1362 ;;                  1    wreg      void 
  1363 ;; Registers used:
  1364 ;;		wreg, status,2, status,0, cstack
  1365 ;; Tracked objects:
  1366 ;;		On entry : 0/0
  1367 ;;		On exit  : 0/0
  1368 ;;		Unchanged: 0/0
  1369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1371 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1373 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1374 ;;Total ram usage:        1 bytes
  1375 ;; Hardware stack levels used:    1
  1376 ;; Hardware stack levels required when called:   10
  1377 ;; This function calls:
  1378 ;;		_WaitLCD
  1379 ;;		_WriteByte
  1380 ;; This function is called by:
  1381 ;;		_LCDWriteStr
  1382 ;;		_LCDPutByte
  1383 ;; This function uses a non-reentrant model
  1384 ;;
  1385                           
  1386                           	psect	text8
  1387  001834                     __ptext8:
  1388                           	opt stack 0
  1389  001834                     _LCDPutChar:
  1390                           	opt stack 15
  1391                           
  1392                           ;incstack = 0
  1393                           ;LCDPutChar@data stored from wreg
  1394  001834  6E2B               	movwf	LCDPutChar@data,c
  1395                           
  1396                           ;lcd.c: 182: WriteByte(0, data);
  1397  001836  C02B  F029         	movff	LCDPutChar@data,WriteByte@data
  1398  00183A  0E00               	movlw	0
  1399  00183C  ECF7  F00B         	call	_WriteByte
  1400                           
  1401                           ;lcd.c: 183: WaitLCD();
  1402  001840  EC23  F00C         	call	_WaitLCD	;wreg free
  1403  001844  0012               	return		;funcret
  1404  001846                     __end_of_LCDPutChar:
  1405                           	opt stack 0
  1406                           tblptru	equ	0xFF8
  1407                           tblptrh	equ	0xFF7
  1408                           tblptrl	equ	0xFF6
  1409                           tablat	equ	0xFF5
  1410                           prodh	equ	0xFF4
  1411                           prodl	equ	0xFF3
  1412                           intcon	equ	0xFF2
  1413                           intcon2	equ	0xFF1
  1414                           intcon3	equ	0xFF0
  1415                           indf0	equ	0xFEF
  1416                           postinc0	equ	0xFEE
  1417                           fsr0h	equ	0xFEA
  1418                           fsr0l	equ	0xFE9
  1419                           postdec1	equ	0xFE5
  1420                           fsr1l	equ	0xFE1
  1421                           status	equ	0xFD8
  1422                           
  1423 ;; *************** function _LCDGoto *****************
  1424 ;; Defined at:
  1425 ;;		line 171 in file "lcd.c"
  1426 ;; Parameters:    Size  Location     Type
  1427 ;;  column          1    wreg     unsigned char 
  1428 ;;  row             1   42[COMRAM] unsigned char 
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;  column          1    2[BANK0 ] unsigned char 
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  1    wreg      void 
  1433 ;; Registers used:
  1434 ;;		wreg, status,2, status,0, cstack
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1440 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1441 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1442 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1443 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1444 ;;Total ram usage:        6 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; Hardware stack levels required when called:   10
  1447 ;; This function calls:
  1448 ;;		_WaitLCD
  1449 ;;		_WriteByte
  1450 ;; This function is called by:
  1451 ;;		_init_debug
  1452 ;;		_LCDWriteInt
  1453 ;;		_LCDWriteHexa
  1454 ;;		_LCDWriteFloat
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457                           
  1458                           	psect	text9
  1459  001680                     __ptext9:
  1460                           	opt stack 0
  1461  001680                     _LCDGoto:
  1462                           	opt stack 16
  1463                           
  1464                           ;incstack = 0
  1465                           ;LCDGoto@column stored from wreg
  1466  001680  0100               	movlb	0	; () banked
  1467  001682  6F62               	movwf	LCDGoto@column& (0+255),b
  1468                           
  1469                           ;lcd.c: 173: if ((row > (2 - 1)) || (column > (16 - 1)))
  1470  001684  0E02               	movlw	2
  1471  001686  602B               	cpfslt	LCDGoto@row,c
  1472  001688  0012               	return	
  1473  00168A  0E0F               	movlw	15
  1474  00168C  0100               	movlb	0	; () banked
  1475  00168E  6562               	cpfsgt	LCDGoto@column& (0+255),b
  1476  001690  D001               	goto	l2022
  1477  001692  0012               	return	
  1478  001694                     l2022:
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;lcd.c: 176: WriteByte(1, (row == 1) ? (0xC0 | column) : (0x80 | column));
  1482  001694  042B               	decf	LCDGoto@row,w,c
  1483  001696  B4D8               	btfsc	status,2,c
  1484  001698  D002               	goto	l2026
  1485                           
  1486                           ; BSR set to: 0
  1487  00169A  0E80               	movlw	128
  1488  00169C  D001               	goto	L1
  1489  00169E                     l2026:
  1490                           
  1491                           ; BSR set to: 0
  1492  00169E  0EC0               	movlw	192
  1493  0016A0                     L1:
  1494  0016A0  C062  F02C         	movff	LCDGoto@column,??_LCDGoto
  1495  0016A4  6A2D               	clrf	(??_LCDGoto+1)& (0+255),c
  1496  0016A6  102C               	iorwf	??_LCDGoto,w,c
  1497  0016A8  0100               	movlb	0	; () banked
  1498  0016AA  6F60               	movwf	_LCDGoto$669& (0+255),b
  1499  0016AC  502D               	movf	??_LCDGoto+1,w,c
  1500  0016AE  0100               	movlb	0	; () banked
  1501  0016B0  6F61               	movwf	(_LCDGoto$669+1)& (0+255),b
  1502                           
  1503                           ; BSR set to: 0
  1504                           
  1505                           ; BSR set to: 0
  1506  0016B2  C060  F029         	movff	_LCDGoto$669,WriteByte@data
  1507  0016B6  0E01               	movlw	1
  1508  0016B8  ECF7  F00B         	call	_WriteByte
  1509                           
  1510                           ;lcd.c: 177: WaitLCD();
  1511  0016BC  EC23  F00C         	call	_WaitLCD	;wreg free
  1512  0016C0  0012               	return		;funcret
  1513  0016C2                     __end_of_LCDGoto:
  1514                           	opt stack 0
  1515                           tblptru	equ	0xFF8
  1516                           tblptrh	equ	0xFF7
  1517                           tblptrl	equ	0xFF6
  1518                           tablat	equ	0xFF5
  1519                           prodh	equ	0xFF4
  1520                           prodl	equ	0xFF3
  1521                           intcon	equ	0xFF2
  1522                           intcon2	equ	0xFF1
  1523                           intcon3	equ	0xFF0
  1524                           indf0	equ	0xFEF
  1525                           postinc0	equ	0xFEE
  1526                           fsr0h	equ	0xFEA
  1527                           fsr0l	equ	0xFE9
  1528                           postdec1	equ	0xFE5
  1529                           fsr1l	equ	0xFE1
  1530                           status	equ	0xFD8
  1531                           
  1532 ;; *************** function _LCDInit *****************
  1533 ;; Defined at:
  1534 ;;		line 89 in file "lcd.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;		None
  1537 ;; Auto vars:     Size  Location     Type
  1538 ;;		None
  1539 ;; Return value:  Size  Location     Type
  1540 ;;                  1    wreg      void 
  1541 ;; Registers used:
  1542 ;;		wreg, status,2, status,0, cstack
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1550 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1551 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1552 ;;Total ram usage:        1 bytes
  1553 ;; Hardware stack levels used:    1
  1554 ;; Hardware stack levels required when called:   10
  1555 ;; This function calls:
  1556 ;;		_WaitLCD
  1557 ;;		_WriteNibble
  1558 ;; This function is called by:
  1559 ;;		_init_debug
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           	psect	text10
  1564  00110C                     __ptext10:
  1565                           	opt stack 0
  1566  00110C                     _LCDInit:
  1567                           	opt stack 18
  1568                           
  1569                           ;lcd.c: 91: TRISDbits.TRISD7 = 0;
  1570                           
  1571                           ;incstack = 0
  1572  00110C  9E95               	bcf	3989,7,c	;volatile
  1573                           
  1574                           ;lcd.c: 92: TRISDbits.TRISD6 = 0;
  1575  00110E  9C95               	bcf	3989,6,c	;volatile
  1576                           
  1577                           ;lcd.c: 93: TRISDbits.TRISD5 = 0;
  1578  001110  9A95               	bcf	3989,5,c	;volatile
  1579                           
  1580                           ;lcd.c: 94: TRISDbits.TRISD4 = 0;
  1581  001112  9895               	bcf	3989,4,c	;volatile
  1582                           
  1583                           ;lcd.c: 95: TRISDbits.TRISD0 = 0;
  1584  001114  9095               	bcf	3989,0,c	;volatile
  1585                           
  1586                           ;lcd.c: 96: TRISDbits.TRISD1 = 0;
  1587  001116  9295               	bcf	3989,1,c	;volatile
  1588                           
  1589                           ;lcd.c: 97: TRISDbits.TRISD2 = 0;
  1590  001118  9495               	bcf	3989,2,c	;volatile
  1591                           
  1592                           ;lcd.c: 98: TRISDbits.TRISD3 = 0;
  1593  00111A  9695               	bcf	3989,3,c	;volatile
  1594                           
  1595                           ;lcd.c: 136: LATDbits.LATD7 = 1;
  1596  00111C  8E8C               	bsf	3980,7,c	;volatile
  1597                           
  1598                           ;lcd.c: 137: _delay(30000);
  1599  00111E  0E27               	movlw	39
  1600  001120  6E29               	movwf	??_LCDInit& (0+255),c
  1601  001122  0EF5               	movlw	245
  1602  001124                     u1687:
  1603  001124  2EE8               	decfsz	wreg,f,c
  1604  001126  D7FE               	bra	u1687
  1605  001128  2E29               	decfsz	??_LCDInit& (0+255),f,c
  1606  00112A  D7FC               	bra	u1687
  1607  00112C  F000               	nop	
  1608                           
  1609                           ;lcd.c: 138: WriteNibble(1, 0x03);
  1610  00112E  0E03               	movlw	3
  1611  001130  6E26               	movwf	WriteNibble@data,c
  1612  001132  0E01               	movlw	1
  1613  001134  ECFC  F00A         	call	_WriteNibble
  1614                           
  1615                           ;lcd.c: 139: _delay(3000);
  1616  001138  0E04               	movlw	4
  1617  00113A  6E29               	movwf	??_LCDInit& (0+255),c
  1618  00113C  0EE4               	movlw	228
  1619  00113E                     u1697:
  1620  00113E  2EE8               	decfsz	wreg,f,c
  1621  001140  D7FE               	bra	u1697
  1622  001142  2E29               	decfsz	??_LCDInit& (0+255),f,c
  1623  001144  D7FC               	bra	u1697
  1624  001146  D000               	nop2	
  1625                           
  1626                           ;lcd.c: 140: WriteNibble(1, 0x03);
  1627  001148  0E03               	movlw	3
  1628  00114A  6E26               	movwf	WriteNibble@data,c
  1629  00114C  0E01               	movlw	1
  1630  00114E  ECFC  F00A         	call	_WriteNibble
  1631                           
  1632                           ;lcd.c: 141: _delay(100);
  1633  001152  0E21               	movlw	33
  1634  001154                     u1707:
  1635  001154  2EE8               	decfsz	wreg,f,c
  1636  001156  D7FE               	bra	u1707
  1637  001158  F000               	nop	
  1638                           
  1639                           ;lcd.c: 142: WriteNibble(1, 0x03);
  1640  00115A  0E03               	movlw	3
  1641  00115C  6E26               	movwf	WriteNibble@data,c
  1642  00115E  0E01               	movlw	1
  1643  001160  ECFC  F00A         	call	_WriteNibble
  1644                           
  1645                           ;lcd.c: 143: _delay(100);
  1646  001164  0E21               	movlw	33
  1647  001166                     u1717:
  1648  001166  2EE8               	decfsz	wreg,f,c
  1649  001168  D7FE               	bra	u1717
  1650  00116A  F000               	nop	
  1651                           
  1652                           ;lcd.c: 144: WriteNibble(1, 0b00000010);
  1653  00116C  0E02               	movlw	2
  1654  00116E  6E26               	movwf	WriteNibble@data,c
  1655  001170  0E01               	movlw	1
  1656  001172  ECFC  F00A         	call	_WriteNibble
  1657                           
  1658                           ;lcd.c: 145: WaitLCD();
  1659  001176  EC23  F00C         	call	_WaitLCD	;wreg free
  1660                           
  1661                           ;lcd.c: 146: WriteNibble(1, 0b00000010);
  1662  00117A  0E02               	movlw	2
  1663  00117C  6E26               	movwf	WriteNibble@data,c
  1664  00117E  0E01               	movlw	1
  1665  001180  ECFC  F00A         	call	_WriteNibble
  1666                           
  1667                           ;lcd.c: 147: WriteNibble(1, 0b00001000);
  1668  001184  0E08               	movlw	8
  1669  001186  6E26               	movwf	WriteNibble@data,c
  1670  001188  0E01               	movlw	1
  1671  00118A  ECFC  F00A         	call	_WriteNibble
  1672                           
  1673                           ;lcd.c: 148: WaitLCD();
  1674  00118E  EC23  F00C         	call	_WaitLCD	;wreg free
  1675                           
  1676                           ;lcd.c: 149: WriteNibble(1, 0b00000000);
  1677  001192  0E00               	movlw	0
  1678  001194  6E26               	movwf	WriteNibble@data,c
  1679  001196  0E01               	movlw	1
  1680  001198  ECFC  F00A         	call	_WriteNibble
  1681                           
  1682                           ;lcd.c: 150: WriteNibble(1, 0b00001000);
  1683  00119C  0E08               	movlw	8
  1684  00119E  6E26               	movwf	WriteNibble@data,c
  1685  0011A0  0E01               	movlw	1
  1686  0011A2  ECFC  F00A         	call	_WriteNibble
  1687                           
  1688                           ;lcd.c: 151: WaitLCD();
  1689  0011A6  EC23  F00C         	call	_WaitLCD	;wreg free
  1690                           
  1691                           ;lcd.c: 152: WriteNibble(1, 0b00000000);
  1692  0011AA  0E00               	movlw	0
  1693  0011AC  6E26               	movwf	WriteNibble@data,c
  1694  0011AE  0E01               	movlw	1
  1695  0011B0  ECFC  F00A         	call	_WriteNibble
  1696                           
  1697                           ;lcd.c: 153: WriteNibble(1, 0b00001100);
  1698  0011B4  0E0C               	movlw	12
  1699  0011B6  6E26               	movwf	WriteNibble@data,c
  1700  0011B8  0E01               	movlw	1
  1701  0011BA  ECFC  F00A         	call	_WriteNibble
  1702                           
  1703                           ;lcd.c: 155: WaitLCD();
  1704  0011BE  EC23  F00C         	call	_WaitLCD	;wreg free
  1705                           
  1706                           ;lcd.c: 156: WriteNibble(1, 0b00000000);
  1707  0011C2  0E00               	movlw	0
  1708  0011C4  6E26               	movwf	WriteNibble@data,c
  1709  0011C6  0E01               	movlw	1
  1710  0011C8  ECFC  F00A         	call	_WriteNibble
  1711                           
  1712                           ;lcd.c: 157: WriteNibble(1, 0b00000001);
  1713  0011CC  0E01               	movlw	1
  1714  0011CE  6E26               	movwf	WriteNibble@data,c
  1715  0011D0  0E01               	movlw	1
  1716  0011D2  ECFC  F00A         	call	_WriteNibble
  1717                           
  1718                           ;lcd.c: 158: WaitLCD();
  1719  0011D6  EC23  F00C         	call	_WaitLCD	;wreg free
  1720                           
  1721                           ;lcd.c: 159: WriteNibble(1, 0b00000000);
  1722  0011DA  0E00               	movlw	0
  1723  0011DC  6E26               	movwf	WriteNibble@data,c
  1724  0011DE  0E01               	movlw	1
  1725  0011E0  ECFC  F00A         	call	_WriteNibble
  1726                           
  1727                           ;lcd.c: 160: WriteNibble(1, 0b00000110);
  1728  0011E4  0E06               	movlw	6
  1729  0011E6  6E26               	movwf	WriteNibble@data,c
  1730  0011E8  0E01               	movlw	1
  1731  0011EA  ECFC  F00A         	call	_WriteNibble
  1732                           
  1733                           ;lcd.c: 161: WaitLCD();
  1734  0011EE  EC23  F00C         	call	_WaitLCD	;wreg free
  1735  0011F2  0012               	return		;funcret
  1736  0011F4                     __end_of_LCDInit:
  1737                           	opt stack 0
  1738                           tblptru	equ	0xFF8
  1739                           tblptrh	equ	0xFF7
  1740                           tblptrl	equ	0xFF6
  1741                           tablat	equ	0xFF5
  1742                           prodh	equ	0xFF4
  1743                           prodl	equ	0xFF3
  1744                           intcon	equ	0xFF2
  1745                           intcon2	equ	0xFF1
  1746                           intcon3	equ	0xFF0
  1747                           indf0	equ	0xFEF
  1748                           postinc0	equ	0xFEE
  1749                           fsr0h	equ	0xFEA
  1750                           fsr0l	equ	0xFE9
  1751                           wreg	equ	0xFE8
  1752                           postdec1	equ	0xFE5
  1753                           fsr1l	equ	0xFE1
  1754                           status	equ	0xFD8
  1755                           
  1756 ;; *************** function _LCDClear *****************
  1757 ;; Defined at:
  1758 ;;		line 164 in file "lcd.c"
  1759 ;; Parameters:    Size  Location     Type
  1760 ;;		None
  1761 ;; Auto vars:     Size  Location     Type
  1762 ;;		None
  1763 ;; Return value:  Size  Location     Type
  1764 ;;                  1    wreg      void 
  1765 ;; Registers used:
  1766 ;;		wreg, status,2, status,0, cstack
  1767 ;; Tracked objects:
  1768 ;;		On entry : 0/0
  1769 ;;		On exit  : 0/0
  1770 ;;		Unchanged: 0/0
  1771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1774 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1775 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1776 ;;Total ram usage:        1 bytes
  1777 ;; Hardware stack levels used:    1
  1778 ;; Hardware stack levels required when called:   10
  1779 ;; This function calls:
  1780 ;;		_WaitLCD
  1781 ;;		_WriteByte
  1782 ;; This function is called by:
  1783 ;;		_init_debug
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           	psect	text11
  1788  0017B2                     __ptext11:
  1789                           	opt stack 0
  1790  0017B2                     _LCDClear:
  1791                           	opt stack 18
  1792                           
  1793                           ;lcd.c: 166: WriteByte(1, 0x01);
  1794                           
  1795                           ;incstack = 0
  1796  0017B2  0E01               	movlw	1
  1797  0017B4  6E29               	movwf	WriteByte@data,c
  1798  0017B6  0E01               	movlw	1
  1799  0017B8  ECF7  F00B         	call	_WriteByte
  1800                           
  1801                           ;lcd.c: 167: _delay(12500);
  1802  0017BC  0E11               	movlw	17
  1803  0017BE  6E2B               	movwf	??_LCDClear& (0+255),c
  1804  0017C0  0E3A               	movlw	58
  1805  0017C2                     u1727:
  1806  0017C2  2EE8               	decfsz	wreg,f,c
  1807  0017C4  D7FE               	bra	u1727
  1808  0017C6  2E2B               	decfsz	??_LCDClear& (0+255),f,c
  1809  0017C8  D7FC               	bra	u1727
  1810  0017CA  D000               	nop2	
  1811                           
  1812                           ;lcd.c: 168: WaitLCD();
  1813  0017CC  EC23  F00C         	call	_WaitLCD	;wreg free
  1814  0017D0  0012               	return		;funcret
  1815  0017D2                     __end_of_LCDClear:
  1816                           	opt stack 0
  1817                           tblptru	equ	0xFF8
  1818                           tblptrh	equ	0xFF7
  1819                           tblptrl	equ	0xFF6
  1820                           tablat	equ	0xFF5
  1821                           prodh	equ	0xFF4
  1822                           prodl	equ	0xFF3
  1823                           intcon	equ	0xFF2
  1824                           intcon2	equ	0xFF1
  1825                           intcon3	equ	0xFF0
  1826                           indf0	equ	0xFEF
  1827                           postinc0	equ	0xFEE
  1828                           fsr0h	equ	0xFEA
  1829                           fsr0l	equ	0xFE9
  1830                           wreg	equ	0xFE8
  1831                           postdec1	equ	0xFE5
  1832                           fsr1l	equ	0xFE1
  1833                           status	equ	0xFD8
  1834                           
  1835 ;; *************** function _WriteByte *****************
  1836 ;; Defined at:
  1837 ;;		line 83 in file "lcd.c"
  1838 ;; Parameters:    Size  Location     Type
  1839 ;;  cmd             1    wreg     unsigned char 
  1840 ;;  data            1   40[COMRAM] unsigned char 
  1841 ;; Auto vars:     Size  Location     Type
  1842 ;;  cmd             1   41[COMRAM] unsigned char 
  1843 ;; Return value:  Size  Location     Type
  1844 ;;                  1    wreg      void 
  1845 ;; Registers used:
  1846 ;;		wreg, status,2, status,0, cstack
  1847 ;; Tracked objects:
  1848 ;;		On entry : 0/0
  1849 ;;		On exit  : 0/0
  1850 ;;		Unchanged: 0/0
  1851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1852 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1853 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1855 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1856 ;;Total ram usage:        2 bytes
  1857 ;; Hardware stack levels used:    1
  1858 ;; Hardware stack levels required when called:    9
  1859 ;; This function calls:
  1860 ;;		_WriteNibble
  1861 ;; This function is called by:
  1862 ;;		_LCDClear
  1863 ;;		_LCDGoto
  1864 ;;		_LCDPutChar
  1865 ;;		_LCDShiftDisplay
  1866 ;; This function uses a non-reentrant model
  1867 ;;
  1868                           
  1869                           	psect	text12
  1870  0017EE                     __ptext12:
  1871                           	opt stack 0
  1872  0017EE                     _WriteByte:
  1873                           	opt stack 15
  1874                           
  1875                           ;incstack = 0
  1876                           ;WriteByte@cmd stored from wreg
  1877  0017EE  6E2A               	movwf	WriteByte@cmd,c
  1878                           
  1879                           ;lcd.c: 85: WriteNibble(cmd, data >> 4);
  1880  0017F0  3829               	swapf	WriteByte@data,w,c
  1881  0017F2  0B0F               	andlw	15
  1882  0017F4  6E26               	movwf	WriteNibble@data,c
  1883  0017F6  502A               	movf	WriteByte@cmd,w,c
  1884  0017F8  ECFC  F00A         	call	_WriteNibble
  1885                           
  1886                           ;lcd.c: 86: WriteNibble(cmd, data);
  1887  0017FC  C029  F026         	movff	WriteByte@data,WriteNibble@data
  1888  001800  502A               	movf	WriteByte@cmd,w,c
  1889  001802  ECFC  F00A         	call	_WriteNibble
  1890  001806  0012               	return		;funcret
  1891  001808                     __end_of_WriteByte:
  1892                           	opt stack 0
  1893                           tblptru	equ	0xFF8
  1894                           tblptrh	equ	0xFF7
  1895                           tblptrl	equ	0xFF6
  1896                           tablat	equ	0xFF5
  1897                           prodh	equ	0xFF4
  1898                           prodl	equ	0xFF3
  1899                           intcon	equ	0xFF2
  1900                           intcon2	equ	0xFF1
  1901                           intcon3	equ	0xFF0
  1902                           indf0	equ	0xFEF
  1903                           postinc0	equ	0xFEE
  1904                           fsr0h	equ	0xFEA
  1905                           fsr0l	equ	0xFE9
  1906                           wreg	equ	0xFE8
  1907                           postdec1	equ	0xFE5
  1908                           fsr1l	equ	0xFE1
  1909                           status	equ	0xFD8
  1910                           
  1911 ;; *************** function _WriteNibble *****************
  1912 ;; Defined at:
  1913 ;;		line 66 in file "lcd.c"
  1914 ;; Parameters:    Size  Location     Type
  1915 ;;  cmd             1    wreg     unsigned char 
  1916 ;;  data            1   37[COMRAM] unsigned char 
  1917 ;; Auto vars:     Size  Location     Type
  1918 ;;  cmd             1   39[COMRAM] unsigned char 
  1919 ;; Return value:  Size  Location     Type
  1920 ;;                  1    wreg      void 
  1921 ;; Registers used:
  1922 ;;		wreg, status,2, status,0
  1923 ;; Tracked objects:
  1924 ;;		On entry : 0/0
  1925 ;;		On exit  : 0/0
  1926 ;;		Unchanged: 0/0
  1927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1928 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1929 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1930 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1931 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1932 ;;Total ram usage:        3 bytes
  1933 ;; Hardware stack levels used:    1
  1934 ;; Hardware stack levels required when called:    8
  1935 ;; This function calls:
  1936 ;;		Nothing
  1937 ;; This function is called by:
  1938 ;;		_WriteByte
  1939 ;;		_LCDInit
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           	psect	text13
  1944  0015F8                     __ptext13:
  1945                           	opt stack 0
  1946  0015F8                     _WriteNibble:
  1947                           	opt stack 15
  1948                           
  1949                           ;incstack = 0
  1950                           ;WriteNibble@cmd stored from wreg
  1951  0015F8  6E28               	movwf	WriteNibble@cmd,c
  1952                           
  1953                           ;lcd.c: 68: LATDbits.LATD4 = (cmd ? 0 : 1);
  1954  0015FA  5028               	movf	WriteNibble@cmd,w,c
  1955  0015FC  A4D8               	btfss	status,2,c
  1956  0015FE  D003               	goto	u1130
  1957  001600  6A27               	clrf	??_WriteNibble& (0+255),c
  1958  001602  2A27               	incf	??_WriteNibble& (0+255),f,c
  1959  001604  D001               	goto	u1148
  1960  001606                     u1130:
  1961  001606  6A27               	clrf	??_WriteNibble& (0+255),c
  1962  001608                     u1148:
  1963  001608  3A27               	swapf	??_WriteNibble,f,c
  1964  00160A  508C               	movf	3980,w,c	;volatile
  1965  00160C  1827               	xorwf	??_WriteNibble,w,c
  1966  00160E  0BEF               	andlw	-17
  1967  001610  1827               	xorwf	??_WriteNibble,w,c
  1968  001612  6E8C               	movwf	3980,c	;volatile
  1969                           
  1970                           ;lcd.c: 69: LATDbits.LATD5 = 0;
  1971  001614  9A8C               	bcf	3980,5,c	;volatile
  1972                           
  1973                           ;lcd.c: 70: LATDbits.LATD6 = 1;
  1974  001616  8C8C               	bsf	3980,6,c	;volatile
  1975                           
  1976                           ;lcd.c: 72: LATDbits.LATD0 = LATDbits.LATD1 = LATDbits.LATD2 = LATDbits.LATD3 = 0;
  1977  001618  968C               	bcf	3980,3,c	;volatile
  1978  00161A  948C               	bcf	3980,2,c	;volatile
  1979  00161C  928C               	bcf	3980,1,c	;volatile
  1980  00161E  908C               	bcf	3980,0,c	;volatile
  1981                           
  1982                           ;lcd.c: 73: __nop();
  1983  001620  F000               	nop	
  1984                           
  1985                           ;lcd.c: 74: __nop();
  1986  001622  F000               	nop	
  1987                           
  1988                           ;lcd.c: 76: LATD = (LATD & 0xF0) | (data & 0x0F);
  1989  001624  C026  F027         	movff	WriteNibble@data,??_WriteNibble
  1990  001628  0E0F               	movlw	15
  1991  00162A  1627               	andwf	??_WriteNibble,f,c
  1992  00162C  508C               	movf	3980,w,c	;volatile
  1993  00162E  0BF0               	andlw	240
  1994  001630  1027               	iorwf	??_WriteNibble,w,c
  1995  001632  6E8C               	movwf	3980,c	;volatile
  1996                           
  1997                           ;lcd.c: 77: __nop();
  1998  001634  F000               	nop	
  1999                           
  2000                           ;lcd.c: 78: __nop();
  2001  001636  F000               	nop	
  2002                           
  2003                           ;lcd.c: 80: LATDbits.LATD6 = 0;
  2004  001638  9C8C               	bcf	3980,6,c	;volatile
  2005  00163A  0012               	return		;funcret
  2006  00163C                     __end_of_WriteNibble:
  2007                           	opt stack 0
  2008                           tblptru	equ	0xFF8
  2009                           tblptrh	equ	0xFF7
  2010                           tblptrl	equ	0xFF6
  2011                           tablat	equ	0xFF5
  2012                           prodh	equ	0xFF4
  2013                           prodl	equ	0xFF3
  2014                           intcon	equ	0xFF2
  2015                           intcon2	equ	0xFF1
  2016                           intcon3	equ	0xFF0
  2017                           indf0	equ	0xFEF
  2018                           postinc0	equ	0xFEE
  2019                           fsr0h	equ	0xFEA
  2020                           fsr0l	equ	0xFE9
  2021                           wreg	equ	0xFE8
  2022                           postdec1	equ	0xFE5
  2023                           fsr1l	equ	0xFE1
  2024                           status	equ	0xFD8
  2025                           
  2026 ;; *************** function _WaitLCD *****************
  2027 ;; Defined at:
  2028 ;;		line 52 in file "lcd.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;		None
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;  status          1   38[COMRAM] unsigned char 
  2033 ;; Return value:  Size  Location     Type
  2034 ;;                  1    wreg      void 
  2035 ;; Registers used:
  2036 ;;		wreg, status,2, status,0, cstack
  2037 ;; Tracked objects:
  2038 ;;		On entry : 0/0
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2045 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2046 ;;Total ram usage:        1 bytes
  2047 ;; Hardware stack levels used:    1
  2048 ;; Hardware stack levels required when called:    9
  2049 ;; This function calls:
  2050 ;;		_ReadByte
  2051 ;; This function is called by:
  2052 ;;		_LCDInit
  2053 ;;		_LCDClear
  2054 ;;		_LCDGoto
  2055 ;;		_LCDPutChar
  2056 ;; This function uses a non-reentrant model
  2057 ;;
  2058                           
  2059                           	psect	text14
  2060  001846                     __ptext14:
  2061                           	opt stack 0
  2062  001846                     _WaitLCD:
  2063                           	opt stack 15
  2064                           
  2065                           ;lcd.c: 54: UINT8_T status;
  2066                           ;lcd.c: 56: LATDbits.LATD4 = 0;
  2067                           
  2068                           ;incstack = 0
  2069  001846  988C               	bcf	3980,4,c	;volatile
  2070                           
  2071                           ;lcd.c: 57: LATDbits.LATD5 = 1;
  2072  001848  8A8C               	bsf	3980,5,c	;volatile
  2073  00184A                     l1958:
  2074                           
  2075                           ;lcd.c: 60: status = ReadByte();
  2076  00184A  EC97  F00B         	call	_ReadByte	;wreg free
  2077  00184E  6E27               	movwf	WaitLCD@status,c
  2078                           
  2079                           ;lcd.c: 61: } while (status & 0x80);
  2080  001850  BE27               	btfsc	WaitLCD@status,7,c
  2081  001852  D7FB               	goto	l1958
  2082                           
  2083                           ;lcd.c: 63: LATDbits.LATD5 = 0;
  2084  001854  9A8C               	bcf	3980,5,c	;volatile
  2085  001856  0012               	return		;funcret
  2086  001858                     __end_of_WaitLCD:
  2087                           	opt stack 0
  2088                           tblptru	equ	0xFF8
  2089                           tblptrh	equ	0xFF7
  2090                           tblptrl	equ	0xFF6
  2091                           tablat	equ	0xFF5
  2092                           prodh	equ	0xFF4
  2093                           prodl	equ	0xFF3
  2094                           intcon	equ	0xFF2
  2095                           intcon2	equ	0xFF1
  2096                           intcon3	equ	0xFF0
  2097                           indf0	equ	0xFEF
  2098                           postinc0	equ	0xFEE
  2099                           fsr0h	equ	0xFEA
  2100                           fsr0l	equ	0xFE9
  2101                           wreg	equ	0xFE8
  2102                           postdec1	equ	0xFE5
  2103                           fsr1l	equ	0xFE1
  2104                           status	equ	0xFD8
  2105                           
  2106 ;; *************** function _ReadByte *****************
  2107 ;; Defined at:
  2108 ;;		line 21 in file "lcd.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;		None
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;  status          1   37[COMRAM] unsigned char 
  2113 ;; Return value:  Size  Location     Type
  2114 ;;                  1    wreg      unsigned char 
  2115 ;; Registers used:
  2116 ;;		wreg, status,2, status,0
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2123 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2125 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2126 ;;Total ram usage:        1 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:    8
  2129 ;; This function calls:
  2130 ;;		Nothing
  2131 ;; This function is called by:
  2132 ;;		_WaitLCD
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text15
  2137  00172E                     __ptext15:
  2138                           	opt stack 0
  2139  00172E                     _ReadByte:
  2140                           	opt stack 15
  2141                           
  2142                           ;lcd.c: 23: UINT8_T status;
  2143                           ;lcd.c: 25: TRISDbits.TRISD0 = 1;
  2144                           
  2145                           ;incstack = 0
  2146  00172E  8095               	bsf	3989,0,c	;volatile
  2147                           
  2148                           ;lcd.c: 26: TRISDbits.TRISD1 = 1;
  2149  001730  8295               	bsf	3989,1,c	;volatile
  2150                           
  2151                           ;lcd.c: 27: TRISDbits.TRISD2 = 1;
  2152  001732  8495               	bsf	3989,2,c	;volatile
  2153                           
  2154                           ;lcd.c: 28: TRISDbits.TRISD3 = 1;
  2155  001734  8695               	bsf	3989,3,c	;volatile
  2156                           
  2157                           ;lcd.c: 30: LATDbits.LATD6 = 1;
  2158  001736  8C8C               	bsf	3980,6,c	;volatile
  2159                           
  2160                           ;lcd.c: 31: __nop();
  2161  001738  F000               	nop	
  2162                           
  2163                           ;lcd.c: 32: __nop();
  2164  00173A  F000               	nop	
  2165                           
  2166                           ;lcd.c: 34: status = PORTD << 4;
  2167  00173C  3883               	swapf	3971,w,c	;volatile
  2168  00173E  0BF0               	andlw	240
  2169  001740  6E26               	movwf	ReadByte@status,c
  2170                           
  2171                           ;lcd.c: 35: LATDbits.LATD6 = 0;
  2172  001742  9C8C               	bcf	3980,6,c	;volatile
  2173                           
  2174                           ;lcd.c: 37: LATDbits.LATD6 = 1;
  2175  001744  8C8C               	bsf	3980,6,c	;volatile
  2176                           
  2177                           ;lcd.c: 38: __nop();
  2178  001746  F000               	nop	
  2179                           
  2180                           ;lcd.c: 39: __nop();
  2181  001748  F000               	nop	
  2182                           
  2183                           ;lcd.c: 41: status |= PORTD & 0x0F;
  2184  00174A  5083               	movf	3971,w,c	;volatile
  2185  00174C  0B0F               	andlw	15
  2186  00174E  1226               	iorwf	ReadByte@status,f,c
  2187                           
  2188                           ;lcd.c: 42: LATDbits.LATD6 = 0;
  2189  001750  9C8C               	bcf	3980,6,c	;volatile
  2190                           
  2191                           ;lcd.c: 44: TRISDbits.TRISD0 = 0;
  2192  001752  9095               	bcf	3989,0,c	;volatile
  2193                           
  2194                           ;lcd.c: 45: TRISDbits.TRISD1 = 0;
  2195  001754  9295               	bcf	3989,1,c	;volatile
  2196                           
  2197                           ;lcd.c: 46: TRISDbits.TRISD2 = 0;
  2198  001756  9495               	bcf	3989,2,c	;volatile
  2199                           
  2200                           ;lcd.c: 47: TRISDbits.TRISD3 = 0;
  2201  001758  9695               	bcf	3989,3,c	;volatile
  2202                           
  2203                           ;lcd.c: 49: return(status);
  2204  00175A  5026               	movf	ReadByte@status,w,c
  2205  00175C  0012               	return	
  2206  00175E                     __end_of_ReadByte:
  2207                           	opt stack 0
  2208                           tblptru	equ	0xFF8
  2209                           tblptrh	equ	0xFF7
  2210                           tblptrl	equ	0xFF6
  2211                           tablat	equ	0xFF5
  2212                           prodh	equ	0xFF4
  2213                           prodl	equ	0xFF3
  2214                           intcon	equ	0xFF2
  2215                           intcon2	equ	0xFF1
  2216                           intcon3	equ	0xFF0
  2217                           indf0	equ	0xFEF
  2218                           postinc0	equ	0xFEE
  2219                           fsr0h	equ	0xFEA
  2220                           fsr0l	equ	0xFE9
  2221                           wreg	equ	0xFE8
  2222                           postdec1	equ	0xFE5
  2223                           fsr1l	equ	0xFE1
  2224                           status	equ	0xFD8
  2225                           
  2226 ;; *************** function _ISR *****************
  2227 ;; Defined at:
  2228 ;;		line 210 in file "main.c"
  2229 ;; Parameters:    Size  Location     Type
  2230 ;;		None
  2231 ;; Auto vars:     Size  Location     Type
  2232 ;;  i               2   35[COMRAM] int 
  2233 ;; Return value:  Size  Location     Type
  2234 ;;                  1    wreg      void 
  2235 ;; Registers used:
  2236 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2237 ;; Tracked objects:
  2238 ;;		On entry : 0/0
  2239 ;;		On exit  : 0/0
  2240 ;;		Unchanged: 0/0
  2241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2243 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2244 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2245 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2246 ;;Total ram usage:       17 bytes
  2247 ;; Hardware stack levels used:    1
  2248 ;; Hardware stack levels required when called:    7
  2249 ;; This function calls:
  2250 ;;		_flashlight
  2251 ;;		_pedometer
  2252 ;;		_searched
  2253 ;;		_synchronize
  2254 ;; This function is called by:
  2255 ;;		Interrupt level 2
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259                           	psect	intcode
  2260  000008                     __pintcode:
  2261                           	opt stack 0
  2262  000008                     _ISR:
  2263                           	opt stack 15
  2264                           
  2265                           ;incstack = 0
  2266  000008  823A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2267  00000A  CFFA F016          	movff	pclath,??_ISR+1
  2268  00000E  CFFB F017          	movff	pclatu,??_ISR+2
  2269  000012  CFE9 F018          	movff	fsr0l,??_ISR+3
  2270  000016  CFEA F019          	movff	fsr0h,??_ISR+4
  2271  00001A  CFE1 F01A          	movff	fsr1l,??_ISR+5
  2272  00001E  CFE2 F01B          	movff	fsr1h,??_ISR+6
  2273  000022  CFD9 F01C          	movff	fsr2l,??_ISR+7
  2274  000026  CFDA F01D          	movff	fsr2h,??_ISR+8
  2275  00002A  CFF3 F01E          	movff	prodl,??_ISR+9
  2276  00002E  CFF4 F01F          	movff	prodh,??_ISR+10
  2277  000032  CFF6 F020          	movff	tblptrl,??_ISR+11
  2278  000036  CFF7 F021          	movff	tblptrh,??_ISR+12
  2279  00003A  CFF8 F022          	movff	tblptru,??_ISR+13
  2280  00003E  CFF5 F023          	movff	tablat,??_ISR+14
  2281                           
  2282                           ;main.c: 212: if (INTCONbits.INT0IF) { pedometer(); }
  2283  000042  B2F2               	btfsc	intcon,1,c	;volatile
  2284  000044  EC46  F00C         	call	_pedometer	;wreg free
  2285                           
  2286                           ;main.c: 213: if (INTCON3bits.INT1IF) { searched(); }
  2287  000048  B0F0               	btfsc	intcon3,0,c	;volatile
  2288  00004A  EC0F  F008         	call	_searched	;wreg free
  2289                           
  2290                           ;main.c: 215: if (INTCON3bits.INT2IF) {
  2291  00004E  A2F0               	btfss	intcon3,1,c	;volatile
  2292  000050  D027               	goto	i2l83
  2293                           
  2294                           ;main.c: 217: int i = 0;
  2295  000052  0E00               	movlw	0
  2296  000054  6E25               	movwf	ISR@i+1,c
  2297  000056  0E00               	movlw	0
  2298  000058  6E24               	movwf	ISR@i,c
  2299                           
  2300                           ;main.c: 218: for (i = 0; i < 30; i++) {
  2301  00005A  0E00               	movlw	0
  2302  00005C  6E25               	movwf	ISR@i+1,c
  2303  00005E  0E00               	movlw	0
  2304  000060  6E24               	movwf	ISR@i,c
  2305  000062                     i2l2422:
  2306  000062  BE25               	btfsc	ISR@i+1,7,c
  2307  000064  D006               	goto	i2l78
  2308  000066  5025               	movf	ISR@i+1,w,c
  2309  000068  E111               	bnz	i2l2432
  2310  00006A  0E1E               	movlw	30
  2311  00006C  5C24               	subwf	ISR@i,w,c
  2312  00006E  B0D8               	btfsc	status,0,c
  2313  000070  D00D               	goto	i2l2432
  2314  000072                     i2l78:
  2315                           
  2316                           ;main.c: 219: if (!LATBbits.LATB2) { break ; }
  2317  000072  A48A               	btfss	3978,2,c	;volatile
  2318  000074  D00B               	goto	i2l2432
  2319                           
  2320                           ;main.c: 220: _delay(25000);
  2321  000076  0E21               	movlw	33
  2322  000078  6E15               	movwf	??_ISR& (0+255),c
  2323  00007A  0E76               	movlw	118
  2324  00007C                     i2u173_47:
  2325  00007C  2EE8               	decfsz	wreg,f,c
  2326  00007E  D7FE               	bra	i2u173_47
  2327  000080  2E15               	decfsz	??_ISR& (0+255),f,c
  2328  000082  D7FC               	bra	i2u173_47
  2329  000084  D000               	nop2	
  2330  000086  4A24               	infsnz	ISR@i,f,c
  2331  000088  2A25               	incf	ISR@i+1,f,c
  2332  00008A  D7EB               	goto	i2l2422
  2333  00008C                     i2l2432:
  2334                           
  2335                           ;main.c: 221: }
  2336                           ;main.c: 223: if (i == 30) { synchronize(); }
  2337  00008C  0E1E               	movlw	30
  2338  00008E  1824               	xorwf	ISR@i,w,c
  2339  000090  1025               	iorwf	ISR@i+1,w,c
  2340  000092  A4D8               	btfss	status,2,c
  2341  000094  D003               	goto	i2l2436
  2342  000096  EC4C  F00C         	call	_synchronize	;wreg free
  2343  00009A  D002               	goto	i2l83
  2344  00009C                     i2l2436:
  2345                           
  2346                           ;main.c: 225: else { flashlight(); }
  2347  00009C  ECE9  F00B         	call	_flashlight	;wreg free
  2348  0000A0                     i2l83:
  2349  0000A0  C023  FFF5         	movff	??_ISR+14,tablat
  2350  0000A4  C022  FFF8         	movff	??_ISR+13,tblptru
  2351  0000A8  C021  FFF7         	movff	??_ISR+12,tblptrh
  2352  0000AC  C020  FFF6         	movff	??_ISR+11,tblptrl
  2353  0000B0  C01F  FFF4         	movff	??_ISR+10,prodh
  2354  0000B4  C01E  FFF3         	movff	??_ISR+9,prodl
  2355  0000B8  C01D  FFDA         	movff	??_ISR+8,fsr2h
  2356  0000BC  C01C  FFD9         	movff	??_ISR+7,fsr2l
  2357  0000C0  C01B  FFE2         	movff	??_ISR+6,fsr1h
  2358  0000C4  C01A  FFE1         	movff	??_ISR+5,fsr1l
  2359  0000C8  C019  FFEA         	movff	??_ISR+4,fsr0h
  2360  0000CC  C018  FFE9         	movff	??_ISR+3,fsr0l
  2361  0000D0  C017  FFFB         	movff	??_ISR+2,pclatu
  2362  0000D4  C016  FFFA         	movff	??_ISR+1,pclath
  2363  0000D8  923A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2364  0000DA  0011               	retfie		f
  2365  0000DC                     __end_of_ISR:
  2366                           	opt stack 0
  2367                           pclatu	equ	0xFFB
  2368                           pclath	equ	0xFFA
  2369                           tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           prodh	equ	0xFF4
  2374                           prodl	equ	0xFF3
  2375                           intcon	equ	0xFF2
  2376                           intcon2	equ	0xFF1
  2377                           intcon3	equ	0xFF0
  2378                           indf0	equ	0xFEF
  2379                           postinc0	equ	0xFEE
  2380                           fsr0h	equ	0xFEA
  2381                           fsr0l	equ	0xFE9
  2382                           wreg	equ	0xFE8
  2383                           postdec1	equ	0xFE5
  2384                           fsr1h	equ	0xFE2
  2385                           fsr1l	equ	0xFE1
  2386                           fsr2h	equ	0xFDA
  2387                           fsr2l	equ	0xFD9
  2388                           status	equ	0xFD8
  2389                           
  2390 ;; *************** function _synchronize *****************
  2391 ;; Defined at:
  2392 ;;		line 203 in file "main.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;		None
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;		None
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  1    wreg      void 
  2399 ;; Registers used:
  2400 ;;		wreg, status,2
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;Total ram usage:        0 bytes
  2411 ;; Hardware stack levels used:    1
  2412 ;; This function calls:
  2413 ;;		Nothing
  2414 ;; This function is called by:
  2415 ;;		_ISR
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419                           	psect	text17
  2420  001898                     __ptext17:
  2421                           	opt stack 0
  2422  001898                     _synchronize:
  2423                           	opt stack 21
  2424                           
  2425                           ;main.c: 206: steps = 0;
  2426                           
  2427                           ;incstack = 0
  2428  001898  0E00               	movlw	0
  2429  00189A  6E39               	movwf	_steps+1,c
  2430  00189C  0E00               	movlw	0
  2431  00189E  6E38               	movwf	_steps,c
  2432  0018A0  0012               	return		;funcret
  2433  0018A2                     __end_of_synchronize:
  2434                           	opt stack 0
  2435                           pclatu	equ	0xFFB
  2436                           pclath	equ	0xFFA
  2437                           tblptru	equ	0xFF8
  2438                           tblptrh	equ	0xFF7
  2439                           tblptrl	equ	0xFF6
  2440                           tablat	equ	0xFF5
  2441                           prodh	equ	0xFF4
  2442                           prodl	equ	0xFF3
  2443                           intcon	equ	0xFF2
  2444                           intcon2	equ	0xFF1
  2445                           intcon3	equ	0xFF0
  2446                           indf0	equ	0xFEF
  2447                           postinc0	equ	0xFEE
  2448                           fsr0h	equ	0xFEA
  2449                           fsr0l	equ	0xFE9
  2450                           wreg	equ	0xFE8
  2451                           postdec1	equ	0xFE5
  2452                           fsr1h	equ	0xFE2
  2453                           fsr1l	equ	0xFE1
  2454                           fsr2h	equ	0xFDA
  2455                           fsr2l	equ	0xFD9
  2456                           status	equ	0xFD8
  2457                           
  2458 ;; *************** function _searched *****************
  2459 ;; Defined at:
  2460 ;;		line 177 in file "main.c"
  2461 ;; Parameters:    Size  Location     Type
  2462 ;;		None
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;  i               2   18[COMRAM] int 
  2465 ;;  time            2   16[COMRAM] int 
  2466 ;; Return value:  Size  Location     Type
  2467 ;;                  1    wreg      void 
  2468 ;; Registers used:
  2469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2470 ;; Tracked objects:
  2471 ;;		On entry : 0/0
  2472 ;;		On exit  : 0/0
  2473 ;;		Unchanged: 0/0
  2474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2476 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2477 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2478 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2479 ;;Total ram usage:        6 bytes
  2480 ;; Hardware stack levels used:    1
  2481 ;; Hardware stack levels required when called:    1
  2482 ;; This function calls:
  2483 ;;		_flashlight
  2484 ;;		i2___awdiv
  2485 ;;		i2___awmod
  2486 ;; This function is called by:
  2487 ;;		_ISR
  2488 ;; This function uses a non-reentrant model
  2489 ;;
  2490                           
  2491                           	psect	text18
  2492  00101E                     __ptext18:
  2493                           	opt stack 0
  2494  00101E                     _searched:
  2495                           	opt stack 20
  2496                           
  2497                           ;main.c: 179: int time = 50, i = 0;
  2498                           
  2499                           ;incstack = 0
  2500  00101E  0E00               	movlw	0
  2501  001020  6E12               	movwf	searched@time+1,c
  2502  001022  0E32               	movlw	50
  2503  001024  6E11               	movwf	searched@time,c
  2504  001026  0E00               	movlw	0
  2505  001028  6E14               	movwf	searched@i+1,c
  2506  00102A  0E00               	movlw	0
  2507  00102C  6E13               	movwf	searched@i,c
  2508                           
  2509                           ;main.c: 182: while (time-- > 0) {
  2510  00102E  D05A               	goto	i2l2402
  2511  001030                     i2l2380:
  2512                           
  2513                           ;main.c: 184: PR2bits.PR2 = kiwi_frequence[time%kiwi_length];
  2514  001030  C011  F001         	movff	searched@time,i2___awmod@dividend
  2515  001034  C012  F002         	movff	searched@time+1,i2___awmod@dividend+1
  2516  001038  C037  F003         	movff	_kiwi_length,i2___awmod@divisor
  2517  00103C  6A04               	clrf	i2___awmod@divisor+1,c
  2518  00103E  EC3A  F00A         	call	i2___awmod	;wreg free
  2519  001042  0E30               	movlw	low _kiwi_frequence
  2520  001044  2401               	addwf	?i2___awmod,w,c
  2521  001046  6ED9               	movwf	fsr2l,c
  2522  001048  0E00               	movlw	high _kiwi_frequence
  2523  00104A  2002               	addwfc	?i2___awmod+1,w,c
  2524  00104C  6EDA               	movwf	fsr2h,c
  2525  00104E  50DF               	movf	indf2,w,c
  2526  001050  6EBB               	movwf	4027,c	;volatile
  2527                           
  2528                           ;main.c: 185: CCPR1Lbits.CCPR1L = (unsigned char) ((kiwi_frequence[time%kiwi_length] + 1
      +                          )/2) ;
  2529  001052  C037  F003         	movff	_kiwi_length,i2___awmod@divisor
  2530  001056  6A04               	clrf	i2___awmod@divisor+1,c
  2531  001058  C011  F001         	movff	searched@time,i2___awmod@dividend
  2532  00105C  C012  F002         	movff	searched@time+1,i2___awmod@dividend+1
  2533  001060  EC3A  F00A         	call	i2___awmod	;wreg free
  2534  001064  0E30               	movlw	low _kiwi_frequence
  2535  001066  2401               	addwf	?i2___awmod,w,c
  2536  001068  6ED9               	movwf	fsr2l,c
  2537  00106A  0E00               	movlw	high _kiwi_frequence
  2538  00106C  2002               	addwfc	?i2___awmod+1,w,c
  2539  00106E  6EDA               	movwf	fsr2h,c
  2540  001070  50DF               	movf	indf2,w,c
  2541  001072  6E0F               	movwf	??_searched& (0+255),c
  2542  001074  0E01               	movlw	1
  2543  001076  240F               	addwf	??_searched,w,c
  2544  001078  6E07               	movwf	i2___awdiv@dividend,c
  2545  00107A  6A08               	clrf	i2___awdiv@dividend+1,c
  2546  00107C  0E00               	movlw	0
  2547  00107E  2208               	addwfc	i2___awdiv@dividend+1,f,c
  2548  001080  0E00               	movlw	0
  2549  001082  6E0A               	movwf	i2___awdiv@divisor+1,c
  2550  001084  0E02               	movlw	2
  2551  001086  6E09               	movwf	i2___awdiv@divisor,c
  2552  001088  EC80  F009         	call	i2___awdiv	;wreg free
  2553  00108C  5007               	movf	?i2___awdiv,w,c
  2554  00108E  6EBE               	movwf	4030,c	;volatile
  2555                           
  2556                           ;main.c: 187: flashlight();
  2557  001090  ECE9  F00B         	call	_flashlight	;wreg free
  2558                           
  2559                           ;main.c: 189: for (i = 0; i < 10; i++) {
  2560  001094  0E00               	movlw	0
  2561  001096  6E14               	movwf	searched@i+1,c
  2562  001098  0E00               	movlw	0
  2563  00109A  6E13               	movwf	searched@i,c
  2564  00109C                     i2l2386:
  2565  00109C  BE14               	btfsc	searched@i+1,7,c
  2566  00109E  D006               	goto	i2l62
  2567  0010A0  5014               	movf	searched@i+1,w,c
  2568  0010A2  E120               	bnz	i2l2402
  2569  0010A4  0E0A               	movlw	10
  2570  0010A6  5C13               	subwf	searched@i,w,c
  2571  0010A8  B0D8               	btfsc	status,0,c
  2572  0010AA  D01C               	goto	i2l2402
  2573  0010AC                     i2l62:
  2574                           
  2575                           ;main.c: 190: if (INTCON3bits.INT2IF) { time = 0; break ; }
  2576  0010AC  A2F0               	btfss	intcon3,1,c	;volatile
  2577  0010AE  D005               	goto	i2l2392
  2578  0010B0  0E00               	movlw	0
  2579  0010B2  6E12               	movwf	searched@time+1,c
  2580  0010B4  0E00               	movlw	0
  2581  0010B6  6E11               	movwf	searched@time,c
  2582  0010B8  D015               	goto	i2l2402
  2583  0010BA                     i2l2392:
  2584                           
  2585                           ;main.c: 191: _delay(25000);
  2586  0010BA  0E21               	movlw	33
  2587  0010BC  6E0F               	movwf	??_searched& (0+255),c
  2588  0010BE  0E76               	movlw	118
  2589  0010C0                     i2u174_47:
  2590  0010C0  2EE8               	decfsz	wreg,f,c
  2591  0010C2  D7FE               	bra	i2u174_47
  2592  0010C4  2E0F               	decfsz	??_searched& (0+255),f,c
  2593  0010C6  D7FC               	bra	i2u174_47
  2594  0010C8  D000               	nop2	
  2595                           
  2596                           ;main.c: 192: if (i > 5) { CCPR1Lbits.CCPR1L = 0; }
  2597  0010CA  BE14               	btfsc	searched@i+1,7,c
  2598  0010CC  D008               	goto	i2l2398
  2599  0010CE  5014               	movf	searched@i+1,w,c
  2600  0010D0  E104               	bnz	i2u157_40
  2601  0010D2  0E06               	movlw	6
  2602  0010D4  5C13               	subwf	searched@i,w,c
  2603  0010D6  A0D8               	btfss	status,0,c
  2604  0010D8  D002               	goto	i2l2398
  2605  0010DA                     i2u157_40:
  2606  0010DA  0E00               	movlw	0
  2607  0010DC  6EBE               	movwf	4030,c	;volatile
  2608  0010DE                     i2l2398:
  2609  0010DE  4A13               	infsnz	searched@i,f,c
  2610  0010E0  2A14               	incf	searched@i+1,f,c
  2611  0010E2  D7DC               	goto	i2l2386
  2612  0010E4                     i2l2402:
  2613  0010E4  5011               	movf	searched@time,w,c
  2614  0010E6  6E0F               	movwf	??_searched& (0+255),c
  2615  0010E8  5012               	movf	searched@time+1,w,c
  2616  0010EA  6E10               	movwf	(??_searched+1)& (0+255),c
  2617  0010EC  0E01               	movlw	1
  2618  0010EE  5E11               	subwf	searched@time,f,c
  2619  0010F0  0E00               	movlw	0
  2620  0010F2  5A12               	subwfb	searched@time+1,f,c
  2621  0010F4  BE10               	btfsc	??_searched+1,7,c
  2622  0010F6  D005               	goto	i2l2404
  2623  0010F8  5010               	movf	??_searched+1,w,c
  2624  0010FA  E19A               	bnz	i2l2380
  2625  0010FC  040F               	decf	??_searched,w,c
  2626  0010FE  B0D8               	btfsc	status,0,c
  2627  001100  D797               	goto	i2l2380
  2628  001102                     i2l2404:
  2629                           
  2630                           ;main.c: 193: }
  2631                           ;main.c: 194: }
  2632                           ;main.c: 197: CCPR1Lbits.CCPR1L = 0 ;
  2633  001102  0E00               	movlw	0
  2634  001104  6EBE               	movwf	4030,c	;volatile
  2635                           
  2636                           ;main.c: 198: LATCbits.LATC1 = 0;
  2637  001106  928B               	bcf	3979,1,c	;volatile
  2638                           
  2639                           ;main.c: 199: INTCON3bits.INT2IF = 0;
  2640  001108  92F0               	bcf	intcon3,1,c	;volatile
  2641  00110A  0012               	return		;funcret
  2642  00110C                     __end_of_searched:
  2643                           	opt stack 0
  2644                           pclatu	equ	0xFFB
  2645                           pclath	equ	0xFFA
  2646                           tblptru	equ	0xFF8
  2647                           tblptrh	equ	0xFF7
  2648                           tblptrl	equ	0xFF6
  2649                           tablat	equ	0xFF5
  2650                           prodh	equ	0xFF4
  2651                           prodl	equ	0xFF3
  2652                           intcon	equ	0xFF2
  2653                           intcon2	equ	0xFF1
  2654                           intcon3	equ	0xFF0
  2655                           indf0	equ	0xFEF
  2656                           postinc0	equ	0xFEE
  2657                           fsr0h	equ	0xFEA
  2658                           fsr0l	equ	0xFE9
  2659                           wreg	equ	0xFE8
  2660                           postdec1	equ	0xFE5
  2661                           fsr1h	equ	0xFE2
  2662                           fsr1l	equ	0xFE1
  2663                           indf2	equ	0xFDF
  2664                           fsr2h	equ	0xFDA
  2665                           fsr2l	equ	0xFD9
  2666                           status	equ	0xFD8
  2667                           
  2668 ;; *************** function _flashlight *****************
  2669 ;; Defined at:
  2670 ;;		line 157 in file "main.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;		None
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;		None
  2675 ;; Return value:  Size  Location     Type
  2676 ;;                  1    wreg      void 
  2677 ;; Registers used:
  2678 ;;		wreg, status,2, status,0
  2679 ;; Tracked objects:
  2680 ;;		On entry : 0/0
  2681 ;;		On exit  : 0/0
  2682 ;;		Unchanged: 0/0
  2683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2686 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2687 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2688 ;;Total ram usage:        1 bytes
  2689 ;; Hardware stack levels used:    1
  2690 ;; This function calls:
  2691 ;;		Nothing
  2692 ;; This function is called by:
  2693 ;;		_searched
  2694 ;;		_ISR
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698                           	psect	text19
  2699  0017D2                     __ptext19:
  2700                           	opt stack 0
  2701  0017D2                     _flashlight:
  2702                           	opt stack 20
  2703                           
  2704                           ;main.c: 159: LATCbits.LATC1 = (unsigned char) !LATCbits.LATC1;
  2705                           
  2706                           ;incstack = 0
  2707  0017D2  B28B               	btfsc	3979,1,c	;volatile
  2708  0017D4  D003               	goto	i2u43_40
  2709  0017D6  6A01               	clrf	??_flashlight& (0+255),c
  2710  0017D8  2A01               	incf	??_flashlight& (0+255),f,c
  2711  0017DA  D001               	goto	i2u44_48
  2712  0017DC                     i2u43_40:
  2713  0017DC  6A01               	clrf	??_flashlight& (0+255),c
  2714  0017DE                     i2u44_48:
  2715  0017DE  4601               	rlncf	??_flashlight,f,c
  2716  0017E0  508B               	movf	3979,w,c	;volatile
  2717  0017E2  1801               	xorwf	??_flashlight,w,c
  2718  0017E4  0BFD               	andlw	-3
  2719  0017E6  1801               	xorwf	??_flashlight,w,c
  2720  0017E8  6E8B               	movwf	3979,c	;volatile
  2721                           
  2722                           ;main.c: 161: INTCON3bits.INT1IF = 0;
  2723  0017EA  90F0               	bcf	intcon3,0,c	;volatile
  2724  0017EC  0012               	return		;funcret
  2725  0017EE                     __end_of_flashlight:
  2726                           	opt stack 0
  2727                           pclatu	equ	0xFFB
  2728                           pclath	equ	0xFFA
  2729                           tblptru	equ	0xFF8
  2730                           tblptrh	equ	0xFF7
  2731                           tblptrl	equ	0xFF6
  2732                           tablat	equ	0xFF5
  2733                           prodh	equ	0xFF4
  2734                           prodl	equ	0xFF3
  2735                           intcon	equ	0xFF2
  2736                           intcon2	equ	0xFF1
  2737                           intcon3	equ	0xFF0
  2738                           indf0	equ	0xFEF
  2739                           postinc0	equ	0xFEE
  2740                           fsr0h	equ	0xFEA
  2741                           fsr0l	equ	0xFE9
  2742                           wreg	equ	0xFE8
  2743                           postdec1	equ	0xFE5
  2744                           fsr1h	equ	0xFE2
  2745                           fsr1l	equ	0xFE1
  2746                           indf2	equ	0xFDF
  2747                           fsr2h	equ	0xFDA
  2748                           fsr2l	equ	0xFD9
  2749                           status	equ	0xFD8
  2750                           
  2751 ;; *************** function _pedometer *****************
  2752 ;; Defined at:
  2753 ;;		line 146 in file "main.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;		None
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;		None
  2758 ;; Return value:  Size  Location     Type
  2759 ;;                  1    wreg      void 
  2760 ;; Registers used:
  2761 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2762 ;; Tracked objects:
  2763 ;;		On entry : 0/0
  2764 ;;		On exit  : 0/0
  2765 ;;		Unchanged: 0/0
  2766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2771 ;;Total ram usage:        0 bytes
  2772 ;; Hardware stack levels used:    1
  2773 ;; Hardware stack levels required when called:    6
  2774 ;; This function calls:
  2775 ;;		i2_show_debug
  2776 ;; This function is called by:
  2777 ;;		_ISR
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text20
  2782  00188C                     __ptext20:
  2783                           	opt stack 0
  2784  00188C                     _pedometer:
  2785                           	opt stack 15
  2786                           
  2787                           ;main.c: 148: steps++;
  2788                           
  2789                           ;incstack = 0
  2790  00188C  4A38               	infsnz	_steps,f,c
  2791  00188E  2A39               	incf	_steps+1,f,c
  2792                           
  2793                           ;main.c: 150: INTCONbits.INT0IF = 0 ;
  2794  001890  92F2               	bcf	intcon,1,c	;volatile
  2795                           
  2796                           ;main.c: 153: show_debug();
  2797  001892  EC3E  F00C         	call	i2_show_debug	;wreg free
  2798  001896  0012               	return		;funcret
  2799  001898                     __end_of_pedometer:
  2800                           	opt stack 0
  2801                           pclatu	equ	0xFFB
  2802                           pclath	equ	0xFFA
  2803                           tblptru	equ	0xFF8
  2804                           tblptrh	equ	0xFF7
  2805                           tblptrl	equ	0xFF6
  2806                           tablat	equ	0xFF5
  2807                           prodh	equ	0xFF4
  2808                           prodl	equ	0xFF3
  2809                           intcon	equ	0xFF2
  2810                           intcon2	equ	0xFF1
  2811                           intcon3	equ	0xFF0
  2812                           indf0	equ	0xFEF
  2813                           postinc0	equ	0xFEE
  2814                           fsr0h	equ	0xFEA
  2815                           fsr0l	equ	0xFE9
  2816                           wreg	equ	0xFE8
  2817                           postdec1	equ	0xFE5
  2818                           fsr1h	equ	0xFE2
  2819                           fsr1l	equ	0xFE1
  2820                           indf2	equ	0xFDF
  2821                           fsr2h	equ	0xFDA
  2822                           fsr2l	equ	0xFD9
  2823                           status	equ	0xFD8
  2824                           
  2825 ;; *************** function i2_show_debug *****************
  2826 ;; Defined at:
  2827 ;;		line 76 in file "main.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;		None
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;		None
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  1    wreg      void 
  2834 ;; Registers used:
  2835 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2845 ;;Total ram usage:        0 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:    5
  2848 ;; This function calls:
  2849 ;;		i2_LCDWriteInt
  2850 ;; This function is called by:
  2851 ;;		_pedometer
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           	psect	text21
  2856  00187C                     __ptext21:
  2857                           	opt stack 0
  2858  00187C                     i2_show_debug:
  2859                           	opt stack 15
  2860                           
  2861                           ;main.c: 77: LCDWriteInt(0, 1, steps);
  2862                           
  2863                           ;incstack = 0
  2864  00187C  0E01               	movlw	1
  2865  00187E  6E0F               	movwf	i2LCDWriteInt@row,c
  2866  001880  C038  F010         	movff	_steps,i2LCDWriteInt@value
  2867  001884  0E00               	movlw	0
  2868  001886  ECD5  F00A         	call	i2_LCDWriteInt
  2869  00188A  0012               	return		;funcret
  2870  00188C                     __end_ofi2_show_debug:
  2871                           	opt stack 0
  2872                           pclatu	equ	0xFFB
  2873                           pclath	equ	0xFFA
  2874                           tblptru	equ	0xFF8
  2875                           tblptrh	equ	0xFF7
  2876                           tblptrl	equ	0xFF6
  2877                           tablat	equ	0xFF5
  2878                           prodh	equ	0xFF4
  2879                           prodl	equ	0xFF3
  2880                           intcon	equ	0xFF2
  2881                           intcon2	equ	0xFF1
  2882                           intcon3	equ	0xFF0
  2883                           indf0	equ	0xFEF
  2884                           postinc0	equ	0xFEE
  2885                           fsr0h	equ	0xFEA
  2886                           fsr0l	equ	0xFE9
  2887                           wreg	equ	0xFE8
  2888                           postdec1	equ	0xFE5
  2889                           fsr1h	equ	0xFE2
  2890                           fsr1l	equ	0xFE1
  2891                           indf2	equ	0xFDF
  2892                           fsr2h	equ	0xFDA
  2893                           fsr2l	equ	0xFD9
  2894                           status	equ	0xFD8
  2895                           
  2896 ;; *************** function i2_LCDWriteInt *****************
  2897 ;; Defined at:
  2898 ;;		line 229 in file "lcd.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;  column          1    wreg     unsigned char 
  2901 ;;  row             1   14[COMRAM] unsigned char 
  2902 ;;  value           1   15[COMRAM] unsigned char 
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;  column          1   19[COMRAM] unsigned char 
  2905 ;;  LCDWriteInt     3   16[COMRAM] unsigned char [3]
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  1    wreg      void 
  2908 ;; Registers used:
  2909 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2910 ;; Tracked objects:
  2911 ;;		On entry : 0/0
  2912 ;;		On exit  : 0/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2915 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2916 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;Total ram usage:        6 bytes
  2920 ;; Hardware stack levels used:    1
  2921 ;; Hardware stack levels required when called:    4
  2922 ;; This function calls:
  2923 ;;		i2_LCDGoto
  2924 ;;		i2_LCDWriteStr
  2925 ;;		i2___awdiv
  2926 ;;		i2___awmod
  2927 ;; This function is called by:
  2928 ;;		i2_show_debug
  2929 ;; This function uses a non-reentrant model
  2930 ;;
  2931                           
  2932                           	psect	text22
  2933  0015AA                     __ptext22:
  2934                           	opt stack 0
  2935  0015AA                     i2_LCDWriteInt:
  2936                           	opt stack 15
  2937                           
  2938                           ;incstack = 0
  2939                           ;i2LCDWriteInt@column stored from wreg
  2940  0015AA  6E14               	movwf	i2LCDWriteInt@column,c
  2941                           
  2942                           ;lcd.c: 230: char string[3];
  2943                           ;lcd.c: 232: string[0] = value / 10 + '0';
  2944  0015AC  C010  F007         	movff	i2LCDWriteInt@value,i2___awdiv@dividend
  2945  0015B0  6A08               	clrf	i2___awdiv@dividend+1,c
  2946  0015B2  0E00               	movlw	0
  2947  0015B4  6E0A               	movwf	i2___awdiv@divisor+1,c
  2948  0015B6  0E0A               	movlw	10
  2949  0015B8  6E09               	movwf	i2___awdiv@divisor,c
  2950  0015BA  EC80  F009         	call	i2___awdiv	;wreg free
  2951  0015BE  5007               	movf	?i2___awdiv,w,c
  2952  0015C0  0F30               	addlw	48
  2953  0015C2  6E11               	movwf	i2LCDWriteInt@string,c
  2954                           
  2955                           ;lcd.c: 233: string[1] = value % 10 + '0';
  2956  0015C4  C010  F001         	movff	i2LCDWriteInt@value,i2___awmod@dividend
  2957  0015C8  6A02               	clrf	i2___awmod@dividend+1,c
  2958  0015CA  0E00               	movlw	0
  2959  0015CC  6E04               	movwf	i2___awmod@divisor+1,c
  2960  0015CE  0E0A               	movlw	10
  2961  0015D0  6E03               	movwf	i2___awmod@divisor,c
  2962  0015D2  EC3A  F00A         	call	i2___awmod	;wreg free
  2963  0015D6  5001               	movf	?i2___awmod,w,c
  2964  0015D8  0F30               	addlw	48
  2965  0015DA  6E12               	movwf	i2LCDWriteInt@string+1,c
  2966                           
  2967                           ;lcd.c: 234: string[2] = '\0';
  2968  0015DC  0E00               	movlw	0
  2969  0015DE  6E13               	movwf	i2LCDWriteInt@string+2,c
  2970                           
  2971                           ;lcd.c: 236: LCDGoto(column, row);
  2972  0015E0  C00F  F006         	movff	i2LCDWriteInt@row,i2LCDGoto@row
  2973  0015E4  5014               	movf	i2LCDWriteInt@column,w,c
  2974  0015E6  EC61  F00B         	call	i2_LCDGoto
  2975                           
  2976                           ;lcd.c: 237: LCDWriteStr(string);
  2977  0015EA  0E11               	movlw	low i2LCDWriteInt@string
  2978  0015EC  6E07               	movwf	i2LCDWriteStr@string,c
  2979  0015EE  0E00               	movlw	high i2LCDWriteInt@string
  2980  0015F0  6E08               	movwf	i2LCDWriteStr@string+1,c
  2981  0015F2  ECC2  F009         	call	i2_LCDWriteStr	;wreg free
  2982  0015F6  0012               	return		;funcret
  2983  0015F8                     __end_ofi2_LCDWriteInt:
  2984                           	opt stack 0
  2985                           pclatu	equ	0xFFB
  2986                           pclath	equ	0xFFA
  2987                           tblptru	equ	0xFF8
  2988                           tblptrh	equ	0xFF7
  2989                           tblptrl	equ	0xFF6
  2990                           tablat	equ	0xFF5
  2991                           prodh	equ	0xFF4
  2992                           prodl	equ	0xFF3
  2993                           intcon	equ	0xFF2
  2994                           intcon2	equ	0xFF1
  2995                           intcon3	equ	0xFF0
  2996                           indf0	equ	0xFEF
  2997                           postinc0	equ	0xFEE
  2998                           fsr0h	equ	0xFEA
  2999                           fsr0l	equ	0xFE9
  3000                           wreg	equ	0xFE8
  3001                           postdec1	equ	0xFE5
  3002                           fsr1h	equ	0xFE2
  3003                           fsr1l	equ	0xFE1
  3004                           indf2	equ	0xFDF
  3005                           fsr2h	equ	0xFDA
  3006                           fsr2l	equ	0xFD9
  3007                           status	equ	0xFD8
  3008                           
  3009 ;; *************** function i2___awmod *****************
  3010 ;; Defined at:
  3011 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;  dividend        2    0[COMRAM] int 
  3014 ;;  divisor         2    2[COMRAM] int 
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;  __awmod         1    5[COMRAM] unsigned char 
  3017 ;;  __awmod         1    4[COMRAM] unsigned char 
  3018 ;; Return value:  Size  Location     Type
  3019 ;;                  2    0[COMRAM] int 
  3020 ;; Registers used:
  3021 ;;		wreg, status,2, status,0
  3022 ;; Tracked objects:
  3023 ;;		On entry : 0/0
  3024 ;;		On exit  : 0/0
  3025 ;;		Unchanged: 0/0
  3026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3027 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3028 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3030 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3031 ;;Total ram usage:        6 bytes
  3032 ;; Hardware stack levels used:    1
  3033 ;; This function calls:
  3034 ;;		Nothing
  3035 ;; This function is called by:
  3036 ;;		_searched
  3037 ;;		i2_LCDWriteInt
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           	psect	text23
  3042  001474                     __ptext23:
  3043                           	opt stack 0
  3044  001474                     i2___awmod:
  3045                           	opt stack 20
  3046                           
  3047                           ;incstack = 0
  3048  001474  0E00               	movlw	0
  3049  001476  6E06               	movwf	i2___awmod@sign,c
  3050  001478  AE02               	btfss	i2___awmod@dividend+1,7,c
  3051  00147A  D006               	goto	i2l2204
  3052  00147C  6C01               	negf	i2___awmod@dividend,c
  3053  00147E  1E02               	comf	i2___awmod@dividend+1,f,c
  3054  001480  B0D8               	btfsc	status,0,c
  3055  001482  2A02               	incf	i2___awmod@dividend+1,f,c
  3056  001484  0E01               	movlw	1
  3057  001486  6E06               	movwf	i2___awmod@sign,c
  3058  001488                     i2l2204:
  3059  001488  AE04               	btfss	i2___awmod@divisor+1,7,c
  3060  00148A  D004               	goto	i2l2208
  3061  00148C  6C03               	negf	i2___awmod@divisor,c
  3062  00148E  1E04               	comf	i2___awmod@divisor+1,f,c
  3063  001490  B0D8               	btfsc	status,0,c
  3064  001492  2A04               	incf	i2___awmod@divisor+1,f,c
  3065  001494                     i2l2208:
  3066  001494  5003               	movf	i2___awmod@divisor,w,c
  3067  001496  1004               	iorwf	i2___awmod@divisor+1,w,c
  3068  001498  B4D8               	btfsc	status,2,c
  3069  00149A  D018               	goto	i2l2224
  3070  00149C  0E01               	movlw	1
  3071  00149E  6E05               	movwf	i2___awmod@counter,c
  3072  0014A0  D004               	goto	i2l2214
  3073  0014A2                     i2l2212:
  3074  0014A2  90D8               	bcf	status,0,c
  3075  0014A4  3603               	rlcf	i2___awmod@divisor,f,c
  3076  0014A6  3604               	rlcf	i2___awmod@divisor+1,f,c
  3077  0014A8  2A05               	incf	i2___awmod@counter,f,c
  3078  0014AA                     i2l2214:
  3079  0014AA  AE04               	btfss	i2___awmod@divisor+1,7,c
  3080  0014AC  D7FA               	goto	i2l2212
  3081  0014AE                     i2l2216:
  3082  0014AE  5003               	movf	i2___awmod@divisor,w,c
  3083  0014B0  5C01               	subwf	i2___awmod@dividend,w,c
  3084  0014B2  5004               	movf	i2___awmod@divisor+1,w,c
  3085  0014B4  5802               	subwfb	i2___awmod@dividend+1,w,c
  3086  0014B6  A0D8               	btfss	status,0,c
  3087  0014B8  D004               	goto	i2l2220
  3088  0014BA  5003               	movf	i2___awmod@divisor,w,c
  3089  0014BC  5E01               	subwf	i2___awmod@dividend,f,c
  3090  0014BE  5004               	movf	i2___awmod@divisor+1,w,c
  3091  0014C0  5A02               	subwfb	i2___awmod@dividend+1,f,c
  3092  0014C2                     i2l2220:
  3093  0014C2  90D8               	bcf	status,0,c
  3094  0014C4  3204               	rrcf	i2___awmod@divisor+1,f,c
  3095  0014C6  3203               	rrcf	i2___awmod@divisor,f,c
  3096  0014C8  2E05               	decfsz	i2___awmod@counter,f,c
  3097  0014CA  D7F1               	goto	i2l2216
  3098  0014CC                     i2l2224:
  3099  0014CC  5006               	movf	i2___awmod@sign,w,c
  3100  0014CE  B4D8               	btfsc	status,2,c
  3101  0014D0  D004               	goto	i2l2228
  3102  0014D2  6C01               	negf	i2___awmod@dividend,c
  3103  0014D4  1E02               	comf	i2___awmod@dividend+1,f,c
  3104  0014D6  B0D8               	btfsc	status,0,c
  3105  0014D8  2A02               	incf	i2___awmod@dividend+1,f,c
  3106  0014DA                     i2l2228:
  3107  0014DA  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  3108  0014DE  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  3109  0014E2  0012               	return	
  3110  0014E4                     __end_ofi2___awmod:
  3111                           	opt stack 0
  3112                           pclatu	equ	0xFFB
  3113                           pclath	equ	0xFFA
  3114                           tblptru	equ	0xFF8
  3115                           tblptrh	equ	0xFF7
  3116                           tblptrl	equ	0xFF6
  3117                           tablat	equ	0xFF5
  3118                           prodh	equ	0xFF4
  3119                           prodl	equ	0xFF3
  3120                           intcon	equ	0xFF2
  3121                           intcon2	equ	0xFF1
  3122                           intcon3	equ	0xFF0
  3123                           indf0	equ	0xFEF
  3124                           postinc0	equ	0xFEE
  3125                           fsr0h	equ	0xFEA
  3126                           fsr0l	equ	0xFE9
  3127                           wreg	equ	0xFE8
  3128                           postdec1	equ	0xFE5
  3129                           fsr1h	equ	0xFE2
  3130                           fsr1l	equ	0xFE1
  3131                           indf2	equ	0xFDF
  3132                           fsr2h	equ	0xFDA
  3133                           fsr2l	equ	0xFD9
  3134                           status	equ	0xFD8
  3135                           
  3136 ;; *************** function i2___awdiv *****************
  3137 ;; Defined at:
  3138 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  3139 ;; Parameters:    Size  Location     Type
  3140 ;;  dividend        2    6[COMRAM] int 
  3141 ;;  divisor         2    8[COMRAM] int 
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;  __awdiv         2   12[COMRAM] int 
  3144 ;;  __awdiv         1   11[COMRAM] unsigned char 
  3145 ;;  __awdiv         1   10[COMRAM] unsigned char 
  3146 ;; Return value:  Size  Location     Type
  3147 ;;                  2    6[COMRAM] int 
  3148 ;; Registers used:
  3149 ;;		wreg, status,2, status,0
  3150 ;; Tracked objects:
  3151 ;;		On entry : 0/0
  3152 ;;		On exit  : 0/0
  3153 ;;		Unchanged: 0/0
  3154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3155 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3156 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3158 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;Total ram usage:        8 bytes
  3160 ;; Hardware stack levels used:    1
  3161 ;; This function calls:
  3162 ;;		Nothing
  3163 ;; This function is called by:
  3164 ;;		_searched
  3165 ;;		i2_LCDWriteInt
  3166 ;; This function uses a non-reentrant model
  3167 ;;
  3168                           
  3169                           	psect	text24
  3170  001300                     __ptext24:
  3171                           	opt stack 0
  3172  001300                     i2___awdiv:
  3173                           	opt stack 20
  3174                           
  3175                           ;incstack = 0
  3176  001300  0E00               	movlw	0
  3177  001302  6E0C               	movwf	i2___awdiv@sign,c
  3178  001304  AE0A               	btfss	i2___awdiv@divisor+1,7,c
  3179  001306  D006               	goto	i2l2160
  3180  001308  6C09               	negf	i2___awdiv@divisor,c
  3181  00130A  1E0A               	comf	i2___awdiv@divisor+1,f,c
  3182  00130C  B0D8               	btfsc	status,0,c
  3183  00130E  2A0A               	incf	i2___awdiv@divisor+1,f,c
  3184  001310  0E01               	movlw	1
  3185  001312  6E0C               	movwf	i2___awdiv@sign,c
  3186  001314                     i2l2160:
  3187  001314  AE08               	btfss	i2___awdiv@dividend+1,7,c
  3188  001316  D006               	goto	i2l2166
  3189  001318  6C07               	negf	i2___awdiv@dividend,c
  3190  00131A  1E08               	comf	i2___awdiv@dividend+1,f,c
  3191  00131C  B0D8               	btfsc	status,0,c
  3192  00131E  2A08               	incf	i2___awdiv@dividend+1,f,c
  3193  001320  0E01               	movlw	1
  3194  001322  1A0C               	xorwf	i2___awdiv@sign,f,c
  3195  001324                     i2l2166:
  3196  001324  0E00               	movlw	0
  3197  001326  6E0E               	movwf	i2___awdiv@quotient+1,c
  3198  001328  0E00               	movlw	0
  3199  00132A  6E0D               	movwf	i2___awdiv@quotient,c
  3200  00132C  5009               	movf	i2___awdiv@divisor,w,c
  3201  00132E  100A               	iorwf	i2___awdiv@divisor+1,w,c
  3202  001330  B4D8               	btfsc	status,2,c
  3203  001332  D01C               	goto	i2l2188
  3204  001334  0E01               	movlw	1
  3205  001336  6E0B               	movwf	i2___awdiv@counter,c
  3206  001338  D004               	goto	i2l2174
  3207  00133A                     i2l2172:
  3208  00133A  90D8               	bcf	status,0,c
  3209  00133C  3609               	rlcf	i2___awdiv@divisor,f,c
  3210  00133E  360A               	rlcf	i2___awdiv@divisor+1,f,c
  3211  001340  2A0B               	incf	i2___awdiv@counter,f,c
  3212  001342                     i2l2174:
  3213  001342  AE0A               	btfss	i2___awdiv@divisor+1,7,c
  3214  001344  D7FA               	goto	i2l2172
  3215  001346                     i2l2176:
  3216  001346  90D8               	bcf	status,0,c
  3217  001348  360D               	rlcf	i2___awdiv@quotient,f,c
  3218  00134A  360E               	rlcf	i2___awdiv@quotient+1,f,c
  3219  00134C  5009               	movf	i2___awdiv@divisor,w,c
  3220  00134E  5C07               	subwf	i2___awdiv@dividend,w,c
  3221  001350  500A               	movf	i2___awdiv@divisor+1,w,c
  3222  001352  5808               	subwfb	i2___awdiv@dividend+1,w,c
  3223  001354  A0D8               	btfss	status,0,c
  3224  001356  D005               	goto	i2l2184
  3225  001358  5009               	movf	i2___awdiv@divisor,w,c
  3226  00135A  5E07               	subwf	i2___awdiv@dividend,f,c
  3227  00135C  500A               	movf	i2___awdiv@divisor+1,w,c
  3228  00135E  5A08               	subwfb	i2___awdiv@dividend+1,f,c
  3229  001360  800D               	bsf	i2___awdiv@quotient,0,c
  3230  001362                     i2l2184:
  3231  001362  90D8               	bcf	status,0,c
  3232  001364  320A               	rrcf	i2___awdiv@divisor+1,f,c
  3233  001366  3209               	rrcf	i2___awdiv@divisor,f,c
  3234  001368  2E0B               	decfsz	i2___awdiv@counter,f,c
  3235  00136A  D7ED               	goto	i2l2176
  3236  00136C                     i2l2188:
  3237  00136C  500C               	movf	i2___awdiv@sign,w,c
  3238  00136E  B4D8               	btfsc	status,2,c
  3239  001370  D004               	goto	i2l2192
  3240  001372  6C0D               	negf	i2___awdiv@quotient,c
  3241  001374  1E0E               	comf	i2___awdiv@quotient+1,f,c
  3242  001376  B0D8               	btfsc	status,0,c
  3243  001378  2A0E               	incf	i2___awdiv@quotient+1,f,c
  3244  00137A                     i2l2192:
  3245  00137A  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
  3246  00137E  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  3247  001382  0012               	return	
  3248  001384                     __end_ofi2___awdiv:
  3249                           	opt stack 0
  3250                           pclatu	equ	0xFFB
  3251                           pclath	equ	0xFFA
  3252                           tblptru	equ	0xFF8
  3253                           tblptrh	equ	0xFF7
  3254                           tblptrl	equ	0xFF6
  3255                           tablat	equ	0xFF5
  3256                           prodh	equ	0xFF4
  3257                           prodl	equ	0xFF3
  3258                           intcon	equ	0xFF2
  3259                           intcon2	equ	0xFF1
  3260                           intcon3	equ	0xFF0
  3261                           indf0	equ	0xFEF
  3262                           postinc0	equ	0xFEE
  3263                           fsr0h	equ	0xFEA
  3264                           fsr0l	equ	0xFE9
  3265                           wreg	equ	0xFE8
  3266                           postdec1	equ	0xFE5
  3267                           fsr1h	equ	0xFE2
  3268                           fsr1l	equ	0xFE1
  3269                           indf2	equ	0xFDF
  3270                           fsr2h	equ	0xFDA
  3271                           fsr2l	equ	0xFD9
  3272                           status	equ	0xFD8
  3273                           
  3274 ;; *************** function i2_LCDWriteStr *****************
  3275 ;; Defined at:
  3276 ;;		line 193 in file "lcd.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;  string          2    6[COMRAM] PTR const unsigned char 
  3279 ;;		 -> LCDWriteInt@string(3), LCDWriteFloat@string(5), LCDWriteHexa@string(3), STR_1(11), 
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;  LCDWriteStr     1   10[COMRAM] unsigned char 
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  1    wreg      void 
  3284 ;; Registers used:
  3285 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3291 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3294 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3295 ;;Total ram usage:        5 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; Hardware stack levels required when called:    3
  3298 ;; This function calls:
  3299 ;;		i2_LCDPutChar
  3300 ;; This function is called by:
  3301 ;;		i2_LCDWriteInt
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           	psect	text25
  3306  001384                     __ptext25:
  3307                           	opt stack 0
  3308  001384                     i2_LCDWriteStr:
  3309                           	opt stack 15
  3310                           
  3311                           ;lcd.c: 195: UINT8_T i = 0;
  3312                           
  3313                           ;incstack = 0
  3314  001384  0E00               	movlw	0
  3315  001386  6E0B               	movwf	i2LCDWriteStr@i,c
  3316                           
  3317                           ;lcd.c: 197: while (string[i])
  3318  001388  D01E               	goto	i2l2150
  3319  00138A                     i2l2146:
  3320                           
  3321                           ;lcd.c: 198: LCDPutChar(string[i++]);
  3322  00138A  500B               	movf	i2LCDWriteStr@i,w,c
  3323  00138C  0D01               	mullw	1
  3324  00138E  C007  F009         	movff	i2LCDWriteStr@string,??i2_LCDWriteStr
  3325  001392  C008  F00A         	movff	i2LCDWriteStr@string+1,??i2_LCDWriteStr+1
  3326  001396  50F3               	movf	prodl,w,c
  3327  001398  2609               	addwf	??i2_LCDWriteStr,f,c
  3328  00139A  50F4               	movf	prodh,w,c
  3329  00139C  220A               	addwfc	??i2_LCDWriteStr+1,f,c
  3330  00139E  C009  FFF6         	movff	??i2_LCDWriteStr,tblptrl
  3331  0013A2  C00A  FFF7         	movff	??i2_LCDWriteStr+1,tblptrh
  3332  0013A6  0E00               	movlw	low (__smallconst shr (0+16))
  3333  0013A8  6EF8               	movwf	tblptru,c
  3334  0013AA  0E0F               	movlw	(high __ramtop+-1)
  3335  0013AC  64F7               	cpfsgt	tblptrh,c
  3336  0013AE  D003               	bra	i2u140_47
  3337  0013B0  0008               	tblrd		*
  3338  0013B2  50F5               	movf	tablat,w,c
  3339  0013B4  D005               	bra	i2u140_40
  3340  0013B6                     i2u140_47:
  3341  0013B6  CFF6 FFE9          	movff	tblptrl,fsr0l
  3342  0013BA  CFF7 FFEA          	movff	tblptrh,fsr0h
  3343  0013BE  50EF               	movf	indf0,w,c
  3344  0013C0                     i2u140_40:
  3345  0013C0  EC2C  F00C         	call	i2_LCDPutChar
  3346  0013C4  2A0B               	incf	i2LCDWriteStr@i,f,c
  3347  0013C6                     i2l2150:
  3348  0013C6  500B               	movf	i2LCDWriteStr@i,w,c
  3349  0013C8  0D01               	mullw	1
  3350  0013CA  C007  F009         	movff	i2LCDWriteStr@string,??i2_LCDWriteStr
  3351  0013CE  C008  F00A         	movff	i2LCDWriteStr@string+1,??i2_LCDWriteStr+1
  3352  0013D2  50F3               	movf	prodl,w,c
  3353  0013D4  2609               	addwf	??i2_LCDWriteStr,f,c
  3354  0013D6  50F4               	movf	prodh,w,c
  3355  0013D8  220A               	addwfc	??i2_LCDWriteStr+1,f,c
  3356  0013DA  C009  FFF6         	movff	??i2_LCDWriteStr,tblptrl
  3357  0013DE  C00A  FFF7         	movff	??i2_LCDWriteStr+1,tblptrh
  3358  0013E2  0E00               	movlw	low (__smallconst shr (0+16))
  3359  0013E4  6EF8               	movwf	tblptru,c
  3360  0013E6  0E0F               	movlw	(high __ramtop+-1)
  3361  0013E8  64F7               	cpfsgt	tblptrh,c
  3362  0013EA  D003               	bra	i2u141_47
  3363  0013EC  0008               	tblrd		*
  3364  0013EE  50F5               	movf	tablat,w,c
  3365  0013F0  D005               	bra	i2u141_40
  3366  0013F2                     i2u141_47:
  3367  0013F2  CFF6 FFE9          	movff	tblptrl,fsr0l
  3368  0013F6  CFF7 FFEA          	movff	tblptrh,fsr0h
  3369  0013FA  50EF               	movf	indf0,w,c
  3370  0013FC                     i2u141_40:
  3371  0013FC  0900               	iorlw	0
  3372  0013FE  B4D8               	btfsc	status,2,c
  3373  001400  0012               	return	
  3374  001402  D7C3               	goto	i2l2146
  3375  001404                     __end_ofi2_LCDWriteStr:
  3376                           	opt stack 0
  3377                           pclatu	equ	0xFFB
  3378                           pclath	equ	0xFFA
  3379                           tblptru	equ	0xFF8
  3380                           tblptrh	equ	0xFF7
  3381                           tblptrl	equ	0xFF6
  3382                           tablat	equ	0xFF5
  3383                           prodh	equ	0xFF4
  3384                           prodl	equ	0xFF3
  3385                           intcon	equ	0xFF2
  3386                           intcon2	equ	0xFF1
  3387                           intcon3	equ	0xFF0
  3388                           indf0	equ	0xFEF
  3389                           postinc0	equ	0xFEE
  3390                           fsr0h	equ	0xFEA
  3391                           fsr0l	equ	0xFE9
  3392                           wreg	equ	0xFE8
  3393                           postdec1	equ	0xFE5
  3394                           fsr1h	equ	0xFE2
  3395                           fsr1l	equ	0xFE1
  3396                           indf2	equ	0xFDF
  3397                           fsr2h	equ	0xFDA
  3398                           fsr2l	equ	0xFD9
  3399                           status	equ	0xFD8
  3400                           
  3401 ;; *************** function i2_LCDPutChar *****************
  3402 ;; Defined at:
  3403 ;;		line 180 in file "lcd.c"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;  data            1    wreg     unsigned char 
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;  data            1    5[COMRAM] unsigned char 
  3408 ;; Return value:  Size  Location     Type
  3409 ;;                  1    wreg      void 
  3410 ;; Registers used:
  3411 ;;		wreg, status,2, status,0, cstack
  3412 ;; Tracked objects:
  3413 ;;		On entry : 0/0
  3414 ;;		On exit  : 0/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3418 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3420 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3421 ;;Total ram usage:        1 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; Hardware stack levels required when called:    2
  3424 ;; This function calls:
  3425 ;;		i2_WaitLCD
  3426 ;;		i2_WriteByte
  3427 ;; This function is called by:
  3428 ;;		i2_LCDWriteStr
  3429 ;; This function uses a non-reentrant model
  3430 ;;
  3431                           
  3432                           	psect	text26
  3433  001858                     __ptext26:
  3434                           	opt stack 0
  3435  001858                     i2_LCDPutChar:
  3436                           	opt stack 15
  3437                           
  3438                           ;incstack = 0
  3439                           ;i2LCDPutChar@data stored from wreg
  3440  001858  6E06               	movwf	i2LCDPutChar@data,c
  3441                           
  3442                           ;lcd.c: 182: WriteByte(0, data);
  3443  00185A  C006  F004         	movff	i2LCDPutChar@data,i2WriteByte@data
  3444  00185E  0E00               	movlw	0
  3445  001860  EC04  F00C         	call	i2_WriteByte
  3446                           
  3447                           ;lcd.c: 183: WaitLCD();
  3448  001864  EC35  F00C         	call	i2_WaitLCD	;wreg free
  3449  001868  0012               	return		;funcret
  3450  00186A                     __end_ofi2_LCDPutChar:
  3451                           	opt stack 0
  3452                           pclatu	equ	0xFFB
  3453                           pclath	equ	0xFFA
  3454                           tblptru	equ	0xFF8
  3455                           tblptrh	equ	0xFF7
  3456                           tblptrl	equ	0xFF6
  3457                           tablat	equ	0xFF5
  3458                           prodh	equ	0xFF4
  3459                           prodl	equ	0xFF3
  3460                           intcon	equ	0xFF2
  3461                           intcon2	equ	0xFF1
  3462                           intcon3	equ	0xFF0
  3463                           indf0	equ	0xFEF
  3464                           postinc0	equ	0xFEE
  3465                           fsr0h	equ	0xFEA
  3466                           fsr0l	equ	0xFE9
  3467                           wreg	equ	0xFE8
  3468                           postdec1	equ	0xFE5
  3469                           fsr1h	equ	0xFE2
  3470                           fsr1l	equ	0xFE1
  3471                           indf2	equ	0xFDF
  3472                           fsr2h	equ	0xFDA
  3473                           fsr2l	equ	0xFD9
  3474                           status	equ	0xFD8
  3475                           
  3476 ;; *************** function i2_LCDGoto *****************
  3477 ;; Defined at:
  3478 ;;		line 171 in file "lcd.c"
  3479 ;; Parameters:    Size  Location     Type
  3480 ;;  column          1    wreg     unsigned char 
  3481 ;;  row             1    5[COMRAM] unsigned char 
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;  column          1   10[COMRAM] unsigned char 
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  1    wreg      void 
  3486 ;; Registers used:
  3487 ;;		wreg, status,2, status,0, cstack
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 0/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3493 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3494 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3495 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;Total ram usage:        6 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; Hardware stack levels required when called:    2
  3500 ;; This function calls:
  3501 ;;		i2_WaitLCD
  3502 ;;		i2_WriteByte
  3503 ;; This function is called by:
  3504 ;;		i2_LCDWriteInt
  3505 ;; This function uses a non-reentrant model
  3506 ;;
  3507                           
  3508                           	psect	text27
  3509  0016C2                     __ptext27:
  3510                           	opt stack 0
  3511  0016C2                     i2_LCDGoto:
  3512                           	opt stack 16
  3513                           
  3514                           ;incstack = 0
  3515                           ;i2LCDGoto@column stored from wreg
  3516  0016C2  6E0B               	movwf	i2LCDGoto@column,c
  3517                           
  3518                           ;lcd.c: 173: if ((row > (2 - 1)) || (column > (16 - 1)))
  3519  0016C4  0E02               	movlw	2
  3520  0016C6  6006               	cpfslt	i2LCDGoto@row,c
  3521  0016C8  0012               	return	
  3522  0016CA  0E0F               	movlw	15
  3523  0016CC  640B               	cpfsgt	i2LCDGoto@column,c
  3524  0016CE  D001               	goto	i2l2134
  3525  0016D0  0012               	return	
  3526  0016D2                     i2l2134:
  3527                           
  3528                           ;lcd.c: 176: WriteByte(1, (row == 1) ? (0xC0 | column) : (0x80 | column));
  3529  0016D2  0406               	decf	i2LCDGoto@row,w,c
  3530  0016D4  B4D8               	btfsc	status,2,c
  3531  0016D6  D002               	goto	i2l2138
  3532  0016D8  0E80               	movlw	128
  3533  0016DA  D001               	goto	L2
  3534  0016DC                     i2l2138:
  3535  0016DC  0EC0               	movlw	192
  3536  0016DE                     L2:
  3537  0016DE  C00B  F007         	movff	i2LCDGoto@column,??i2_LCDGoto
  3538  0016E2  6A08               	clrf	(??i2_LCDGoto+1)& (0+255),c
  3539  0016E4  1007               	iorwf	??i2_LCDGoto,w,c
  3540  0016E6  6E09               	movwf	i2_LCDGoto$669,c
  3541  0016E8  5008               	movf	??i2_LCDGoto+1,w,c
  3542  0016EA  6E0A               	movwf	i2_LCDGoto$669+1,c
  3543  0016EC  C009  F004         	movff	i2_LCDGoto$669,i2WriteByte@data
  3544  0016F0  0E01               	movlw	1
  3545  0016F2  EC04  F00C         	call	i2_WriteByte
  3546                           
  3547                           ;lcd.c: 177: WaitLCD();
  3548  0016F6  EC35  F00C         	call	i2_WaitLCD	;wreg free
  3549  0016FA  0012               	return		;funcret
  3550  0016FC                     __end_ofi2_LCDGoto:
  3551                           	opt stack 0
  3552                           pclatu	equ	0xFFB
  3553                           pclath	equ	0xFFA
  3554                           tblptru	equ	0xFF8
  3555                           tblptrh	equ	0xFF7
  3556                           tblptrl	equ	0xFF6
  3557                           tablat	equ	0xFF5
  3558                           prodh	equ	0xFF4
  3559                           prodl	equ	0xFF3
  3560                           intcon	equ	0xFF2
  3561                           intcon2	equ	0xFF1
  3562                           intcon3	equ	0xFF0
  3563                           indf0	equ	0xFEF
  3564                           postinc0	equ	0xFEE
  3565                           fsr0h	equ	0xFEA
  3566                           fsr0l	equ	0xFE9
  3567                           wreg	equ	0xFE8
  3568                           postdec1	equ	0xFE5
  3569                           fsr1h	equ	0xFE2
  3570                           fsr1l	equ	0xFE1
  3571                           indf2	equ	0xFDF
  3572                           fsr2h	equ	0xFDA
  3573                           fsr2l	equ	0xFD9
  3574                           status	equ	0xFD8
  3575                           
  3576 ;; *************** function i2_WriteByte *****************
  3577 ;; Defined at:
  3578 ;;		line 83 in file "lcd.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;  cmd             1    wreg     unsigned char 
  3581 ;;  data            1    3[COMRAM] unsigned char 
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;  cmd             1    4[COMRAM] unsigned char 
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  1    wreg      void 
  3586 ;; Registers used:
  3587 ;;		wreg, status,2, status,0, cstack
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3593 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3594 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3596 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3597 ;;Total ram usage:        2 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; Hardware stack levels required when called:    1
  3600 ;; This function calls:
  3601 ;;		i2_WriteNibble
  3602 ;; This function is called by:
  3603 ;;		i2_LCDGoto
  3604 ;;		i2_LCDPutChar
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           	psect	text28
  3609  001808                     __ptext28:
  3610                           	opt stack 0
  3611  001808                     i2_WriteByte:
  3612                           	opt stack 15
  3613                           
  3614                           ;incstack = 0
  3615                           ;i2WriteByte@cmd stored from wreg
  3616  001808  6E05               	movwf	i2WriteByte@cmd,c
  3617                           
  3618                           ;lcd.c: 85: WriteNibble(cmd, data >> 4);
  3619  00180A  3804               	swapf	i2WriteByte@data,w,c
  3620  00180C  0B0F               	andlw	15
  3621  00180E  6E01               	movwf	i2WriteNibble@data,c
  3622  001810  5005               	movf	i2WriteByte@cmd,w,c
  3623  001812  EC1E  F00B         	call	i2_WriteNibble
  3624                           
  3625                           ;lcd.c: 86: WriteNibble(cmd, data);
  3626  001816  C004  F001         	movff	i2WriteByte@data,i2WriteNibble@data
  3627  00181A  5005               	movf	i2WriteByte@cmd,w,c
  3628  00181C  EC1E  F00B         	call	i2_WriteNibble
  3629  001820  0012               	return		;funcret
  3630  001822                     __end_ofi2_WriteByte:
  3631                           	opt stack 0
  3632                           pclatu	equ	0xFFB
  3633                           pclath	equ	0xFFA
  3634                           tblptru	equ	0xFF8
  3635                           tblptrh	equ	0xFF7
  3636                           tblptrl	equ	0xFF6
  3637                           tablat	equ	0xFF5
  3638                           prodh	equ	0xFF4
  3639                           prodl	equ	0xFF3
  3640                           intcon	equ	0xFF2
  3641                           intcon2	equ	0xFF1
  3642                           intcon3	equ	0xFF0
  3643                           indf0	equ	0xFEF
  3644                           postinc0	equ	0xFEE
  3645                           fsr0h	equ	0xFEA
  3646                           fsr0l	equ	0xFE9
  3647                           wreg	equ	0xFE8
  3648                           postdec1	equ	0xFE5
  3649                           fsr1h	equ	0xFE2
  3650                           fsr1l	equ	0xFE1
  3651                           indf2	equ	0xFDF
  3652                           fsr2h	equ	0xFDA
  3653                           fsr2l	equ	0xFD9
  3654                           status	equ	0xFD8
  3655                           
  3656 ;; *************** function i2_WriteNibble *****************
  3657 ;; Defined at:
  3658 ;;		line 66 in file "lcd.c"
  3659 ;; Parameters:    Size  Location     Type
  3660 ;;  cmd             1    wreg     unsigned char 
  3661 ;;  data            1    0[COMRAM] unsigned char 
  3662 ;; Auto vars:     Size  Location     Type
  3663 ;;  cmd             1    2[COMRAM] unsigned char 
  3664 ;; Return value:  Size  Location     Type
  3665 ;;                  1    wreg      void 
  3666 ;; Registers used:
  3667 ;;		wreg, status,2, status,0
  3668 ;; Tracked objects:
  3669 ;;		On entry : 0/0
  3670 ;;		On exit  : 0/0
  3671 ;;		Unchanged: 0/0
  3672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3673 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3674 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3675 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3676 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3677 ;;Total ram usage:        3 bytes
  3678 ;; Hardware stack levels used:    1
  3679 ;; This function calls:
  3680 ;;		Nothing
  3681 ;; This function is called by:
  3682 ;;		i2_WriteByte
  3683 ;; This function uses a non-reentrant model
  3684 ;;
  3685                           
  3686                           	psect	text29
  3687  00163C                     __ptext29:
  3688                           	opt stack 0
  3689  00163C                     i2_WriteNibble:
  3690                           	opt stack 15
  3691                           
  3692                           ;incstack = 0
  3693                           ;i2WriteNibble@cmd stored from wreg
  3694  00163C  6E03               	movwf	i2WriteNibble@cmd,c
  3695                           
  3696                           ;lcd.c: 68: LATDbits.LATD4 = (cmd ? 0 : 1);
  3697  00163E  5003               	movf	i2WriteNibble@cmd,w,c
  3698  001640  A4D8               	btfss	status,2,c
  3699  001642  D003               	goto	i2u116_40
  3700  001644  6A02               	clrf	??i2_WriteNibble& (0+255),c
  3701  001646  2A02               	incf	??i2_WriteNibble& (0+255),f,c
  3702  001648  D001               	goto	i2u117_48
  3703  00164A                     i2u116_40:
  3704  00164A  6A02               	clrf	??i2_WriteNibble& (0+255),c
  3705  00164C                     i2u117_48:
  3706  00164C  3A02               	swapf	??i2_WriteNibble,f,c
  3707  00164E  508C               	movf	3980,w,c	;volatile
  3708  001650  1802               	xorwf	??i2_WriteNibble,w,c
  3709  001652  0BEF               	andlw	-17
  3710  001654  1802               	xorwf	??i2_WriteNibble,w,c
  3711  001656  6E8C               	movwf	3980,c	;volatile
  3712                           
  3713                           ;lcd.c: 69: LATDbits.LATD5 = 0;
  3714  001658  9A8C               	bcf	3980,5,c	;volatile
  3715                           
  3716                           ;lcd.c: 70: LATDbits.LATD6 = 1;
  3717  00165A  8C8C               	bsf	3980,6,c	;volatile
  3718                           
  3719                           ;lcd.c: 72: LATDbits.LATD0 = LATDbits.LATD1 = LATDbits.LATD2 = LATDbits.LATD3 = 0;
  3720  00165C  968C               	bcf	3980,3,c	;volatile
  3721  00165E  948C               	bcf	3980,2,c	;volatile
  3722  001660  928C               	bcf	3980,1,c	;volatile
  3723  001662  908C               	bcf	3980,0,c	;volatile
  3724                           
  3725                           ;lcd.c: 73: __nop();
  3726  001664  F000               	nop	
  3727                           
  3728                           ;lcd.c: 74: __nop();
  3729  001666  F000               	nop	
  3730                           
  3731                           ;lcd.c: 76: LATD = (LATD & 0xF0) | (data & 0x0F);
  3732  001668  C001  F002         	movff	i2WriteNibble@data,??i2_WriteNibble
  3733  00166C  0E0F               	movlw	15
  3734  00166E  1602               	andwf	??i2_WriteNibble,f,c
  3735  001670  508C               	movf	3980,w,c	;volatile
  3736  001672  0BF0               	andlw	240
  3737  001674  1002               	iorwf	??i2_WriteNibble,w,c
  3738  001676  6E8C               	movwf	3980,c	;volatile
  3739                           
  3740                           ;lcd.c: 77: __nop();
  3741  001678  F000               	nop	
  3742                           
  3743                           ;lcd.c: 78: __nop();
  3744  00167A  F000               	nop	
  3745                           
  3746                           ;lcd.c: 80: LATDbits.LATD6 = 0;
  3747  00167C  9C8C               	bcf	3980,6,c	;volatile
  3748  00167E  0012               	return		;funcret
  3749  001680                     __end_ofi2_WriteNibble:
  3750                           	opt stack 0
  3751                           pclatu	equ	0xFFB
  3752                           pclath	equ	0xFFA
  3753                           tblptru	equ	0xFF8
  3754                           tblptrh	equ	0xFF7
  3755                           tblptrl	equ	0xFF6
  3756                           tablat	equ	0xFF5
  3757                           prodh	equ	0xFF4
  3758                           prodl	equ	0xFF3
  3759                           intcon	equ	0xFF2
  3760                           intcon2	equ	0xFF1
  3761                           intcon3	equ	0xFF0
  3762                           indf0	equ	0xFEF
  3763                           postinc0	equ	0xFEE
  3764                           fsr0h	equ	0xFEA
  3765                           fsr0l	equ	0xFE9
  3766                           wreg	equ	0xFE8
  3767                           postdec1	equ	0xFE5
  3768                           fsr1h	equ	0xFE2
  3769                           fsr1l	equ	0xFE1
  3770                           indf2	equ	0xFDF
  3771                           fsr2h	equ	0xFDA
  3772                           fsr2l	equ	0xFD9
  3773                           status	equ	0xFD8
  3774                           
  3775 ;; *************** function i2_WaitLCD *****************
  3776 ;; Defined at:
  3777 ;;		line 52 in file "lcd.c"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;		None
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;  WaitLCD         1    1[COMRAM] unsigned char 
  3782 ;; Return value:  Size  Location     Type
  3783 ;;                  1    wreg      void 
  3784 ;; Registers used:
  3785 ;;		wreg, status,2, status,0, cstack
  3786 ;; Tracked objects:
  3787 ;;		On entry : 0/0
  3788 ;;		On exit  : 0/0
  3789 ;;		Unchanged: 0/0
  3790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3792 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3794 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3795 ;;Total ram usage:        1 bytes
  3796 ;; Hardware stack levels used:    1
  3797 ;; Hardware stack levels required when called:    1
  3798 ;; This function calls:
  3799 ;;		i2_ReadByte
  3800 ;; This function is called by:
  3801 ;;		i2_LCDGoto
  3802 ;;		i2_LCDPutChar
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           	psect	text30
  3807  00186A                     __ptext30:
  3808                           	opt stack 0
  3809  00186A                     i2_WaitLCD:
  3810                           	opt stack 15
  3811                           
  3812                           ;lcd.c: 54: UINT8_T status;
  3813                           ;lcd.c: 56: LATDbits.LATD4 = 0;
  3814                           
  3815                           ;incstack = 0
  3816  00186A  988C               	bcf	3980,4,c	;volatile
  3817                           
  3818                           ;lcd.c: 57: LATDbits.LATD5 = 1;
  3819  00186C  8A8C               	bsf	3980,5,c	;volatile
  3820  00186E                     i2l2012:
  3821                           
  3822                           ;lcd.c: 60: status = ReadByte();
  3823  00186E  ECAF  F00B         	call	i2_ReadByte	;wreg free
  3824  001872  6E02               	movwf	i2WaitLCD@status,c
  3825                           
  3826                           ;lcd.c: 61: } while (status & 0x80);
  3827  001874  BE02               	btfsc	i2WaitLCD@status,7,c
  3828  001876  D7FB               	goto	i2l2012
  3829                           
  3830                           ;lcd.c: 63: LATDbits.LATD5 = 0;
  3831  001878  9A8C               	bcf	3980,5,c	;volatile
  3832  00187A  0012               	return		;funcret
  3833  00187C                     __end_ofi2_WaitLCD:
  3834                           	opt stack 0
  3835                           pclatu	equ	0xFFB
  3836                           pclath	equ	0xFFA
  3837                           tblptru	equ	0xFF8
  3838                           tblptrh	equ	0xFF7
  3839                           tblptrl	equ	0xFF6
  3840                           tablat	equ	0xFF5
  3841                           prodh	equ	0xFF4
  3842                           prodl	equ	0xFF3
  3843                           intcon	equ	0xFF2
  3844                           intcon2	equ	0xFF1
  3845                           intcon3	equ	0xFF0
  3846                           indf0	equ	0xFEF
  3847                           postinc0	equ	0xFEE
  3848                           fsr0h	equ	0xFEA
  3849                           fsr0l	equ	0xFE9
  3850                           wreg	equ	0xFE8
  3851                           postdec1	equ	0xFE5
  3852                           fsr1h	equ	0xFE2
  3853                           fsr1l	equ	0xFE1
  3854                           indf2	equ	0xFDF
  3855                           fsr2h	equ	0xFDA
  3856                           fsr2l	equ	0xFD9
  3857                           status	equ	0xFD8
  3858                           
  3859 ;; *************** function i2_ReadByte *****************
  3860 ;; Defined at:
  3861 ;;		line 21 in file "lcd.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;		None
  3864 ;; Auto vars:     Size  Location     Type
  3865 ;;  ReadByte        1    0[COMRAM] unsigned char 
  3866 ;; Return value:  Size  Location     Type
  3867 ;;                  1    wreg      unsigned char 
  3868 ;; Registers used:
  3869 ;;		wreg, status,2, status,0
  3870 ;; Tracked objects:
  3871 ;;		On entry : 0/0
  3872 ;;		On exit  : 0/0
  3873 ;;		Unchanged: 0/0
  3874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3876 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3878 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3879 ;;Total ram usage:        1 bytes
  3880 ;; Hardware stack levels used:    1
  3881 ;; This function calls:
  3882 ;;		Nothing
  3883 ;; This function is called by:
  3884 ;;		i2_WaitLCD
  3885 ;; This function uses a non-reentrant model
  3886 ;;
  3887                           
  3888                           	psect	text31
  3889  00175E                     __ptext31:
  3890                           	opt stack 0
  3891  00175E                     i2_ReadByte:
  3892                           	opt stack 15
  3893                           
  3894                           ;lcd.c: 23: UINT8_T status;
  3895                           ;lcd.c: 25: TRISDbits.TRISD0 = 1;
  3896                           
  3897                           ;incstack = 0
  3898  00175E  8095               	bsf	3989,0,c	;volatile
  3899                           
  3900                           ;lcd.c: 26: TRISDbits.TRISD1 = 1;
  3901  001760  8295               	bsf	3989,1,c	;volatile
  3902                           
  3903                           ;lcd.c: 27: TRISDbits.TRISD2 = 1;
  3904  001762  8495               	bsf	3989,2,c	;volatile
  3905                           
  3906                           ;lcd.c: 28: TRISDbits.TRISD3 = 1;
  3907  001764  8695               	bsf	3989,3,c	;volatile
  3908                           
  3909                           ;lcd.c: 30: LATDbits.LATD6 = 1;
  3910  001766  8C8C               	bsf	3980,6,c	;volatile
  3911                           
  3912                           ;lcd.c: 31: __nop();
  3913  001768  F000               	nop	
  3914                           
  3915                           ;lcd.c: 32: __nop();
  3916  00176A  F000               	nop	
  3917                           
  3918                           ;lcd.c: 34: status = PORTD << 4;
  3919  00176C  3883               	swapf	3971,w,c	;volatile
  3920  00176E  0BF0               	andlw	240
  3921  001770  6E01               	movwf	i2ReadByte@status,c
  3922                           
  3923                           ;lcd.c: 35: LATDbits.LATD6 = 0;
  3924  001772  9C8C               	bcf	3980,6,c	;volatile
  3925                           
  3926                           ;lcd.c: 37: LATDbits.LATD6 = 1;
  3927  001774  8C8C               	bsf	3980,6,c	;volatile
  3928                           
  3929                           ;lcd.c: 38: __nop();
  3930  001776  F000               	nop	
  3931                           
  3932                           ;lcd.c: 39: __nop();
  3933  001778  F000               	nop	
  3934                           
  3935                           ;lcd.c: 41: status |= PORTD & 0x0F;
  3936  00177A  5083               	movf	3971,w,c	;volatile
  3937  00177C  0B0F               	andlw	15
  3938  00177E  1201               	iorwf	i2ReadByte@status,f,c
  3939                           
  3940                           ;lcd.c: 42: LATDbits.LATD6 = 0;
  3941  001780  9C8C               	bcf	3980,6,c	;volatile
  3942                           
  3943                           ;lcd.c: 44: TRISDbits.TRISD0 = 0;
  3944  001782  9095               	bcf	3989,0,c	;volatile
  3945                           
  3946                           ;lcd.c: 45: TRISDbits.TRISD1 = 0;
  3947  001784  9295               	bcf	3989,1,c	;volatile
  3948                           
  3949                           ;lcd.c: 46: TRISDbits.TRISD2 = 0;
  3950  001786  9495               	bcf	3989,2,c	;volatile
  3951                           
  3952                           ;lcd.c: 47: TRISDbits.TRISD3 = 0;
  3953  001788  9695               	bcf	3989,3,c	;volatile
  3954                           
  3955                           ;lcd.c: 49: return(status);
  3956  00178A  5001               	movf	i2ReadByte@status,w,c
  3957  00178C  0012               	return	
  3958  00178E                     __end_ofi2_ReadByte:
  3959                           	opt stack 0
  3960                           pclatu	equ	0xFFB
  3961                           pclath	equ	0xFFA
  3962                           tblptru	equ	0xFF8
  3963                           tblptrh	equ	0xFF7
  3964                           tblptrl	equ	0xFF6
  3965                           tablat	equ	0xFF5
  3966                           prodh	equ	0xFF4
  3967                           prodl	equ	0xFF3
  3968                           intcon	equ	0xFF2
  3969                           intcon2	equ	0xFF1
  3970                           intcon3	equ	0xFF0
  3971                           indf0	equ	0xFEF
  3972                           postinc0	equ	0xFEE
  3973                           fsr0h	equ	0xFEA
  3974                           fsr0l	equ	0xFE9
  3975                           wreg	equ	0xFE8
  3976                           postdec1	equ	0xFE5
  3977                           fsr1h	equ	0xFE2
  3978                           fsr1l	equ	0xFE1
  3979                           indf2	equ	0xFDF
  3980                           fsr2h	equ	0xFDA
  3981                           fsr2l	equ	0xFD9
  3982                           status	equ	0xFD8
  3983                           pclatu	equ	0xFFB
  3984                           pclath	equ	0xFFA
  3985                           tblptru	equ	0xFF8
  3986                           tblptrh	equ	0xFF7
  3987                           tblptrl	equ	0xFF6
  3988                           tablat	equ	0xFF5
  3989                           prodh	equ	0xFF4
  3990                           prodl	equ	0xFF3
  3991                           intcon	equ	0xFF2
  3992                           intcon2	equ	0xFF1
  3993                           intcon3	equ	0xFF0
  3994                           indf0	equ	0xFEF
  3995                           postinc0	equ	0xFEE
  3996                           fsr0h	equ	0xFEA
  3997                           fsr0l	equ	0xFE9
  3998                           wreg	equ	0xFE8
  3999                           postdec1	equ	0xFE5
  4000                           fsr1h	equ	0xFE2
  4001                           fsr1l	equ	0xFE1
  4002                           indf2	equ	0xFDF
  4003                           fsr2h	equ	0xFDA
  4004                           fsr2l	equ	0xFD9
  4005                           status	equ	0xFD8
  4006                           
  4007                           	psect	rparam
  4008  0000                     pclatu	equ	0xFFB
  4009                           pclath	equ	0xFFA
  4010                           tblptru	equ	0xFF8
  4011                           tblptrh	equ	0xFF7
  4012                           tblptrl	equ	0xFF6
  4013                           tablat	equ	0xFF5
  4014                           prodh	equ	0xFF4
  4015                           prodl	equ	0xFF3
  4016                           intcon	equ	0xFF2
  4017                           intcon2	equ	0xFF1
  4018                           intcon3	equ	0xFF0
  4019                           indf0	equ	0xFEF
  4020                           postinc0	equ	0xFEE
  4021                           fsr0h	equ	0xFEA
  4022                           fsr0l	equ	0xFE9
  4023                           wreg	equ	0xFE8
  4024                           postdec1	equ	0xFE5
  4025                           fsr1h	equ	0xFE2
  4026                           fsr1l	equ	0xFE1
  4027                           indf2	equ	0xFDF
  4028                           fsr2h	equ	0xFDA
  4029                           fsr2l	equ	0xFD9
  4030                           status	equ	0xFD8
  4031                           
  4032                           	psect	temp
  4033  00003A                     btemp:
  4034                           	opt stack 0
  4035  00003A                     	ds	1
  4036  0000                     int$flags	set	btemp
  4037                           pclatu	equ	0xFFB
  4038                           pclath	equ	0xFFA
  4039                           tblptru	equ	0xFF8
  4040                           tblptrh	equ	0xFF7
  4041                           tblptrl	equ	0xFF6
  4042                           tablat	equ	0xFF5
  4043                           prodh	equ	0xFF4
  4044                           prodl	equ	0xFF3
  4045                           intcon	equ	0xFF2
  4046                           intcon2	equ	0xFF1
  4047                           intcon3	equ	0xFF0
  4048                           indf0	equ	0xFEF
  4049                           postinc0	equ	0xFEE
  4050                           fsr0h	equ	0xFEA
  4051                           fsr0l	equ	0xFE9
  4052                           wreg	equ	0xFE8
  4053                           postdec1	equ	0xFE5
  4054                           fsr1h	equ	0xFE2
  4055                           fsr1l	equ	0xFE1
  4056                           indf2	equ	0xFDF
  4057                           fsr2h	equ	0xFDA
  4058                           fsr2l	equ	0xFD9
  4059                           status	equ	0xFD8


Data Sizes:
    Strings     28
    Constant    0
    Data        8
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     47      57
    BANK0           160     14      14
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    LCDWriteStr@string	PTR const unsigned char  size(2) Largest target is 11
		 -> LCDWriteInt@string(BANK0[3]), LCDWriteFloat@string(COMRAM[5]), LCDWriteHexa@string(COMRAM[3]), STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _init_debug->_LCDWriteStr
    _LCDWriteInt->_LCDWriteStr
    _LCDWriteStr->_LCDPutChar
    _LCDPutChar->_WriteByte
    _LCDGoto->_WriteByte
    _LCDInit->_WriteNibble
    _LCDClear->_WriteByte
    _WriteByte->_WriteNibble
    _WaitLCD->_ReadByte

Critical Paths under _ISR in COMRAM

    _ISR->_searched
    _searched->i2___awdiv
    i2_show_debug->i2_LCDWriteInt
    i2_LCDWriteInt->i2___awdiv
    i2___awdiv->i2___awmod
    i2_LCDWriteStr->i2_LCDPutChar
    i2_LCDPutChar->i2_WriteByte
    i2_LCDGoto->i2_WriteByte
    i2_WriteByte->i2_WriteNibble
    i2_WaitLCD->i2_ReadByte

Critical Paths under _main in BANK0

    _show_debug->_LCDWriteInt
    _LCDWriteInt->_LCDGoto

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5   16728
                                              9 BANK0      5     0      5
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0   16728
                         _init_debug
 ---------------------------------------------------------------------------------
 (2) _init_debug                                           0     0      0   16728
                           _LCDClear
                            _LCDGoto
                            _LCDInit
                        _LCDWriteStr
                         _show_debug
 ---------------------------------------------------------------------------------
 (3) _show_debug                                           0     0      0    7911
                        _LCDWriteInt
 ---------------------------------------------------------------------------------
 (4) _LCDWriteInt                                          6     4      2    7911
                                              3 BANK0      6     4      2
                            _LCDGoto
                        _LCDWriteStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1193
                                             37 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1095
                                             37 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _LCDWriteStr                                          5     3      2    2578
                                             43 COMRAM     4     2      2
                                              0 BANK0      1     1      0
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (6) _LCDPutChar                                           1     1      0    2088
                                             42 COMRAM     1     1      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (5) _LCDGoto                                              6     5      1    2609
                                             42 COMRAM     3     2      1
                                              0 BANK0      3     3      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (3) _LCDInit                                              1     1      0    1573
                                             40 COMRAM     1     1      0
                            _WaitLCD
                        _WriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDClear                                             1     1      0    2057
                                             42 COMRAM     1     1      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (7) _WriteByte                                            2     1      1    1986
                                             40 COMRAM     2     1      1
                        _WriteNibble
 ---------------------------------------------------------------------------------
 (8) _WriteNibble                                          3     2      1    1502
                                             37 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _WaitLCD                                              1     1      0      71
                                             38 COMRAM     1     1      0
                           _ReadByte
 ---------------------------------------------------------------------------------
 (8) _ReadByte                                             1     1      0      37
                                             37 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                 17    17      0    4266
                                             20 COMRAM    17    17      0
                         _flashlight
                          _pedometer
                           _searched
                        _synchronize
 ---------------------------------------------------------------------------------
 (10) _synchronize                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _searched                                            6     6      0    1429
                                             14 COMRAM     6     6      0
                         _flashlight
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (11) _flashlight                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _pedometer                                           0     0      0    2735
                       i2_show_debug
 ---------------------------------------------------------------------------------
 (11) i2_show_debug                                        0     0      0    2735
                      i2_LCDWriteInt
 ---------------------------------------------------------------------------------
 (12) i2_LCDWriteInt                                       6     4      2    2735
                                             14 COMRAM     6     4      2
                          i2_LCDGoto
                      i2_LCDWriteStr
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (11) i2___awmod                                           6     2      4     643
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___awdiv                                           8     4      4     585
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (13) i2_LCDWriteStr                                       5     3      2     593
                                              6 COMRAM     5     3      2
                       i2_LCDPutChar
 ---------------------------------------------------------------------------------
 (14) i2_LCDPutChar                                        1     1      0     428
                                              5 COMRAM     1     1      0
                          i2_WaitLCD
                        i2_WriteByte
 ---------------------------------------------------------------------------------
 (13) i2_LCDGoto                                           6     5      1     624
                                              5 COMRAM     6     5      1
                          i2_WaitLCD
                        i2_WriteByte
 ---------------------------------------------------------------------------------
 (15) i2_WriteByte                                         2     1      1     326
                                              3 COMRAM     2     1      1
                      i2_WriteNibble
 ---------------------------------------------------------------------------------
 (16) i2_WriteNibble                                       3     2      1     132
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (15) i2_WaitLCD                                           1     1      0      71
                                              1 COMRAM     1     1      0
                         i2_ReadByte
 ---------------------------------------------------------------------------------
 (16) i2_ReadByte                                          1     1      0      37
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _init_debug
       _LCDClear
         _WaitLCD
           _ReadByte
         _WriteByte
           _WriteNibble
       _LCDGoto
         _WaitLCD
           _ReadByte
         _WriteByte
           _WriteNibble
       _LCDInit
         _WaitLCD
           _ReadByte
         _WriteNibble
       _LCDWriteStr
         _LCDPutChar
           _WaitLCD
             _ReadByte
           _WriteByte
             _WriteNibble
       _show_debug
         _LCDWriteInt
           _LCDGoto
             _WaitLCD
               _ReadByte
             _WriteByte
               _WriteNibble
           _LCDWriteStr
             _LCDPutChar
               _WaitLCD
                 _ReadByte
               _WriteByte
                 _WriteNibble
           ___awdiv
           ___awmod

 _ISR (ROOT)
   _flashlight
   _pedometer
     i2_show_debug
       i2_LCDWriteInt
         i2_LCDGoto
           i2_WaitLCD
             i2_ReadByte
           i2_WriteByte
             i2_WriteNibble
         i2_LCDWriteStr
           i2_LCDPutChar
             i2_WaitLCD
               i2_ReadByte
             i2_WriteByte
               i2_WriteNibble
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
   _searched
     _flashlight
     i2___awdiv
       i2___awmod (ARG)
     i2___awmod
   _synchronize

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      E       E       5        8.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2F      39       1       60.6%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      47      12        0.0%
DATA                 0      0      47       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed May 31 21:23:09 2017

            __CFG_CP0$ON 000000              __CFG_CP1$ON 000000              __CFG_CP2$ON 000000  
            __CFG_CP3$ON 000000              ?_LCDPutChar 0001                       l88 18AE  
            __CFG_CPB$ON 000000              __CFG_CPD$ON 000000             ___awdiv@sign 002B  
   __size_of_WriteNibble 0044                      _ISR 0008       i2LCDWriteInt@value 0010  
           ___awmod@sign 002B                      wreg 000FE8              i2_WriteByte 1808  
        __end_of_LCDInit 11F4             __CFG_LVP$OFF 000000          __end_of_LCDGoto 16C2  
           ?_LCDWriteInt 0063                     ?_ISR 0001             ?_LCDWriteStr 002C  
                   ISR@i 0024                     l2100 1432                     l2022 1694  
                   l2102 143A                     l2104 143E                     l2112 145C  
                   l2026 169E                     l2034 11FC                     l2060 12B6  
                   l2116 146A                     l2108 1452                     l2038 123C  
                   l2062 12BE                     l2054 12A0                     l2080 12F6  
                   l2072 12DE                     l2064 12C2                     l2048 1290  
                   l2076 12E8                     l2092 1418                     l2096 1424  
                   l1958 184A                     STR_1 1012                     STR_2 1001  
                   u1130 1606                     u1220 1234                     u1230 1274  
                   u1227 122A                     u1148 1608                     u1237 126A  
                   _LATD 000F8C                     u1707 1154                     u1717 1166  
                   u1727 17C2                     u1687 1124                     u1697 113E  
                   i2l62 10AC                     i2l83 00A0                     i2l78 0072  
    i2LCDWriteInt@column 0014          i2WriteByte@data 0004             __CFG_WRT0$ON 000000  
           __CFG_WRT1$ON 000000             __CFG_WRT2$ON 000000             __CFG_WRT3$ON 000000  
          __CFG_EBTR0$ON 000000            __CFG_EBTR1$ON 000000            __CFG_EBTR2$ON 000000  
          __CFG_EBTR3$ON 000000             __CFG_WRTB$ON 000000             __CFG_WRTC$ON 000000  
           __CFG_WRTD$ON 000000   __size_ofi2_WriteNibble 0044            __CFG_EBTRB$ON 000000  
                   _main 18AA     __end_ofi2_show_debug 188C                     fsr0h 000FEA  
                   fsr1h 000FE2                     indf0 000FEF                     fsr2h 000FDA  
                   fsr0l 000FE9                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 003A            __CFG_BORV$190 000000  
    i2LCDWriteInt@string 0011                     prodh 000FF4                     prodl 000FF3  
                   start 00DC            __CFG_IESO$OFF 000000             ___param_bank 000000  
                  ??_ISR 0015         __end_of_LCDClear 17D2          __end_of_WaitLCD 1858  
     __size_ofi2_LCDGoto 003A                    ?_main 0069          __end_of___awdiv 1300  
        __end_of___awmod 1474          ___awdiv@divisor 0028              _synchronize 1898  
        ___awdiv@counter 002A                    _PORTD 000F83           __CFG_FCMEN$OFF 000000  
       i2WriteNibble@cmd 0003       __CFG_MCLRE$EXTMCLR 000000                    _setup 14E4  
                  _steps 0038                    pclath 000FFA                    tablat 000FF5  
    __size_of_LCDPutChar 0012       __size_ofi2_WaitLCD 0012              ?i2_ReadByte 0001  
                  status 000FD8           __CFG_HFOFST$ON 000000            WaitLCD@status 0027  
     __size_ofi2___awdiv 0084       __size_ofi2___awmod 0070           __CFG_PBADEN$ON 000000  
        __initialization 16FC             __end_of_main 18B0         __end_of_ReadByte 175E  
          i2_WriteNibble 163C                   ??_main 0030            __activetblptr 000002  
              ??_LCDInit 0029                ??_LCDGoto 002C      i2LCDWriteStr@string 0007  
       ___awdiv@dividend 0026                   ?_setup 0001            LCDGoto@column 0062  
      __end_ofi2_LCDGoto 16FC                   i2l2012 186E                   i2l2220 14C2  
                 i2l2212 14A2                   i2l2204 1488                   i2l2134 16D2  
                 i2l2150 13C6                   i2l2214 14AA                   i2l2160 1314  
                 i2l2216 14AE                   i2l2224 14CC                   i2l2208 1494  
                 i2l2138 16DC                   i2l2146 138A                   i2l2402 10E4  
                 i2l2172 133A                   i2l2228 14DA                   i2l2404 1102  
                 i2l2174 1342                   i2l2166 1324                   i2l2422 0062  
                 i2l2192 137A                   i2l2184 1362                   i2l2176 1346  
                 i2l2432 008C                   i2l2188 136C                   i2l2380 1030  
                 i2l2436 009C           __CFG_WDTEN$OFF 000000                   i2l2392 10BA  
                 i2l2386 109C                   i2l2398 10DE                ??_WaitLCD 0027  
         __CFG_PWRTEN$ON 000000           __CFG_XINST$OFF 000000                ??___awdiv 002A  
         __CFG_STVREN$ON 000000                ??___awmod 002A            ?i2_LCDPutChar 0001  
      i2WriteNibble@data 0001           ?i2_WriteNibble 0001         ___awdiv@quotient 002C  
        ___awmod@divisor 0028          ___awmod@counter 002A        __end_ofi2_WaitLCD 187C  
       __end_of_searched 110C           i2___awdiv@sign 000C      __size_ofi2_ReadByte 0030  
           __pdataCOMRAM 0030        __end_ofi2___awdiv 1384        __end_ofi2___awmod 14E4  
           __mediumconst 0000                   tblptrh 000FF7             LCDWriteStr@i 0060  
                 tblptrl 000FF6                   tblptru 000FF8           i2___awmod@sign 0006  
  __size_ofi2_show_debug 0010                ?_LCDClear 0001     __size_of_LCDWriteInt 0058  
   __size_of_LCDWriteStr 0088               __accesstop 0060  __end_of__initialization 1720  
     __size_of_WriteByte 001A            ___rparam_used 000001           __pcstackCOMRAM 0001  
         WriteNibble@cmd 0028           ??i2_LCDPutChar 0006             ??_LCDPutChar 002B  
          __end_of_setup 1552   __size_ofi2_LCDWriteInt 004E   __size_ofi2_LCDWriteStr 0080  
           i2_show_debug 187C             ?i2_WriteByte 0004                  ??_setup 0030  
           WriteByte@cmd 002A               ??_LCDClear 002B          __CFG_PLLCFG$OFF 000000  
              ?_ReadByte 0001       __end_of_LCDPutChar 1846             i2LCDGoto@row 0006  
     __size_of_pedometer 000C       __CFG_CCP2MX$PORTC1 000000            i2_LCDGoto$669 0009  
        ??i2_WriteNibble 0002       __CFG_CCP3MX$PORTB5 000000            ??_WriteNibble 0027  
      LCDWriteInt@column 0065        LCDWriteInt@string 0066             ?_synchronize 0001  
      __end_of_WriteByte 1808                  _LCDInit 110C                  _LCDGoto 1680  
             _flashlight 17D2                  i2u43_40 17DC                  i2u44_48 17DE  
                _PR2bits 000FBB            i2_LCDWriteInt 15AA            i2_LCDWriteStr 1384  
           ??i2_ReadByte 0001               ??_ReadByte 0026                ?_searched 0001  
                __Hparam 0000                  _WaitLCD 1846                  __Lparam 0000  
                ___awdiv 127C                  ___awmod 1404               _init_debug 178E  
           __psmallconst 1000                  __pcinit 16FC                  __ramtop 1000  
                __ptext0 18AA                  __ptext1 14E4                  __ptext2 178E  
                __ptext3 1822                  __ptext4 1552                  __ptext5 1404  
                __ptext6 127C                  __ptext7 11F4                  __ptext8 1834  
                __ptext9 1680             __size_of_ISR 00D4       __end_ofi2_ReadByte 178E  
              _T2CONbits 000FBA      __end_of_WriteNibble 163C         ___awmod@dividend 0026  
      __end_of_pedometer 1898           ?i2_LCDWriteInt 000F           i2LCDWriteStr@i 000B  
         ?i2_LCDWriteStr 0007     end_of_initialization 1720     __end_ofi2_LCDPutChar 186A  
          __Lmediumconst 0000                i2_LCDGoto 16C2               ??_searched 000F  
      LCDWriteStr@string 002C                  postdec1 000FE5                  postinc0 000FEE  
       i2LCDPutChar@data 0006               _show_debug 1822         __CFG_FOSC$INTIO7 000000  
              i2_WaitLCD 186A                _TRISBbits 000F93                _TRISCbits 000F94  
              _TRISDbits 000F95              ?_flashlight 0001                i2___awdiv 1300  
              i2___awmod 1474     __size_ofi2_WriteByte 001A              _CCP1CONbits 000FBD  
             LCDGoto@row 002B           i2WriteByte@cmd 0005        __size_of_LCDClear 0020  
     i2___awdiv@dividend 0007               ?i2_LCDGoto 0006          WriteNibble@data 0026  
            ?_init_debug 0001          i2WaitLCD@status 0002              _WriteNibble 15F8  
          __pidataCOMRAM 18A2      start_initialization 16FC               ?i2_WaitLCD 0001  
     i2___awdiv@quotient 000D              __end_of_ISR 00DC     __size_of_synchronize 000A  
        ??i2_LCDWriteInt 0011          ??i2_LCDWriteStr 0009            ??_LCDWriteInt 0030  
          ??_LCDWriteStr 002E               ?i2___awdiv 0007               ?i2___awmod 0001  
      __size_of_ReadByte 0030          i2LCDGoto@column 000B      __size_of_flashlight 001C  
            ?_show_debug 0001                 ?_LCDInit 0001                 ?_LCDGoto 002B  
          WriteByte@data 0029              __pbssCOMRAM 0038    __size_ofi2_LCDPutChar 0012  
          __pcstackBANK0 0060                _WriteByte 17EE           LCDPutChar@data 002B  
    __size_of_init_debug 0024      __end_of_LCDWriteInt 15AA      __end_of_LCDWriteStr 127C  
           searched@time 0011              ??i2_LCDGoto 0007                 ?_WaitLCD 0001  
      __size_of_searched 00EE                __pintcode 0008                 ?___awdiv 0026  
               ?___awmod 0026         LCDWriteInt@value 0064    __end_ofi2_WriteNibble 1680  
           i2_LCDPutChar 1858         __CFG_PRICLKEN$ON 000000              __smallconst 1000  
            ??i2_WaitLCD 0002               ?_WriteByte 0029              ??i2___awdiv 000B  
            ??i2___awmod 0005           __size_of_setup 006E         i2ReadByte@status 0001  
              _pedometer 188C                 _LCDClear 17B2                 _LATBbits 000F8A  
               _LATCbits 000F8B                 _LATDbits 000F8C      __size_of_show_debug 0012  
            _LCDGoto$669 0060                 i2u116_40 164A                 i2u140_40 13C0  
               i2u140_47 13B6                 i2u141_40 13FC                 i2u141_47 13F2  
               i2u117_48 164C                 i2u157_40 10DA                 i2u173_47 007C  
               i2u174_47 10C0         __CFG_WDTPS$32768 000000         i2LCDWriteInt@row 000F  
       __size_of_LCDInit 00E8         __size_of_LCDGoto 0042        i2___awdiv@divisor 0009  
           ??_flashlight 0001        i2___awdiv@counter 000B              _LCDWriteInt 1552  
            _LCDWriteStr 11F4              _INTCON2bits 000FF1              _INTCON3bits 000FF0  
              copy_data0 1710       i2___awmod@dividend 0001               ?_pedometer 0001  
               _ReadByte 172E               _CCPR1Lbits 000FBE                 __Hrparam 0000  
               __Lrparam 0000       __CFG_BOREN$SBORDIS 000000         __size_of_WaitLCD 0012  
      __CFG_P2BMX$PORTD2 000000       __end_of_flashlight 17EE             ??_init_debug 0030  
       __size_of___awdiv 0084             ?_WriteNibble 0026         __size_of___awmod 0070  
          ?i2_show_debug 0001               _ANSELBbits 000F39                searched@i 0013  
          ??i2_WriteByte 0005              ??_WriteByte 002A                 __ptext10 110C  
               __ptext11 17B2                 __ptext20 188C                 __ptext12 17EE  
               __ptext21 187C                 __ptext13 15F8                 __ptext30 186A  
               __ptext22 15AA                 __ptext14 1846                 __ptext31 175E  
               __ptext23 1474                 __ptext15 172E                 __ptext24 1300  
               __ptext25 1384                 __ptext17 1898                 __ptext26 1858  
               __ptext18 101E                 __ptext27 16C2                 __ptext19 17D2  
               __ptext28 1808                 __ptext29 163C           _kiwi_frequence 0030  
     __end_of_init_debug 17B2            __size_of_main 0006              _kiwi_length 0037  
               _searched 101E           ReadByte@status 0026                 int$flags 003A  
             _LCDPutChar 1834                 main@argc 0069                 main@argv 006B  
         ??i2_show_debug 0015             ??_show_debug 0030            ??_synchronize 0001  
      i2___awmod@divisor 0003        i2___awmod@counter 0005               _INTCONbits 000FF2  
  __end_ofi2_LCDWriteInt 15F8    __end_ofi2_LCDWriteStr 1404                 intlevel2 0000  
            ??_pedometer 0015           LCDWriteInt@row 0063      __end_ofi2_WriteByte 1822  
     __end_of_show_debug 1834        __CFG_T3CMX$PORTC0 000000      __end_of_synchronize 18A2  
             i2_ReadByte 175E  
