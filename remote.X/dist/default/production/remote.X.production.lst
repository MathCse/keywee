

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Thu Jun 01 13:56:20 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 1.42
    51                           ; Generated 13/04/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F46K22 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	idataCOMRAM
    86  0018B2                     __pidataCOMRAM:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _kiwi_length
    90  0018B2  40                 	db	64
    91                           
    92                           	psect	idataBANK0
    93  001684                     __pidataBANK0:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _kiwi_frequence
    97  001684  27                 	db	39
    98  001685  27                 	db	39
    99  001686  27                 	db	39
   100  001687  00                 	db	0
   101  001688  27                 	db	39
   102  001689  27                 	db	39
   103  00168A  27                 	db	39
   104  00168B  00                 	db	0
   105  00168C  27                 	db	39
   106  00168D  27                 	db	39
   107  00168E  27                 	db	39
   108  00168F  27                 	db	39
   109  001690  23                 	db	35
   110  001691  23                 	db	35
   111  001692  23                 	db	35
   112  001693  23                 	db	35
   113  001694  1F                 	db	31
   114  001695  1F                 	db	31
   115  001696  1F                 	db	31
   116  001697  1F                 	db	31
   117  001698  1F                 	db	31
   118  001699  1F                 	db	31
   119  00169A  1F                 	db	31
   120  00169B  1F                 	db	31
   121  00169C  23                 	db	35
   122  00169D  23                 	db	35
   123  00169E  23                 	db	35
   124  00169F  23                 	db	35
   125  0016A0  23                 	db	35
   126  0016A1  23                 	db	35
   127  0016A2  23                 	db	35
   128  0016A3  23                 	db	35
   129  0016A4  27                 	db	39
   130  0016A5  27                 	db	39
   131  0016A6  27                 	db	39
   132  0016A7  00                 	db	0
   133  0016A8  1F                 	db	31
   134  0016A9  1F                 	db	31
   135  0016AA  1F                 	db	31
   136  0016AB  00                 	db	0
   137  0016AC  23                 	db	35
   138  0016AD  23                 	db	35
   139  0016AE  23                 	db	35
   140  0016AF  00                 	db	0
   141  0016B0  23                 	db	35
   142  0016B1  23                 	db	35
   143  0016B2  23                 	db	35
   144  0016B3  00                 	db	0
   145  0016B4  27                 	db	39
   146  0016B5  27                 	db	39
   147  0016B6  27                 	db	39
   148  0016B7  27                 	db	39
   149  0016B8  27                 	db	39
   150  0016B9  27                 	db	39
   151  0016BA  27                 	db	39
   152  0016BB  27                 	db	39
   153  0016BC  00                 	db	0
   154  0016BD  00                 	db	0
   155  0016BE  00                 	db	0
   156  0016BF  00                 	db	0
   157  0016C0  00                 	db	0
   158  0016C1  00                 	db	0
   159  0016C2  00                 	db	0
   160  0016C3  00                 	db	0
   161  0000                     _ANSELBbits	set	3897
   162  0000                     _LATD	set	3980
   163  0000                     _PORTD	set	3971
   164  0000                     _LATDbits	set	3980
   165  0000                     _TRISDbits	set	3989
   166  0000                     _PR2bits	set	4027
   167  0000                     _CCPR1Lbits	set	4030
   168  0000                     _CCP1CONbits	set	4029
   169  0000                     _T2CONbits	set	4026
   170  0000                     _LATCbits	set	3979
   171  0000                     _TRISCbits	set	3988
   172  0000                     _INTCON3bits	set	4080
   173  0000                     _LATBbits	set	3978
   174  0000                     _TRISBbits	set	3987
   175  0000                     _INTCONbits	set	4082
   176  0000                     _INTCON2bits	set	4081
   177                           
   178                           	psect	smallconst
   179  001000                     __psmallconst:
   180                           	opt stack 0
   181  001000  00                 	db	0
   182  001001  30                 	db	48	;'0'
   183  001002  31                 	db	49	;'1'
   184  001003  32                 	db	50	;'2'
   185  001004  33                 	db	51	;'3'
   186  001005  34                 	db	52	;'4'
   187  001006  35                 	db	53	;'5'
   188  001007  36                 	db	54	;'6'
   189  001008  37                 	db	55	;'7'
   190  001009  38                 	db	56	;'8'
   191  00100A  39                 	db	57	;'9'
   192  00100B  41                 	db	65	;'A'
   193  00100C  42                 	db	66	;'B'
   194  00100D  43                 	db	67	;'C'
   195  00100E  44                 	db	68	;'D'
   196  00100F  45                 	db	69	;'E'
   197  001010  46                 	db	70	;'F'
   198  001011  00                 	db	0
   199  001012                     STR_1:
   200  001012  4E                 	db	78	;'N'
   201  001013  6F                 	db	111	;'o'
   202  001014  6D                 	db	109	;'m'
   203  001015  62                 	db	98	;'b'
   204  001016  72                 	db	114	;'r'
   205  001017  65                 	db	101	;'e'
   206  001018  20                 	db	32
   207  001019  70                 	db	112	;'p'
   208  00101A  61                 	db	97	;'a'
   209  00101B  73                 	db	115	;'s'
   210  00101C  00                 	db	0
   211                           
   212                           ; #config settings
   213  00101D  00                 	db	0	; dummy byte at the end
   214  0000                     
   215                           	psect	cinit
   216  0015B8                     __pcinit:
   217                           	opt stack 0
   218  0015B8                     start_initialization:
   219                           	opt stack 0
   220  0015B8                     __initialization:
   221                           	opt stack 0
   222                           
   223                           ; Initialize objects allocated to BANK0 (64 bytes)
   224                           ; load TBLPTR registers with __pidataBANK0
   225  0015B8  0E84               	movlw	low __pidataBANK0
   226  0015BA  6EF6               	movwf	tblptrl,c
   227  0015BC  0E16               	movlw	high __pidataBANK0
   228  0015BE  6EF7               	movwf	tblptrh,c
   229  0015C0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   230  0015C2  6EF8               	movwf	tblptru,c
   231  0015C4  EE00  F060         	lfsr	0,__pdataBANK0
   232  0015C8  EE10 F040          	lfsr	1,64
   233  0015CC                     copy_data0:
   234  0015CC  0009               	tblrd		*+
   235  0015CE  CFF5 FFEE          	movff	tablat,postinc0
   236  0015D2  50E5               	movf	postdec1,w,c
   237  0015D4  50E1               	movf	fsr1l,w,c
   238  0015D6  E1FA               	bnz	copy_data0
   239                           
   240                           ; Initialize objects allocated to COMRAM (1 bytes)
   241                           ; load TBLPTR registers with __pidataCOMRAM
   242  0015D8  0EB2               	movlw	low __pidataCOMRAM
   243  0015DA  6EF6               	movwf	tblptrl,c
   244  0015DC  0E18               	movlw	high __pidataCOMRAM
   245  0015DE  6EF7               	movwf	tblptrh,c
   246  0015E0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   247  0015E2  6EF8               	movwf	tblptru,c
   248  0015E4  0009               	tblrd		*+	;fetch initializer
   249  0015E6  CFF5 F036          	movff	tablat,__pdataCOMRAM
   250                           
   251                           ; Clear objects allocated to COMRAM (2 bytes)
   252  0015EA  6A35               	clrf	(__pbssCOMRAM+1)& (0+255),c
   253  0015EC  6A34               	clrf	__pbssCOMRAM& (0+255),c
   254  0015EE                     end_of_initialization:
   255                           	opt stack 0
   256  0015EE                     __end_of__initialization:
   257                           	opt stack 0
   258  0015EE  9037               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   259  0015F0  9237               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   260  0015F2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   261  0015F4  6EF8               	movwf	tblptru,c
   262  0015F6  0100               	movlb	0
   263  0015F8  EF56  F00C         	goto	_main	;jump to C main() function
   264                           tblptru	equ	0xFF8
   265                           tblptrh	equ	0xFF7
   266                           tblptrl	equ	0xFF6
   267                           tablat	equ	0xFF5
   268                           postinc0	equ	0xFEE
   269                           postdec1	equ	0xFE5
   270                           fsr1l	equ	0xFE1
   271                           
   272                           	psect	bssCOMRAM
   273  000034                     __pbssCOMRAM:
   274                           	opt stack 0
   275  000034                     _steps:
   276                           	opt stack 0
   277  000034                     	ds	2
   278                           tblptru	equ	0xFF8
   279                           tblptrh	equ	0xFF7
   280                           tblptrl	equ	0xFF6
   281                           tablat	equ	0xFF5
   282                           postinc0	equ	0xFEE
   283                           postdec1	equ	0xFE5
   284                           fsr1l	equ	0xFE1
   285                           
   286                           	psect	dataCOMRAM
   287  000036                     __pdataCOMRAM:
   288                           	opt stack 0
   289  000036                     _kiwi_length:
   290                           	opt stack 0
   291  000036                     	ds	1
   292                           tblptru	equ	0xFF8
   293                           tblptrh	equ	0xFF7
   294                           tblptrl	equ	0xFF6
   295                           tablat	equ	0xFF5
   296                           postinc0	equ	0xFEE
   297                           postdec1	equ	0xFE5
   298                           fsr1l	equ	0xFE1
   299                           
   300                           	psect	dataBANK0
   301  000060                     __pdataBANK0:
   302                           	opt stack 0
   303  000060                     _kiwi_frequence:
   304                           	opt stack 0
   305  000060                     	ds	64
   306                           tblptru	equ	0xFF8
   307                           tblptrh	equ	0xFF7
   308                           tblptrl	equ	0xFF6
   309                           tablat	equ	0xFF5
   310                           postinc0	equ	0xFEE
   311                           postdec1	equ	0xFE5
   312                           fsr1l	equ	0xFE1
   313                           
   314                           	psect	cstackBANK0
   315  0000A0                     __pcstackBANK0:
   316                           	opt stack 0
   317  0000A0                     LCDWriteInt@row:
   318                           	opt stack 0
   319                           
   320                           ; 1 bytes @ 0x0
   321  0000A0                     	ds	1
   322  0000A1                     LCDWriteInt@value:
   323                           	opt stack 0
   324                           
   325                           ; 1 bytes @ 0x1
   326  0000A1                     	ds	1
   327  0000A2                     LCDWriteInt@column:
   328                           	opt stack 0
   329                           
   330                           ; 1 bytes @ 0x2
   331  0000A2                     	ds	1
   332  0000A3                     LCDWriteInt@string:
   333                           	opt stack 0
   334                           
   335                           ; 3 bytes @ 0x3
   336  0000A3                     	ds	3
   337  0000A6                     
   338                           ; 2 bytes @ 0x6
   339  0000A6                     	ds	2
   340  0000A8                     
   341                           ; 3 bytes @ 0x8
   342  0000A8                     	ds	3
   343                           tblptru	equ	0xFF8
   344                           tblptrh	equ	0xFF7
   345                           tblptrl	equ	0xFF6
   346                           tablat	equ	0xFF5
   347                           postinc0	equ	0xFEE
   348                           postdec1	equ	0xFE5
   349                           fsr1l	equ	0xFE1
   350                           
   351                           	psect	cstackCOMRAM
   352  000001                     __pcstackCOMRAM:
   353                           	opt stack 0
   354  000001                     ??_flashlight:
   355  000001                     ?i2___awmod:
   356                           	opt stack 0
   357  000001                     i2ReadByte@status:
   358                           	opt stack 0
   359  000001                     i2WriteNibble@data:
   360                           	opt stack 0
   361  000001                     i2___awmod@dividend:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0x0
   365  000001                     	ds	1
   366  000002                     ??i2_WriteNibble:
   367  000002                     i2WaitLCD@status:
   368                           	opt stack 0
   369                           
   370                           ; 1 bytes @ 0x1
   371  000002                     	ds	1
   372  000003                     i2WriteNibble@cmd:
   373                           	opt stack 0
   374  000003                     i2___awmod@divisor:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x2
   378  000003                     	ds	1
   379  000004                     i2WriteByte@data:
   380                           	opt stack 0
   381                           
   382                           ; 1 bytes @ 0x3
   383  000004                     	ds	1
   384  000005                     i2WriteByte@cmd:
   385                           	opt stack 0
   386  000005                     i2___awmod@counter:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0x4
   390  000005                     	ds	1
   391  000006                     i2LCDGoto@row:
   392                           	opt stack 0
   393  000006                     i2LCDPutChar@data:
   394                           	opt stack 0
   395  000006                     i2___awmod@sign:
   396                           	opt stack 0
   397                           
   398                           ; 1 bytes @ 0x5
   399  000006                     	ds	1
   400  000007                     ??i2_LCDGoto:
   401  000007                     ?i2___awdiv:
   402                           	opt stack 0
   403  000007                     i2LCDWriteStr@string:
   404                           	opt stack 0
   405  000007                     i2___awdiv@dividend:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x6
   409  000007                     	ds	2
   410  000009                     ??i2_LCDWriteStr:
   411  000009                     i2_LCDGoto$670:
   412                           	opt stack 0
   413  000009                     i2___awdiv@divisor:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x8
   417  000009                     	ds	2
   418  00000B                     i2LCDGoto@column:
   419                           	opt stack 0
   420  00000B                     i2LCDWriteStr@i:
   421                           	opt stack 0
   422  00000B                     i2___awdiv@counter:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0xA
   426  00000B                     	ds	1
   427  00000C                     i2___awdiv@sign:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0xB
   431  00000C                     	ds	1
   432  00000D                     i2___awdiv@quotient:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0xC
   436  00000D                     	ds	2
   437  00000F                     ??_searched:
   438  00000F                     i2LCDWriteInt@row:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0xE
   442  00000F                     	ds	1
   443  000010                     i2LCDWriteInt@value:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0xF
   447  000010                     	ds	1
   448  000011                     i2LCDWriteInt@string:
   449                           	opt stack 0
   450                           
   451                           ; 3 bytes @ 0x10
   452  000011                     	ds	1
   453  000012                     searched@i:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x11
   457  000012                     	ds	2
   458  000014                     i2LCDWriteInt@column:
   459                           	opt stack 0
   460  000014                     searched@max_time:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x13
   464  000014                     	ds	1
   465  000015                     
   466                           ; 1 bytes @ 0x14
   467  000015                     	ds	1
   468  000016                     searched@time:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x15
   472  000016                     	ds	2
   473  000018                     ??_ISR:
   474                           
   475                           ; 1 bytes @ 0x17
   476  000018                     	ds	15
   477  000027                     ISR@i:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0x26
   481  000027                     	ds	2
   482  000029                     ?___awdiv:
   483                           	opt stack 0
   484  000029                     ?___awmod:
   485                           	opt stack 0
   486  000029                     ReadByte@status:
   487                           	opt stack 0
   488  000029                     WriteNibble@data:
   489                           	opt stack 0
   490  000029                     ___awdiv@dividend:
   491                           	opt stack 0
   492  000029                     ___awmod@dividend:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x28
   496  000029                     	ds	1
   497  00002A                     ??_WriteNibble:
   498  00002A                     WaitLCD@status:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x29
   502  00002A                     	ds	1
   503  00002B                     WriteNibble@cmd:
   504                           	opt stack 0
   505  00002B                     ___awdiv@divisor:
   506                           	opt stack 0
   507  00002B                     ___awmod@divisor:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x2A
   511  00002B                     	ds	1
   512  00002C                     ??_LCDInit:
   513  00002C                     WriteByte@data:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x2B
   517  00002C                     	ds	1
   518  00002D                     WriteByte@cmd:
   519                           	opt stack 0
   520  00002D                     ___awdiv@counter:
   521                           	opt stack 0
   522  00002D                     ___awmod@counter:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0x2C
   526  00002D                     	ds	1
   527  00002E                     ??_LCDClear:
   528  00002E                     LCDGoto@row:
   529                           	opt stack 0
   530  00002E                     LCDPutChar@data:
   531                           	opt stack 0
   532  00002E                     ___awdiv@sign:
   533                           	opt stack 0
   534  00002E                     ___awmod@sign:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x2D
   538  00002E                     	ds	1
   539  00002F                     ??_LCDGoto:
   540  00002F                     LCDWriteStr@string:
   541                           	opt stack 0
   542  00002F                     ___awdiv@quotient:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x2E
   546  00002F                     	ds	2
   547  000031                     ??_LCDWriteStr:
   548  000031                     _LCDGoto$670:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x30
   552  000031                     	ds	2
   553  000033                     LCDGoto@column:
   554                           	opt stack 0
   555  000033                     LCDWriteStr@i:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0x32
   559  000033                     	ds	1
   560  000034                     tblptru	equ	0xFF8
   561                           tblptrh	equ	0xFF7
   562                           tblptrl	equ	0xFF6
   563                           tablat	equ	0xFF5
   564                           postinc0	equ	0xFEE
   565                           postdec1	equ	0xFE5
   566                           fsr1l	equ	0xFE1
   567                           
   568                           ; 1 bytes @ 0x33
   569 ;;
   570 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   571 ;;
   572 ;; *************** function _main *****************
   573 ;; Defined at:
   574 ;;		line 305 in file "main.c"
   575 ;; Parameters:    Size  Location     Type
   576 ;;  argc            2    6[BANK0 ] int 
   577 ;;  argv            3    8[BANK0 ] PTR PTR unsigned char 
   578 ;; Auto vars:     Size  Location     Type
   579 ;;		None
   580 ;; Return value:  Size  Location     Type
   581 ;;                  2    6[BANK0 ] int 
   582 ;; Registers used:
   583 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   584 ;; Tracked objects:
   585 ;;		On entry : 0/0
   586 ;;		On exit  : 0/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   589 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   592 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   593 ;;Total ram usage:        5 bytes
   594 ;; Hardware stack levels required when called:   16
   595 ;; This function calls:
   596 ;;		_setup
   597 ;; This function is called by:
   598 ;;		Startup code after reset
   599 ;; This function uses a non-reentrant model
   600 ;;
   601                           
   602                           	psect	text0
   603  0018AC                     __ptext0:
   604                           	opt stack 0
   605  0018AC                     _main:
   606                           	opt stack 15
   607                           
   608                           ;main.c: 307: setup();
   609                           
   610                           ;incstack = 0
   611  0018AC  EC52  F00A         	call	_setup	;wreg free
   612  0018B0                     l84:
   613  0018B0  D7FF               	goto	l84
   614  0018B2                     __end_of_main:
   615                           	opt stack 0
   616                           tblptru	equ	0xFF8
   617                           tblptrh	equ	0xFF7
   618                           tblptrl	equ	0xFF6
   619                           tablat	equ	0xFF5
   620                           postinc0	equ	0xFEE
   621                           postdec1	equ	0xFE5
   622                           fsr1l	equ	0xFE1
   623                           
   624 ;; *************** function _setup *****************
   625 ;; Defined at:
   626 ;;		line 90 in file "main.c"
   627 ;; Parameters:    Size  Location     Type
   628 ;;		None
   629 ;; Auto vars:     Size  Location     Type
   630 ;;		None
   631 ;; Return value:  Size  Location     Type
   632 ;;                  1    wreg      void 
   633 ;; Registers used:
   634 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   635 ;; Tracked objects:
   636 ;;		On entry : 0/0
   637 ;;		On exit  : 0/0
   638 ;;		Unchanged: 0/0
   639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   644 ;;Total ram usage:        0 bytes
   645 ;; Hardware stack levels used:    1
   646 ;; Hardware stack levels required when called:   15
   647 ;; This function calls:
   648 ;;		_init_debug
   649 ;; This function is called by:
   650 ;;		_main
   651 ;; This function uses a non-reentrant model
   652 ;;
   653                           
   654                           	psect	text1
   655  0014A4                     __ptext1:
   656                           	opt stack 0
   657  0014A4                     _setup:
   658                           	opt stack 15
   659                           
   660                           ;main.c: 92: init_debug();
   661                           
   662                           ;incstack = 0
   663  0014A4  ECCC  F00B         	call	_init_debug	;wreg free
   664                           
   665                           ;main.c: 95: INTCON2bits.INTEDG0 = 1;
   666  0014A8  8CF1               	bsf	intcon2,6,c	;volatile
   667                           
   668                           ;main.c: 96: INTCONbits.INT0IF = 0 ;
   669  0014AA  92F2               	bcf	intcon,1,c	;volatile
   670                           
   671                           ;main.c: 97: TRISBbits.TRISB0 = 0;
   672  0014AC  9093               	bcf	3987,0,c	;volatile
   673                           
   674                           ;main.c: 98: LATBbits.LATB0 = 0;
   675  0014AE  908A               	bcf	3978,0,c	;volatile
   676                           
   677                           ;main.c: 99: TRISBbits.TRISB0 = 1;
   678  0014B0  8093               	bsf	3987,0,c	;volatile
   679                           
   680                           ;main.c: 100: ANSELBbits.ANSB0 = 0;
   681  0014B2  010F               	movlb	15	; () banked
   682  0014B4  9139               	bcf	57,0,b	;volatile
   683                           
   684                           ; BSR set to: 15
   685                           ;main.c: 101: INTCONbits.INT0E = 1 ;
   686  0014B6  88F2               	bsf	intcon,4,c	;volatile
   687                           
   688                           ; BSR set to: 15
   689                           ;main.c: 104: INTCON2bits.INTEDG1 = 1;
   690  0014B8  8AF1               	bsf	intcon2,5,c	;volatile
   691                           
   692                           ; BSR set to: 15
   693                           ;main.c: 105: INTCON3bits.INT1IF = 0 ;
   694  0014BA  90F0               	bcf	intcon3,0,c	;volatile
   695                           
   696                           ; BSR set to: 15
   697                           ;main.c: 106: TRISBbits.TRISB1 = 0;
   698  0014BC  9293               	bcf	3987,1,c	;volatile
   699                           
   700                           ; BSR set to: 15
   701                           ;main.c: 107: LATBbits.LATB1 = 0;
   702  0014BE  928A               	bcf	3978,1,c	;volatile
   703                           
   704                           ; BSR set to: 15
   705                           ;main.c: 108: TRISBbits.TRISB1 = 1;
   706  0014C0  8293               	bsf	3987,1,c	;volatile
   707                           
   708                           ; BSR set to: 15
   709                           ;main.c: 109: ANSELBbits.ANSB1 = 0;
   710  0014C2  010F               	movlb	15	; () banked
   711  0014C4  9339               	bcf	57,1,b	;volatile
   712                           
   713                           ; BSR set to: 15
   714                           ;main.c: 110: INTCON3bits.INT1E = 1 ;
   715  0014C6  86F0               	bsf	intcon3,3,c	;volatile
   716                           
   717                           ; BSR set to: 15
   718                           ;main.c: 113: INTCON2bits.INTEDG2 = 1;
   719  0014C8  88F1               	bsf	intcon2,4,c	;volatile
   720                           
   721                           ; BSR set to: 15
   722                           ;main.c: 114: INTCON3bits.INT2IF = 0 ;
   723  0014CA  92F0               	bcf	intcon3,1,c	;volatile
   724                           
   725                           ; BSR set to: 15
   726                           ;main.c: 115: TRISBbits.TRISB2 = 0;
   727  0014CC  9493               	bcf	3987,2,c	;volatile
   728                           
   729                           ; BSR set to: 15
   730                           ;main.c: 116: LATBbits.LATB2 = 0;
   731  0014CE  948A               	bcf	3978,2,c	;volatile
   732                           
   733                           ; BSR set to: 15
   734                           ;main.c: 117: TRISBbits.TRISB2 = 1;
   735  0014D0  8493               	bsf	3987,2,c	;volatile
   736                           
   737                           ; BSR set to: 15
   738                           ;main.c: 118: ANSELBbits.ANSB2 = 0;
   739  0014D2  010F               	movlb	15	; () banked
   740  0014D4  9539               	bcf	57,2,b	;volatile
   741                           
   742                           ; BSR set to: 15
   743                           ;main.c: 119: INTCON3bits.INT2E = 1 ;
   744  0014D6  88F0               	bsf	intcon3,4,c	;volatile
   745                           
   746                           ; BSR set to: 15
   747                           ;main.c: 122: TRISCbits.RC1 = 0 ;
   748  0014D8  9294               	bcf	3988,1,c	;volatile
   749                           
   750                           ; BSR set to: 15
   751                           ;main.c: 123: LATCbits.LATC1 = 0 ;
   752  0014DA  928B               	bcf	3979,1,c	;volatile
   753                           
   754                           ; BSR set to: 15
   755                           ;main.c: 126: T2CONbits.T2OUTPS = 0 ;
   756  0014DC  96BA               	bcf	4026,3,c	;volatile
   757  0014DE  98BA               	bcf	4026,4,c	;volatile
   758  0014E0  9ABA               	bcf	4026,5,c	;volatile
   759  0014E2  9CBA               	bcf	4026,6,c	;volatile
   760                           
   761                           ; BSR set to: 15
   762                           ;main.c: 127: T2CONbits.T2CKPS = 0b10 ;
   763  0014E4  50BA               	movf	4026,w,c	;volatile
   764  0014E6  0BFC               	andlw	-4
   765  0014E8  0902               	iorlw	2
   766  0014EA  6EBA               	movwf	4026,c	;volatile
   767                           
   768                           ; BSR set to: 15
   769                           ;main.c: 128: T2CONbits.TMR2ON = 1 ;
   770  0014EC  84BA               	bsf	4026,2,c	;volatile
   771                           
   772                           ; BSR set to: 15
   773                           ;main.c: 131: TRISCbits.RC2 = 0;
   774  0014EE  9494               	bcf	3988,2,c	;volatile
   775                           
   776                           ; BSR set to: 15
   777                           ;main.c: 132: CCP1CONbits.P1M = 0 ;
   778  0014F0  0E3F               	movlw	-193
   779  0014F2  16BD               	andwf	4029,f,c	;volatile
   780                           
   781                           ; BSR set to: 15
   782                           ;main.c: 133: CCP1CONbits.DC1B = 0 ;
   783  0014F4  0ECF               	movlw	-49
   784  0014F6  16BD               	andwf	4029,f,c	;volatile
   785                           
   786                           ; BSR set to: 15
   787                           ;main.c: 134: CCP1CONbits.CCP1M = 0b1100 ;
   788  0014F8  50BD               	movf	4029,w,c	;volatile
   789  0014FA  0BF0               	andlw	-16
   790  0014FC  090C               	iorlw	12
   791  0014FE  6EBD               	movwf	4029,c	;volatile
   792                           
   793                           ; BSR set to: 15
   794                           ;main.c: 135: CCPR1Lbits.CCPR1L = 0 ;
   795  001500  0E00               	movlw	0
   796  001502  6EBE               	movwf	4030,c	;volatile
   797                           
   798                           ; BSR set to: 15
   799                           ;main.c: 138: INTCONbits.PEIE = 1;
   800  001504  8CF2               	bsf	intcon,6,c	;volatile
   801                           
   802                           ; BSR set to: 15
   803                           ;main.c: 139: INTCONbits.GIE = 1 ;
   804  001506  8EF2               	bsf	intcon,7,c	;volatile
   805                           
   806                           ; BSR set to: 15
   807                           ;main.c: 142: steps = 0;
   808  001508  0E00               	movlw	0
   809  00150A  6E35               	movwf	_steps+1,c
   810  00150C  0E00               	movlw	0
   811  00150E  6E34               	movwf	_steps,c
   812                           
   813                           ; BSR set to: 15
   814  001510  0012               	return		;funcret
   815  001512                     __end_of_setup:
   816                           	opt stack 0
   817                           tblptru	equ	0xFF8
   818                           tblptrh	equ	0xFF7
   819                           tblptrl	equ	0xFF6
   820                           tablat	equ	0xFF5
   821                           intcon	equ	0xFF2
   822                           intcon2	equ	0xFF1
   823                           intcon3	equ	0xFF0
   824                           postinc0	equ	0xFEE
   825                           postdec1	equ	0xFE5
   826                           fsr1l	equ	0xFE1
   827                           
   828 ;; *************** function _init_debug *****************
   829 ;; Defined at:
   830 ;;		line 81 in file "main.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;		None
   833 ;; Auto vars:     Size  Location     Type
   834 ;;		None
   835 ;; Return value:  Size  Location     Type
   836 ;;                  1    wreg      void 
   837 ;; Registers used:
   838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   839 ;; Tracked objects:
   840 ;;		On entry : 0/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   848 ;;Total ram usage:        0 bytes
   849 ;; Hardware stack levels used:    1
   850 ;; Hardware stack levels required when called:   14
   851 ;; This function calls:
   852 ;;		_LCDClear
   853 ;;		_LCDGoto
   854 ;;		_LCDInit
   855 ;;		_LCDWriteStr
   856 ;;		_show_debug
   857 ;; This function is called by:
   858 ;;		_setup
   859 ;; This function uses a non-reentrant model
   860 ;;
   861                           
   862                           	psect	text2
   863  001798                     __ptext2:
   864                           	opt stack 0
   865  001798                     _init_debug:
   866                           	opt stack 15
   867                           
   868                           ;main.c: 82: LCDInit();
   869                           
   870                           ; BSR set to: 15
   871                           ;incstack = 0
   872  001798  EC0F  F008         	call	_LCDInit	;wreg free
   873                           
   874                           ;main.c: 83: LCDClear();
   875  00179C  ECDE  F00B         	call	_LCDClear	;wreg free
   876                           
   877                           ;main.c: 84: LCDGoto(0, 0);
   878  0017A0  0E00               	movlw	0
   879  0017A2  6E2E               	movwf	LCDGoto@row,c
   880  0017A4  0E00               	movlw	0
   881  0017A6  EC62  F00B         	call	_LCDGoto
   882                           
   883                           ;main.c: 85: LCDWriteStr("Nombre pas");
   884  0017AA  0E12               	movlw	low STR_1
   885  0017AC  6E2F               	movwf	LCDWriteStr@string,c
   886  0017AE  0E10               	movlw	high STR_1
   887  0017B0  6E30               	movwf	LCDWriteStr@string+1,c
   888  0017B2  EC62  F009         	call	_LCDWriteStr	;wreg free
   889                           
   890                           ;main.c: 86: show_debug();
   891  0017B6  EC16  F00C         	call	_show_debug	;wreg free
   892  0017BA  0012               	return		;funcret
   893  0017BC                     __end_of_init_debug:
   894                           	opt stack 0
   895                           tblptru	equ	0xFF8
   896                           tblptrh	equ	0xFF7
   897                           tblptrl	equ	0xFF6
   898                           tablat	equ	0xFF5
   899                           intcon	equ	0xFF2
   900                           intcon2	equ	0xFF1
   901                           intcon3	equ	0xFF0
   902                           postinc0	equ	0xFEE
   903                           postdec1	equ	0xFE5
   904                           fsr1l	equ	0xFE1
   905                           
   906 ;; *************** function _show_debug *****************
   907 ;; Defined at:
   908 ;;		line 76 in file "main.c"
   909 ;; Parameters:    Size  Location     Type
   910 ;;		None
   911 ;; Auto vars:     Size  Location     Type
   912 ;;		None
   913 ;; Return value:  Size  Location     Type
   914 ;;                  1    wreg      void 
   915 ;; Registers used:
   916 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   917 ;; Tracked objects:
   918 ;;		On entry : 0/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   926 ;;Total ram usage:        0 bytes
   927 ;; Hardware stack levels used:    1
   928 ;; Hardware stack levels required when called:   13
   929 ;; This function calls:
   930 ;;		_LCDWriteInt
   931 ;; This function is called by:
   932 ;;		_init_debug
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           	psect	text3
   937  00182C                     __ptext3:
   938                           	opt stack 0
   939  00182C                     _show_debug:
   940                           	opt stack 15
   941                           
   942                           ;main.c: 77: LCDWriteInt(0, 1, steps);
   943                           
   944                           ;incstack = 0
   945  00182C  0E01               	movlw	1
   946  00182E  0100               	movlb	0	; () banked
   947  001830  6FA0               	movwf	LCDWriteInt@row& (0+255),b
   948  001832  C034  F0A1         	movff	_steps,LCDWriteInt@value
   949  001836  0E00               	movlw	0
   950  001838  EC89  F00A         	call	_LCDWriteInt
   951  00183C  0012               	return		;funcret
   952  00183E                     __end_of_show_debug:
   953                           	opt stack 0
   954                           tblptru	equ	0xFF8
   955                           tblptrh	equ	0xFF7
   956                           tblptrl	equ	0xFF6
   957                           tablat	equ	0xFF5
   958                           intcon	equ	0xFF2
   959                           intcon2	equ	0xFF1
   960                           intcon3	equ	0xFF0
   961                           postinc0	equ	0xFEE
   962                           postdec1	equ	0xFE5
   963                           fsr1l	equ	0xFE1
   964                           
   965 ;; *************** function _LCDWriteInt *****************
   966 ;; Defined at:
   967 ;;		line 229 in file "lcd.c"
   968 ;; Parameters:    Size  Location     Type
   969 ;;  column          1    wreg     unsigned char 
   970 ;;  row             1    0[BANK0 ] unsigned char 
   971 ;;  value           1    1[BANK0 ] unsigned char 
   972 ;; Auto vars:     Size  Location     Type
   973 ;;  column          1    2[BANK0 ] unsigned char 
   974 ;;  string          3    3[BANK0 ] unsigned char [3]
   975 ;; Return value:  Size  Location     Type
   976 ;;                  1    wreg      void 
   977 ;; Registers used:
   978 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   979 ;; Tracked objects:
   980 ;;		On entry : 0/0
   981 ;;		On exit  : 0/0
   982 ;;		Unchanged: 0/0
   983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   984 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   985 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   987 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   988 ;;Total ram usage:        6 bytes
   989 ;; Hardware stack levels used:    1
   990 ;; Hardware stack levels required when called:   12
   991 ;; This function calls:
   992 ;;		_LCDGoto
   993 ;;		_LCDWriteStr
   994 ;;		___awdiv
   995 ;;		___awmod
   996 ;; This function is called by:
   997 ;;		_show_debug
   998 ;; This function uses a non-reentrant model
   999 ;;
  1000                           
  1001                           	psect	text4
  1002  001512                     __ptext4:
  1003                           	opt stack 0
  1004  001512                     _LCDWriteInt:
  1005                           	opt stack 15
  1006                           
  1007                           ;incstack = 0
  1008                           ;LCDWriteInt@column stored from wreg
  1009  001512  0100               	movlb	0	; () banked
  1010  001514  6FA2               	movwf	LCDWriteInt@column& (0+255),b
  1011                           
  1012                           ;lcd.c: 230: char string[3];
  1013                           ;lcd.c: 232: string[0] = value / 10 + '0';
  1014  001516  C0A1  F029         	movff	LCDWriteInt@value,___awdiv@dividend
  1015  00151A  6A2A               	clrf	___awdiv@dividend+1,c
  1016  00151C  0E00               	movlw	0
  1017  00151E  6E2C               	movwf	___awdiv@divisor+1,c
  1018  001520  0E0A               	movlw	10
  1019  001522  6E2B               	movwf	___awdiv@divisor,c
  1020  001524  ECDE  F008         	call	___awdiv	;wreg free
  1021  001528  5029               	movf	?___awdiv,w,c
  1022  00152A  0F30               	addlw	48
  1023  00152C  0100               	movlb	0	; () banked
  1024  00152E  6FA3               	movwf	LCDWriteInt@string& (0+255),b
  1025                           
  1026                           ;lcd.c: 233: string[1] = value % 10 + '0';
  1027  001530  C0A1  F029         	movff	LCDWriteInt@value,___awmod@dividend
  1028  001534  6A2A               	clrf	___awmod@dividend+1,c
  1029  001536  0E00               	movlw	0
  1030  001538  6E2C               	movwf	___awmod@divisor+1,c
  1031  00153A  0E0A               	movlw	10
  1032  00153C  6E2B               	movwf	___awmod@divisor,c
  1033  00153E  ECE2  F009         	call	___awmod	;wreg free
  1034  001542  5029               	movf	?___awmod,w,c
  1035  001544  0F30               	addlw	48
  1036  001546  0100               	movlb	0	; () banked
  1037  001548  6FA4               	movwf	(LCDWriteInt@string+1)& (0+255),b
  1038                           
  1039                           ; BSR set to: 0
  1040                           ;lcd.c: 234: string[2] = '\0';
  1041  00154A  0E00               	movlw	0
  1042  00154C  0100               	movlb	0	; () banked
  1043  00154E  6FA5               	movwf	(LCDWriteInt@string+2)& (0+255),b
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;lcd.c: 236: LCDGoto(column, row);
  1047  001550  C0A0  F02E         	movff	LCDWriteInt@row,LCDGoto@row
  1048  001554  0100               	movlb	0	; () banked
  1049  001556  51A2               	movf	LCDWriteInt@column& (0+255),w,b
  1050  001558  EC62  F00B         	call	_LCDGoto
  1051                           
  1052                           ;lcd.c: 237: LCDWriteStr(string);
  1053  00155C  0EA3               	movlw	low LCDWriteInt@string
  1054  00155E  6E2F               	movwf	LCDWriteStr@string,c
  1055  001560  0E00               	movlw	high LCDWriteInt@string
  1056  001562  6E30               	movwf	LCDWriteStr@string+1,c
  1057  001564  EC62  F009         	call	_LCDWriteStr	;wreg free
  1058  001568  0012               	return		;funcret
  1059  00156A                     __end_of_LCDWriteInt:
  1060                           	opt stack 0
  1061                           tblptru	equ	0xFF8
  1062                           tblptrh	equ	0xFF7
  1063                           tblptrl	equ	0xFF6
  1064                           tablat	equ	0xFF5
  1065                           intcon	equ	0xFF2
  1066                           intcon2	equ	0xFF1
  1067                           intcon3	equ	0xFF0
  1068                           postinc0	equ	0xFEE
  1069                           postdec1	equ	0xFE5
  1070                           fsr1l	equ	0xFE1
  1071                           
  1072 ;; *************** function ___awmod *****************
  1073 ;; Defined at:
  1074 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  1075 ;; Parameters:    Size  Location     Type
  1076 ;;  dividend        2   40[COMRAM] int 
  1077 ;;  divisor         2   42[COMRAM] int 
  1078 ;; Auto vars:     Size  Location     Type
  1079 ;;  sign            1   45[COMRAM] unsigned char 
  1080 ;;  counter         1   44[COMRAM] unsigned char 
  1081 ;; Return value:  Size  Location     Type
  1082 ;;                  2   40[COMRAM] int 
  1083 ;; Registers used:
  1084 ;;		wreg, status,2, status,0
  1085 ;; Tracked objects:
  1086 ;;		On entry : 0/0
  1087 ;;		On exit  : 0/0
  1088 ;;		Unchanged: 0/0
  1089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1090 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1091 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1093 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1094 ;;Total ram usage:        6 bytes
  1095 ;; Hardware stack levels used:    1
  1096 ;; Hardware stack levels required when called:    8
  1097 ;; This function calls:
  1098 ;;		Nothing
  1099 ;; This function is called by:
  1100 ;;		_LCDWriteInt
  1101 ;;		_LCDPutByte
  1102 ;; This function uses a non-reentrant model
  1103 ;;
  1104                           
  1105                           	psect	text5
  1106  0013C4                     __ptext5:
  1107                           	opt stack 0
  1108  0013C4                     ___awmod:
  1109                           	opt stack 18
  1110                           
  1111                           ;incstack = 0
  1112  0013C4  0E00               	movlw	0
  1113  0013C6  6E2E               	movwf	___awmod@sign,c
  1114  0013C8  AE2A               	btfss	___awmod@dividend+1,7,c
  1115  0013CA  D006               	goto	l1510
  1116  0013CC  6C29               	negf	___awmod@dividend,c
  1117  0013CE  1E2A               	comf	___awmod@dividend+1,f,c
  1118  0013D0  B0D8               	btfsc	status,0,c
  1119  0013D2  2A2A               	incf	___awmod@dividend+1,f,c
  1120  0013D4  0E01               	movlw	1
  1121  0013D6  6E2E               	movwf	___awmod@sign,c
  1122  0013D8                     l1510:
  1123  0013D8  AE2C               	btfss	___awmod@divisor+1,7,c
  1124  0013DA  D004               	goto	l1514
  1125  0013DC  6C2B               	negf	___awmod@divisor,c
  1126  0013DE  1E2C               	comf	___awmod@divisor+1,f,c
  1127  0013E0  B0D8               	btfsc	status,0,c
  1128  0013E2  2A2C               	incf	___awmod@divisor+1,f,c
  1129  0013E4                     l1514:
  1130  0013E4  502B               	movf	___awmod@divisor,w,c
  1131  0013E6  102C               	iorwf	___awmod@divisor+1,w,c
  1132  0013E8  B4D8               	btfsc	status,2,c
  1133  0013EA  D018               	goto	l1530
  1134  0013EC  0E01               	movlw	1
  1135  0013EE  6E2D               	movwf	___awmod@counter,c
  1136  0013F0  D004               	goto	l1520
  1137  0013F2                     l1518:
  1138  0013F2  90D8               	bcf	status,0,c
  1139  0013F4  362B               	rlcf	___awmod@divisor,f,c
  1140  0013F6  362C               	rlcf	___awmod@divisor+1,f,c
  1141  0013F8  2A2D               	incf	___awmod@counter,f,c
  1142  0013FA                     l1520:
  1143  0013FA  AE2C               	btfss	___awmod@divisor+1,7,c
  1144  0013FC  D7FA               	goto	l1518
  1145  0013FE                     l1522:
  1146  0013FE  502B               	movf	___awmod@divisor,w,c
  1147  001400  5C29               	subwf	___awmod@dividend,w,c
  1148  001402  502C               	movf	___awmod@divisor+1,w,c
  1149  001404  582A               	subwfb	___awmod@dividend+1,w,c
  1150  001406  A0D8               	btfss	status,0,c
  1151  001408  D004               	goto	l1526
  1152  00140A  502B               	movf	___awmod@divisor,w,c
  1153  00140C  5E29               	subwf	___awmod@dividend,f,c
  1154  00140E  502C               	movf	___awmod@divisor+1,w,c
  1155  001410  5A2A               	subwfb	___awmod@dividend+1,f,c
  1156  001412                     l1526:
  1157  001412  90D8               	bcf	status,0,c
  1158  001414  322C               	rrcf	___awmod@divisor+1,f,c
  1159  001416  322B               	rrcf	___awmod@divisor,f,c
  1160  001418  2E2D               	decfsz	___awmod@counter,f,c
  1161  00141A  D7F1               	goto	l1522
  1162  00141C                     l1530:
  1163  00141C  502E               	movf	___awmod@sign,w,c
  1164  00141E  B4D8               	btfsc	status,2,c
  1165  001420  D004               	goto	l1534
  1166  001422  6C29               	negf	___awmod@dividend,c
  1167  001424  1E2A               	comf	___awmod@dividend+1,f,c
  1168  001426  B0D8               	btfsc	status,0,c
  1169  001428  2A2A               	incf	___awmod@dividend+1,f,c
  1170  00142A                     l1534:
  1171  00142A  C029  F029         	movff	___awmod@dividend,?___awmod
  1172  00142E  C02A  F02A         	movff	___awmod@dividend+1,?___awmod+1
  1173  001432  0012               	return	
  1174  001434                     __end_of___awmod:
  1175                           	opt stack 0
  1176                           tblptru	equ	0xFF8
  1177                           tblptrh	equ	0xFF7
  1178                           tblptrl	equ	0xFF6
  1179                           tablat	equ	0xFF5
  1180                           intcon	equ	0xFF2
  1181                           intcon2	equ	0xFF1
  1182                           intcon3	equ	0xFF0
  1183                           postinc0	equ	0xFEE
  1184                           postdec1	equ	0xFE5
  1185                           fsr1l	equ	0xFE1
  1186                           status	equ	0xFD8
  1187                           
  1188 ;; *************** function ___awdiv *****************
  1189 ;; Defined at:
  1190 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  1191 ;; Parameters:    Size  Location     Type
  1192 ;;  dividend        2   40[COMRAM] int 
  1193 ;;  divisor         2   42[COMRAM] int 
  1194 ;; Auto vars:     Size  Location     Type
  1195 ;;  quotient        2   46[COMRAM] int 
  1196 ;;  sign            1   45[COMRAM] unsigned char 
  1197 ;;  counter         1   44[COMRAM] unsigned char 
  1198 ;; Return value:  Size  Location     Type
  1199 ;;                  2   40[COMRAM] int 
  1200 ;; Registers used:
  1201 ;;		wreg, status,2, status,0
  1202 ;; Tracked objects:
  1203 ;;		On entry : 0/0
  1204 ;;		On exit  : 0/0
  1205 ;;		Unchanged: 0/0
  1206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1207 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1208 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1210 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1211 ;;Total ram usage:        8 bytes
  1212 ;; Hardware stack levels used:    1
  1213 ;; Hardware stack levels required when called:    8
  1214 ;; This function calls:
  1215 ;;		Nothing
  1216 ;; This function is called by:
  1217 ;;		_LCDWriteInt
  1218 ;;		_LCDPutByte
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           	psect	text6
  1223  0011BC                     __ptext6:
  1224                           	opt stack 0
  1225  0011BC                     ___awdiv:
  1226                           	opt stack 18
  1227                           
  1228                           ;incstack = 0
  1229  0011BC  0E00               	movlw	0
  1230  0011BE  6E2E               	movwf	___awdiv@sign,c
  1231  0011C0  AE2C               	btfss	___awdiv@divisor+1,7,c
  1232  0011C2  D006               	goto	l1466
  1233  0011C4  6C2B               	negf	___awdiv@divisor,c
  1234  0011C6  1E2C               	comf	___awdiv@divisor+1,f,c
  1235  0011C8  B0D8               	btfsc	status,0,c
  1236  0011CA  2A2C               	incf	___awdiv@divisor+1,f,c
  1237  0011CC  0E01               	movlw	1
  1238  0011CE  6E2E               	movwf	___awdiv@sign,c
  1239  0011D0                     l1466:
  1240  0011D0  AE2A               	btfss	___awdiv@dividend+1,7,c
  1241  0011D2  D006               	goto	l1472
  1242  0011D4  6C29               	negf	___awdiv@dividend,c
  1243  0011D6  1E2A               	comf	___awdiv@dividend+1,f,c
  1244  0011D8  B0D8               	btfsc	status,0,c
  1245  0011DA  2A2A               	incf	___awdiv@dividend+1,f,c
  1246  0011DC  0E01               	movlw	1
  1247  0011DE  1A2E               	xorwf	___awdiv@sign,f,c
  1248  0011E0                     l1472:
  1249  0011E0  0E00               	movlw	0
  1250  0011E2  6E30               	movwf	___awdiv@quotient+1,c
  1251  0011E4  0E00               	movlw	0
  1252  0011E6  6E2F               	movwf	___awdiv@quotient,c
  1253  0011E8  502B               	movf	___awdiv@divisor,w,c
  1254  0011EA  102C               	iorwf	___awdiv@divisor+1,w,c
  1255  0011EC  B4D8               	btfsc	status,2,c
  1256  0011EE  D01C               	goto	l1494
  1257  0011F0  0E01               	movlw	1
  1258  0011F2  6E2D               	movwf	___awdiv@counter,c
  1259  0011F4  D004               	goto	l1480
  1260  0011F6                     l1478:
  1261  0011F6  90D8               	bcf	status,0,c
  1262  0011F8  362B               	rlcf	___awdiv@divisor,f,c
  1263  0011FA  362C               	rlcf	___awdiv@divisor+1,f,c
  1264  0011FC  2A2D               	incf	___awdiv@counter,f,c
  1265  0011FE                     l1480:
  1266  0011FE  AE2C               	btfss	___awdiv@divisor+1,7,c
  1267  001200  D7FA               	goto	l1478
  1268  001202                     l1482:
  1269  001202  90D8               	bcf	status,0,c
  1270  001204  362F               	rlcf	___awdiv@quotient,f,c
  1271  001206  3630               	rlcf	___awdiv@quotient+1,f,c
  1272  001208  502B               	movf	___awdiv@divisor,w,c
  1273  00120A  5C29               	subwf	___awdiv@dividend,w,c
  1274  00120C  502C               	movf	___awdiv@divisor+1,w,c
  1275  00120E  582A               	subwfb	___awdiv@dividend+1,w,c
  1276  001210  A0D8               	btfss	status,0,c
  1277  001212  D005               	goto	l1490
  1278  001214  502B               	movf	___awdiv@divisor,w,c
  1279  001216  5E29               	subwf	___awdiv@dividend,f,c
  1280  001218  502C               	movf	___awdiv@divisor+1,w,c
  1281  00121A  5A2A               	subwfb	___awdiv@dividend+1,f,c
  1282  00121C  802F               	bsf	___awdiv@quotient,0,c
  1283  00121E                     l1490:
  1284  00121E  90D8               	bcf	status,0,c
  1285  001220  322C               	rrcf	___awdiv@divisor+1,f,c
  1286  001222  322B               	rrcf	___awdiv@divisor,f,c
  1287  001224  2E2D               	decfsz	___awdiv@counter,f,c
  1288  001226  D7ED               	goto	l1482
  1289  001228                     l1494:
  1290  001228  502E               	movf	___awdiv@sign,w,c
  1291  00122A  B4D8               	btfsc	status,2,c
  1292  00122C  D004               	goto	l1498
  1293  00122E  6C2F               	negf	___awdiv@quotient,c
  1294  001230  1E30               	comf	___awdiv@quotient+1,f,c
  1295  001232  B0D8               	btfsc	status,0,c
  1296  001234  2A30               	incf	___awdiv@quotient+1,f,c
  1297  001236                     l1498:
  1298  001236  C02F  F029         	movff	___awdiv@quotient,?___awdiv
  1299  00123A  C030  F02A         	movff	___awdiv@quotient+1,?___awdiv+1
  1300  00123E  0012               	return	
  1301  001240                     __end_of___awdiv:
  1302                           	opt stack 0
  1303                           tblptru	equ	0xFF8
  1304                           tblptrh	equ	0xFF7
  1305                           tblptrl	equ	0xFF6
  1306                           tablat	equ	0xFF5
  1307                           intcon	equ	0xFF2
  1308                           intcon2	equ	0xFF1
  1309                           intcon3	equ	0xFF0
  1310                           postinc0	equ	0xFEE
  1311                           postdec1	equ	0xFE5
  1312                           fsr1l	equ	0xFE1
  1313                           status	equ	0xFD8
  1314                           
  1315 ;; *************** function _LCDWriteStr *****************
  1316 ;; Defined at:
  1317 ;;		line 193 in file "lcd.c"
  1318 ;; Parameters:    Size  Location     Type
  1319 ;;  string          2   46[COMRAM] PTR const unsigned char 
  1320 ;;		 -> LCDWriteInt@string(3), LCDWriteFloat@string(5), LCDWriteHexa@string(3), STR_1(11), 
  1321 ;; Auto vars:     Size  Location     Type
  1322 ;;  i               1   50[COMRAM] unsigned char 
  1323 ;; Return value:  Size  Location     Type
  1324 ;;                  1    wreg      void 
  1325 ;; Registers used:
  1326 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1327 ;; Tracked objects:
  1328 ;;		On entry : 0/0
  1329 ;;		On exit  : 0/0
  1330 ;;		Unchanged: 0/0
  1331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1332 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1333 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1334 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1335 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1336 ;;Total ram usage:        5 bytes
  1337 ;; Hardware stack levels used:    1
  1338 ;; Hardware stack levels required when called:   11
  1339 ;; This function calls:
  1340 ;;		_LCDPutChar
  1341 ;; This function is called by:
  1342 ;;		_init_debug
  1343 ;;		_LCDWriteInt
  1344 ;;		_LCDWriteHexa
  1345 ;;		_LCDWriteFloat
  1346 ;; This function uses a non-reentrant model
  1347 ;;
  1348                           
  1349                           	psect	text7
  1350  0012C4                     __ptext7:
  1351                           	opt stack 0
  1352  0012C4                     _LCDWriteStr:
  1353                           	opt stack 15
  1354                           
  1355                           ;lcd.c: 195: UINT8_T i = 0;
  1356                           
  1357                           ;incstack = 0
  1358  0012C4  0E00               	movlw	0
  1359  0012C6  6E33               	movwf	LCDWriteStr@i,c
  1360                           
  1361                           ;lcd.c: 197: while (string[i])
  1362  0012C8  D01E               	goto	l1456
  1363  0012CA                     l1452:
  1364                           
  1365                           ;lcd.c: 198: LCDPutChar(string[i++]);
  1366  0012CA  5033               	movf	LCDWriteStr@i,w,c
  1367  0012CC  0D01               	mullw	1
  1368  0012CE  C02F  F031         	movff	LCDWriteStr@string,??_LCDWriteStr
  1369  0012D2  C030  F032         	movff	LCDWriteStr@string+1,??_LCDWriteStr+1
  1370  0012D6  50F3               	movf	prodl,w,c
  1371  0012D8  2631               	addwf	??_LCDWriteStr,f,c
  1372  0012DA  50F4               	movf	prodh,w,c
  1373  0012DC  2232               	addwfc	??_LCDWriteStr+1,f,c
  1374  0012DE  C031  FFF6         	movff	??_LCDWriteStr,tblptrl
  1375  0012E2  C032  FFF7         	movff	??_LCDWriteStr+1,tblptrh
  1376  0012E6  0E00               	movlw	low (__smallconst shr (0+16))
  1377  0012E8  6EF8               	movwf	tblptru,c
  1378  0012EA  0E0F               	movlw	(high __ramtop+-1)
  1379  0012EC  64F7               	cpfsgt	tblptrh,c
  1380  0012EE  D003               	bra	u637
  1381  0012F0  0008               	tblrd		*
  1382  0012F2  50F5               	movf	tablat,w,c
  1383  0012F4  D005               	bra	u630
  1384  0012F6                     u637:
  1385  0012F6  CFF6 FFE9          	movff	tblptrl,fsr0l
  1386  0012FA  CFF7 FFEA          	movff	tblptrh,fsr0h
  1387  0012FE  50EF               	movf	indf0,w,c
  1388  001300                     u630:
  1389  001300  EC1F  F00C         	call	_LCDPutChar
  1390  001304  2A33               	incf	LCDWriteStr@i,f,c
  1391  001306                     l1456:
  1392  001306  5033               	movf	LCDWriteStr@i,w,c
  1393  001308  0D01               	mullw	1
  1394  00130A  C02F  F031         	movff	LCDWriteStr@string,??_LCDWriteStr
  1395  00130E  C030  F032         	movff	LCDWriteStr@string+1,??_LCDWriteStr+1
  1396  001312  50F3               	movf	prodl,w,c
  1397  001314  2631               	addwf	??_LCDWriteStr,f,c
  1398  001316  50F4               	movf	prodh,w,c
  1399  001318  2232               	addwfc	??_LCDWriteStr+1,f,c
  1400  00131A  C031  FFF6         	movff	??_LCDWriteStr,tblptrl
  1401  00131E  C032  FFF7         	movff	??_LCDWriteStr+1,tblptrh
  1402  001322  0E00               	movlw	low (__smallconst shr (0+16))
  1403  001324  6EF8               	movwf	tblptru,c
  1404  001326  0E0F               	movlw	(high __ramtop+-1)
  1405  001328  64F7               	cpfsgt	tblptrh,c
  1406  00132A  D003               	bra	u647
  1407  00132C  0008               	tblrd		*
  1408  00132E  50F5               	movf	tablat,w,c
  1409  001330  D005               	bra	u640
  1410  001332                     u647:
  1411  001332  CFF6 FFE9          	movff	tblptrl,fsr0l
  1412  001336  CFF7 FFEA          	movff	tblptrh,fsr0h
  1413  00133A  50EF               	movf	indf0,w,c
  1414  00133C                     u640:
  1415  00133C  0900               	iorlw	0
  1416  00133E  B4D8               	btfsc	status,2,c
  1417  001340  0012               	return	
  1418  001342  D7C3               	goto	l1452
  1419  001344                     __end_of_LCDWriteStr:
  1420                           	opt stack 0
  1421                           tblptru	equ	0xFF8
  1422                           tblptrh	equ	0xFF7
  1423                           tblptrl	equ	0xFF6
  1424                           tablat	equ	0xFF5
  1425                           prodh	equ	0xFF4
  1426                           prodl	equ	0xFF3
  1427                           intcon	equ	0xFF2
  1428                           intcon2	equ	0xFF1
  1429                           intcon3	equ	0xFF0
  1430                           indf0	equ	0xFEF
  1431                           postinc0	equ	0xFEE
  1432                           fsr0h	equ	0xFEA
  1433                           fsr0l	equ	0xFE9
  1434                           postdec1	equ	0xFE5
  1435                           fsr1l	equ	0xFE1
  1436                           status	equ	0xFD8
  1437                           
  1438 ;; *************** function _LCDPutChar *****************
  1439 ;; Defined at:
  1440 ;;		line 180 in file "lcd.c"
  1441 ;; Parameters:    Size  Location     Type
  1442 ;;  data            1    wreg     unsigned char 
  1443 ;; Auto vars:     Size  Location     Type
  1444 ;;  data            1   45[COMRAM] unsigned char 
  1445 ;; Return value:  Size  Location     Type
  1446 ;;                  1    wreg      void 
  1447 ;; Registers used:
  1448 ;;		wreg, status,2, status,0, cstack
  1449 ;; Tracked objects:
  1450 ;;		On entry : 0/0
  1451 ;;		On exit  : 0/0
  1452 ;;		Unchanged: 0/0
  1453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1455 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1457 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1458 ;;Total ram usage:        1 bytes
  1459 ;; Hardware stack levels used:    1
  1460 ;; Hardware stack levels required when called:   10
  1461 ;; This function calls:
  1462 ;;		_WaitLCD
  1463 ;;		_WriteByte
  1464 ;; This function is called by:
  1465 ;;		_LCDWriteStr
  1466 ;;		_LCDPutByte
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text8
  1471  00183E                     __ptext8:
  1472                           	opt stack 0
  1473  00183E                     _LCDPutChar:
  1474                           	opt stack 15
  1475                           
  1476                           ;incstack = 0
  1477                           ;LCDPutChar@data stored from wreg
  1478  00183E  6E2E               	movwf	LCDPutChar@data,c
  1479                           
  1480                           ;lcd.c: 182: WriteByte(0, data);
  1481  001840  C02E  F02C         	movff	LCDPutChar@data,WriteByte@data
  1482  001844  0E00               	movlw	0
  1483  001846  ECFC  F00B         	call	_WriteByte
  1484                           
  1485                           ;lcd.c: 183: WaitLCD();
  1486  00184A  EC28  F00C         	call	_WaitLCD	;wreg free
  1487  00184E  0012               	return		;funcret
  1488  001850                     __end_of_LCDPutChar:
  1489                           	opt stack 0
  1490                           tblptru	equ	0xFF8
  1491                           tblptrh	equ	0xFF7
  1492                           tblptrl	equ	0xFF6
  1493                           tablat	equ	0xFF5
  1494                           prodh	equ	0xFF4
  1495                           prodl	equ	0xFF3
  1496                           intcon	equ	0xFF2
  1497                           intcon2	equ	0xFF1
  1498                           intcon3	equ	0xFF0
  1499                           indf0	equ	0xFEF
  1500                           postinc0	equ	0xFEE
  1501                           fsr0h	equ	0xFEA
  1502                           fsr0l	equ	0xFE9
  1503                           postdec1	equ	0xFE5
  1504                           fsr1l	equ	0xFE1
  1505                           status	equ	0xFD8
  1506                           
  1507 ;; *************** function _LCDGoto *****************
  1508 ;; Defined at:
  1509 ;;		line 171 in file "lcd.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;  column          1    wreg     unsigned char 
  1512 ;;  row             1   45[COMRAM] unsigned char 
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;  column          1   50[COMRAM] unsigned char 
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  1    wreg      void 
  1517 ;; Registers used:
  1518 ;;		wreg, status,2, status,0, cstack
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1524 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1525 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1526 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1527 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1528 ;;Total ram usage:        6 bytes
  1529 ;; Hardware stack levels used:    1
  1530 ;; Hardware stack levels required when called:   10
  1531 ;; This function calls:
  1532 ;;		_WaitLCD
  1533 ;;		_WriteByte
  1534 ;; This function is called by:
  1535 ;;		_init_debug
  1536 ;;		_LCDWriteInt
  1537 ;;		_LCDWriteHexa
  1538 ;;		_LCDWriteFloat
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           	psect	text9
  1543  0016C4                     __ptext9:
  1544                           	opt stack 0
  1545  0016C4                     _LCDGoto:
  1546                           	opt stack 16
  1547                           
  1548                           ;incstack = 0
  1549                           ;LCDGoto@column stored from wreg
  1550  0016C4  6E33               	movwf	LCDGoto@column,c
  1551                           
  1552                           ;lcd.c: 173: if ((row > (2 - 1)) || (column > (16 - 1)))
  1553  0016C6  0E02               	movlw	2
  1554  0016C8  602E               	cpfslt	LCDGoto@row,c
  1555  0016CA  0012               	return	
  1556  0016CC  0E0F               	movlw	15
  1557  0016CE  6433               	cpfsgt	LCDGoto@column,c
  1558  0016D0  D001               	goto	l1440
  1559  0016D2  0012               	return	
  1560  0016D4                     l1440:
  1561                           
  1562                           ;lcd.c: 176: WriteByte(1, (row == 1) ? (0xC0 | column) : (0x80 | column));
  1563  0016D4  042E               	decf	LCDGoto@row,w,c
  1564  0016D6  B4D8               	btfsc	status,2,c
  1565  0016D8  D002               	goto	l1444
  1566  0016DA  0E80               	movlw	128
  1567  0016DC  D001               	goto	L1
  1568  0016DE                     l1444:
  1569  0016DE  0EC0               	movlw	192
  1570  0016E0                     L1:
  1571  0016E0  C033  F02F         	movff	LCDGoto@column,??_LCDGoto
  1572  0016E4  6A30               	clrf	(??_LCDGoto+1)& (0+255),c
  1573  0016E6  102F               	iorwf	??_LCDGoto,w,c
  1574  0016E8  6E31               	movwf	_LCDGoto$670,c
  1575  0016EA  5030               	movf	??_LCDGoto+1,w,c
  1576  0016EC  6E32               	movwf	_LCDGoto$670+1,c
  1577  0016EE  C031  F02C         	movff	_LCDGoto$670,WriteByte@data
  1578  0016F2  0E01               	movlw	1
  1579  0016F4  ECFC  F00B         	call	_WriteByte
  1580                           
  1581                           ;lcd.c: 177: WaitLCD();
  1582  0016F8  EC28  F00C         	call	_WaitLCD	;wreg free
  1583  0016FC  0012               	return		;funcret
  1584  0016FE                     __end_of_LCDGoto:
  1585                           	opt stack 0
  1586                           tblptru	equ	0xFF8
  1587                           tblptrh	equ	0xFF7
  1588                           tblptrl	equ	0xFF6
  1589                           tablat	equ	0xFF5
  1590                           prodh	equ	0xFF4
  1591                           prodl	equ	0xFF3
  1592                           intcon	equ	0xFF2
  1593                           intcon2	equ	0xFF1
  1594                           intcon3	equ	0xFF0
  1595                           indf0	equ	0xFEF
  1596                           postinc0	equ	0xFEE
  1597                           fsr0h	equ	0xFEA
  1598                           fsr0l	equ	0xFE9
  1599                           postdec1	equ	0xFE5
  1600                           fsr1l	equ	0xFE1
  1601                           status	equ	0xFD8
  1602                           
  1603 ;; *************** function _LCDInit *****************
  1604 ;; Defined at:
  1605 ;;		line 89 in file "lcd.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;		None
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;		None
  1610 ;; Return value:  Size  Location     Type
  1611 ;;                  1    wreg      void 
  1612 ;; Registers used:
  1613 ;;		wreg, status,2, status,0, cstack
  1614 ;; Tracked objects:
  1615 ;;		On entry : 0/0
  1616 ;;		On exit  : 0/0
  1617 ;;		Unchanged: 0/0
  1618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1622 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1623 ;;Total ram usage:        1 bytes
  1624 ;; Hardware stack levels used:    1
  1625 ;; Hardware stack levels required when called:   10
  1626 ;; This function calls:
  1627 ;;		_WaitLCD
  1628 ;;		_WriteNibble
  1629 ;; This function is called by:
  1630 ;;		_init_debug
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text10
  1635  00101E                     __ptext10:
  1636                           	opt stack 0
  1637  00101E                     _LCDInit:
  1638                           	opt stack 18
  1639                           
  1640                           ;lcd.c: 91: TRISDbits.TRISD7 = 0;
  1641                           
  1642                           ;incstack = 0
  1643  00101E  9E95               	bcf	3989,7,c	;volatile
  1644                           
  1645                           ;lcd.c: 92: TRISDbits.TRISD6 = 0;
  1646  001020  9C95               	bcf	3989,6,c	;volatile
  1647                           
  1648                           ;lcd.c: 93: TRISDbits.TRISD5 = 0;
  1649  001022  9A95               	bcf	3989,5,c	;volatile
  1650                           
  1651                           ;lcd.c: 94: TRISDbits.TRISD4 = 0;
  1652  001024  9895               	bcf	3989,4,c	;volatile
  1653                           
  1654                           ;lcd.c: 95: TRISDbits.TRISD0 = 0;
  1655  001026  9095               	bcf	3989,0,c	;volatile
  1656                           
  1657                           ;lcd.c: 96: TRISDbits.TRISD1 = 0;
  1658  001028  9295               	bcf	3989,1,c	;volatile
  1659                           
  1660                           ;lcd.c: 97: TRISDbits.TRISD2 = 0;
  1661  00102A  9495               	bcf	3989,2,c	;volatile
  1662                           
  1663                           ;lcd.c: 98: TRISDbits.TRISD3 = 0;
  1664  00102C  9695               	bcf	3989,3,c	;volatile
  1665                           
  1666                           ;lcd.c: 136: LATDbits.LATD7 = 1;
  1667  00102E  8E8C               	bsf	3980,7,c	;volatile
  1668                           
  1669                           ;lcd.c: 137: _delay(30000);
  1670  001030  0E27               	movlw	39
  1671  001032  6E2C               	movwf	??_LCDInit& (0+255),c
  1672  001034  0EF5               	movlw	245
  1673  001036                     u1077:
  1674  001036  2EE8               	decfsz	wreg,f,c
  1675  001038  D7FE               	bra	u1077
  1676  00103A  2E2C               	decfsz	??_LCDInit& (0+255),f,c
  1677  00103C  D7FC               	bra	u1077
  1678  00103E  F000               	nop	
  1679                           
  1680                           ;lcd.c: 138: WriteNibble(1, 0x03);
  1681  001040  0E03               	movlw	3
  1682  001042  6E29               	movwf	WriteNibble@data,c
  1683  001044  0E01               	movlw	1
  1684  001046  ECFE  F00A         	call	_WriteNibble
  1685                           
  1686                           ;lcd.c: 139: _delay(3000);
  1687  00104A  0E04               	movlw	4
  1688  00104C  6E2C               	movwf	??_LCDInit& (0+255),c
  1689  00104E  0EE4               	movlw	228
  1690  001050                     u1087:
  1691  001050  2EE8               	decfsz	wreg,f,c
  1692  001052  D7FE               	bra	u1087
  1693  001054  2E2C               	decfsz	??_LCDInit& (0+255),f,c
  1694  001056  D7FC               	bra	u1087
  1695  001058  D000               	nop2	
  1696                           
  1697                           ;lcd.c: 140: WriteNibble(1, 0x03);
  1698  00105A  0E03               	movlw	3
  1699  00105C  6E29               	movwf	WriteNibble@data,c
  1700  00105E  0E01               	movlw	1
  1701  001060  ECFE  F00A         	call	_WriteNibble
  1702                           
  1703                           ;lcd.c: 141: _delay(100);
  1704  001064  0E21               	movlw	33
  1705  001066                     u1097:
  1706  001066  2EE8               	decfsz	wreg,f,c
  1707  001068  D7FE               	bra	u1097
  1708  00106A  F000               	nop	
  1709                           
  1710                           ;lcd.c: 142: WriteNibble(1, 0x03);
  1711  00106C  0E03               	movlw	3
  1712  00106E  6E29               	movwf	WriteNibble@data,c
  1713  001070  0E01               	movlw	1
  1714  001072  ECFE  F00A         	call	_WriteNibble
  1715                           
  1716                           ;lcd.c: 143: _delay(100);
  1717  001076  0E21               	movlw	33
  1718  001078                     u1107:
  1719  001078  2EE8               	decfsz	wreg,f,c
  1720  00107A  D7FE               	bra	u1107
  1721  00107C  F000               	nop	
  1722                           
  1723                           ;lcd.c: 144: WriteNibble(1, 0b00000010);
  1724  00107E  0E02               	movlw	2
  1725  001080  6E29               	movwf	WriteNibble@data,c
  1726  001082  0E01               	movlw	1
  1727  001084  ECFE  F00A         	call	_WriteNibble
  1728                           
  1729                           ;lcd.c: 145: WaitLCD();
  1730  001088  EC28  F00C         	call	_WaitLCD	;wreg free
  1731                           
  1732                           ;lcd.c: 146: WriteNibble(1, 0b00000010);
  1733  00108C  0E02               	movlw	2
  1734  00108E  6E29               	movwf	WriteNibble@data,c
  1735  001090  0E01               	movlw	1
  1736  001092  ECFE  F00A         	call	_WriteNibble
  1737                           
  1738                           ;lcd.c: 147: WriteNibble(1, 0b00001000);
  1739  001096  0E08               	movlw	8
  1740  001098  6E29               	movwf	WriteNibble@data,c
  1741  00109A  0E01               	movlw	1
  1742  00109C  ECFE  F00A         	call	_WriteNibble
  1743                           
  1744                           ;lcd.c: 148: WaitLCD();
  1745  0010A0  EC28  F00C         	call	_WaitLCD	;wreg free
  1746                           
  1747                           ;lcd.c: 149: WriteNibble(1, 0b00000000);
  1748  0010A4  0E00               	movlw	0
  1749  0010A6  6E29               	movwf	WriteNibble@data,c
  1750  0010A8  0E01               	movlw	1
  1751  0010AA  ECFE  F00A         	call	_WriteNibble
  1752                           
  1753                           ;lcd.c: 150: WriteNibble(1, 0b00001000);
  1754  0010AE  0E08               	movlw	8
  1755  0010B0  6E29               	movwf	WriteNibble@data,c
  1756  0010B2  0E01               	movlw	1
  1757  0010B4  ECFE  F00A         	call	_WriteNibble
  1758                           
  1759                           ;lcd.c: 151: WaitLCD();
  1760  0010B8  EC28  F00C         	call	_WaitLCD	;wreg free
  1761                           
  1762                           ;lcd.c: 152: WriteNibble(1, 0b00000000);
  1763  0010BC  0E00               	movlw	0
  1764  0010BE  6E29               	movwf	WriteNibble@data,c
  1765  0010C0  0E01               	movlw	1
  1766  0010C2  ECFE  F00A         	call	_WriteNibble
  1767                           
  1768                           ;lcd.c: 153: WriteNibble(1, 0b00001100);
  1769  0010C6  0E0C               	movlw	12
  1770  0010C8  6E29               	movwf	WriteNibble@data,c
  1771  0010CA  0E01               	movlw	1
  1772  0010CC  ECFE  F00A         	call	_WriteNibble
  1773                           
  1774                           ;lcd.c: 155: WaitLCD();
  1775  0010D0  EC28  F00C         	call	_WaitLCD	;wreg free
  1776                           
  1777                           ;lcd.c: 156: WriteNibble(1, 0b00000000);
  1778  0010D4  0E00               	movlw	0
  1779  0010D6  6E29               	movwf	WriteNibble@data,c
  1780  0010D8  0E01               	movlw	1
  1781  0010DA  ECFE  F00A         	call	_WriteNibble
  1782                           
  1783                           ;lcd.c: 157: WriteNibble(1, 0b00000001);
  1784  0010DE  0E01               	movlw	1
  1785  0010E0  6E29               	movwf	WriteNibble@data,c
  1786  0010E2  0E01               	movlw	1
  1787  0010E4  ECFE  F00A         	call	_WriteNibble
  1788                           
  1789                           ;lcd.c: 158: WaitLCD();
  1790  0010E8  EC28  F00C         	call	_WaitLCD	;wreg free
  1791                           
  1792                           ;lcd.c: 159: WriteNibble(1, 0b00000000);
  1793  0010EC  0E00               	movlw	0
  1794  0010EE  6E29               	movwf	WriteNibble@data,c
  1795  0010F0  0E01               	movlw	1
  1796  0010F2  ECFE  F00A         	call	_WriteNibble
  1797                           
  1798                           ;lcd.c: 160: WriteNibble(1, 0b00000110);
  1799  0010F6  0E06               	movlw	6
  1800  0010F8  6E29               	movwf	WriteNibble@data,c
  1801  0010FA  0E01               	movlw	1
  1802  0010FC  ECFE  F00A         	call	_WriteNibble
  1803                           
  1804                           ;lcd.c: 161: WaitLCD();
  1805  001100  EC28  F00C         	call	_WaitLCD	;wreg free
  1806  001104  0012               	return		;funcret
  1807  001106                     __end_of_LCDInit:
  1808                           	opt stack 0
  1809                           tblptru	equ	0xFF8
  1810                           tblptrh	equ	0xFF7
  1811                           tblptrl	equ	0xFF6
  1812                           tablat	equ	0xFF5
  1813                           prodh	equ	0xFF4
  1814                           prodl	equ	0xFF3
  1815                           intcon	equ	0xFF2
  1816                           intcon2	equ	0xFF1
  1817                           intcon3	equ	0xFF0
  1818                           indf0	equ	0xFEF
  1819                           postinc0	equ	0xFEE
  1820                           fsr0h	equ	0xFEA
  1821                           fsr0l	equ	0xFE9
  1822                           wreg	equ	0xFE8
  1823                           postdec1	equ	0xFE5
  1824                           fsr1l	equ	0xFE1
  1825                           status	equ	0xFD8
  1826                           
  1827 ;; *************** function _LCDClear *****************
  1828 ;; Defined at:
  1829 ;;		line 164 in file "lcd.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;		None
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;		None
  1834 ;; Return value:  Size  Location     Type
  1835 ;;                  1    wreg      void 
  1836 ;; Registers used:
  1837 ;;		wreg, status,2, status,0, cstack
  1838 ;; Tracked objects:
  1839 ;;		On entry : 0/0
  1840 ;;		On exit  : 0/0
  1841 ;;		Unchanged: 0/0
  1842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1847 ;;Total ram usage:        1 bytes
  1848 ;; Hardware stack levels used:    1
  1849 ;; Hardware stack levels required when called:   10
  1850 ;; This function calls:
  1851 ;;		_WaitLCD
  1852 ;;		_WriteByte
  1853 ;; This function is called by:
  1854 ;;		_init_debug
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text11
  1859  0017BC                     __ptext11:
  1860                           	opt stack 0
  1861  0017BC                     _LCDClear:
  1862                           	opt stack 18
  1863                           
  1864                           ;lcd.c: 166: WriteByte(1, 0x01);
  1865                           
  1866                           ;incstack = 0
  1867  0017BC  0E01               	movlw	1
  1868  0017BE  6E2C               	movwf	WriteByte@data,c
  1869  0017C0  0E01               	movlw	1
  1870  0017C2  ECFC  F00B         	call	_WriteByte
  1871                           
  1872                           ;lcd.c: 167: _delay(12500);
  1873  0017C6  0E11               	movlw	17
  1874  0017C8  6E2E               	movwf	??_LCDClear& (0+255),c
  1875  0017CA  0E3A               	movlw	58
  1876  0017CC                     u1117:
  1877  0017CC  2EE8               	decfsz	wreg,f,c
  1878  0017CE  D7FE               	bra	u1117
  1879  0017D0  2E2E               	decfsz	??_LCDClear& (0+255),f,c
  1880  0017D2  D7FC               	bra	u1117
  1881  0017D4  D000               	nop2	
  1882                           
  1883                           ;lcd.c: 168: WaitLCD();
  1884  0017D6  EC28  F00C         	call	_WaitLCD	;wreg free
  1885  0017DA  0012               	return		;funcret
  1886  0017DC                     __end_of_LCDClear:
  1887                           	opt stack 0
  1888                           tblptru	equ	0xFF8
  1889                           tblptrh	equ	0xFF7
  1890                           tblptrl	equ	0xFF6
  1891                           tablat	equ	0xFF5
  1892                           prodh	equ	0xFF4
  1893                           prodl	equ	0xFF3
  1894                           intcon	equ	0xFF2
  1895                           intcon2	equ	0xFF1
  1896                           intcon3	equ	0xFF0
  1897                           indf0	equ	0xFEF
  1898                           postinc0	equ	0xFEE
  1899                           fsr0h	equ	0xFEA
  1900                           fsr0l	equ	0xFE9
  1901                           wreg	equ	0xFE8
  1902                           postdec1	equ	0xFE5
  1903                           fsr1l	equ	0xFE1
  1904                           status	equ	0xFD8
  1905                           
  1906 ;; *************** function _WriteByte *****************
  1907 ;; Defined at:
  1908 ;;		line 83 in file "lcd.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;  cmd             1    wreg     unsigned char 
  1911 ;;  data            1   43[COMRAM] unsigned char 
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;  cmd             1   44[COMRAM] unsigned char 
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  1    wreg      void 
  1916 ;; Registers used:
  1917 ;;		wreg, status,2, status,0, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1923 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;Total ram usage:        2 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    9
  1930 ;; This function calls:
  1931 ;;		_WriteNibble
  1932 ;; This function is called by:
  1933 ;;		_LCDClear
  1934 ;;		_LCDGoto
  1935 ;;		_LCDPutChar
  1936 ;;		_LCDShiftDisplay
  1937 ;; This function uses a non-reentrant model
  1938 ;;
  1939                           
  1940                           	psect	text12
  1941  0017F8                     __ptext12:
  1942                           	opt stack 0
  1943  0017F8                     _WriteByte:
  1944                           	opt stack 15
  1945                           
  1946                           ;incstack = 0
  1947                           ;WriteByte@cmd stored from wreg
  1948  0017F8  6E2D               	movwf	WriteByte@cmd,c
  1949                           
  1950                           ;lcd.c: 85: WriteNibble(cmd, data >> 4);
  1951  0017FA  382C               	swapf	WriteByte@data,w,c
  1952  0017FC  0B0F               	andlw	15
  1953  0017FE  6E29               	movwf	WriteNibble@data,c
  1954  001800  502D               	movf	WriteByte@cmd,w,c
  1955  001802  ECFE  F00A         	call	_WriteNibble
  1956                           
  1957                           ;lcd.c: 86: WriteNibble(cmd, data);
  1958  001806  C02C  F029         	movff	WriteByte@data,WriteNibble@data
  1959  00180A  502D               	movf	WriteByte@cmd,w,c
  1960  00180C  ECFE  F00A         	call	_WriteNibble
  1961  001810  0012               	return		;funcret
  1962  001812                     __end_of_WriteByte:
  1963                           	opt stack 0
  1964                           tblptru	equ	0xFF8
  1965                           tblptrh	equ	0xFF7
  1966                           tblptrl	equ	0xFF6
  1967                           tablat	equ	0xFF5
  1968                           prodh	equ	0xFF4
  1969                           prodl	equ	0xFF3
  1970                           intcon	equ	0xFF2
  1971                           intcon2	equ	0xFF1
  1972                           intcon3	equ	0xFF0
  1973                           indf0	equ	0xFEF
  1974                           postinc0	equ	0xFEE
  1975                           fsr0h	equ	0xFEA
  1976                           fsr0l	equ	0xFE9
  1977                           wreg	equ	0xFE8
  1978                           postdec1	equ	0xFE5
  1979                           fsr1l	equ	0xFE1
  1980                           status	equ	0xFD8
  1981                           
  1982 ;; *************** function _WriteNibble *****************
  1983 ;; Defined at:
  1984 ;;		line 66 in file "lcd.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;  cmd             1    wreg     unsigned char 
  1987 ;;  data            1   40[COMRAM] unsigned char 
  1988 ;; Auto vars:     Size  Location     Type
  1989 ;;  cmd             1   42[COMRAM] unsigned char 
  1990 ;; Return value:  Size  Location     Type
  1991 ;;                  1    wreg      void 
  1992 ;; Registers used:
  1993 ;;		wreg, status,2, status,0
  1994 ;; Tracked objects:
  1995 ;;		On entry : 0/0
  1996 ;;		On exit  : 0/0
  1997 ;;		Unchanged: 0/0
  1998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1999 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2000 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2001 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2002 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2003 ;;Total ram usage:        3 bytes
  2004 ;; Hardware stack levels used:    1
  2005 ;; Hardware stack levels required when called:    8
  2006 ;; This function calls:
  2007 ;;		Nothing
  2008 ;; This function is called by:
  2009 ;;		_WriteByte
  2010 ;;		_LCDInit
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           	psect	text13
  2015  0015FC                     __ptext13:
  2016                           	opt stack 0
  2017  0015FC                     _WriteNibble:
  2018                           	opt stack 15
  2019                           
  2020                           ;incstack = 0
  2021                           ;WriteNibble@cmd stored from wreg
  2022  0015FC  6E2B               	movwf	WriteNibble@cmd,c
  2023                           
  2024                           ;lcd.c: 68: LATDbits.LATD4 = (cmd ? 0 : 1);
  2025  0015FE  502B               	movf	WriteNibble@cmd,w,c
  2026  001600  A4D8               	btfss	status,2,c
  2027  001602  D003               	goto	u540
  2028  001604  6A2A               	clrf	??_WriteNibble& (0+255),c
  2029  001606  2A2A               	incf	??_WriteNibble& (0+255),f,c
  2030  001608  D001               	goto	u558
  2031  00160A                     u540:
  2032  00160A  6A2A               	clrf	??_WriteNibble& (0+255),c
  2033  00160C                     u558:
  2034  00160C  3A2A               	swapf	??_WriteNibble,f,c
  2035  00160E  508C               	movf	3980,w,c	;volatile
  2036  001610  182A               	xorwf	??_WriteNibble,w,c
  2037  001612  0BEF               	andlw	-17
  2038  001614  182A               	xorwf	??_WriteNibble,w,c
  2039  001616  6E8C               	movwf	3980,c	;volatile
  2040                           
  2041                           ;lcd.c: 69: LATDbits.LATD5 = 0;
  2042  001618  9A8C               	bcf	3980,5,c	;volatile
  2043                           
  2044                           ;lcd.c: 70: LATDbits.LATD6 = 1;
  2045  00161A  8C8C               	bsf	3980,6,c	;volatile
  2046                           
  2047                           ;lcd.c: 72: LATDbits.LATD0 = LATDbits.LATD1 = LATDbits.LATD2 = LATDbits.LATD3 = 0;
  2048  00161C  968C               	bcf	3980,3,c	;volatile
  2049  00161E  948C               	bcf	3980,2,c	;volatile
  2050  001620  928C               	bcf	3980,1,c	;volatile
  2051  001622  908C               	bcf	3980,0,c	;volatile
  2052                           
  2053                           ;lcd.c: 73: __nop();
  2054  001624  F000               	nop	
  2055                           
  2056                           ;lcd.c: 74: __nop();
  2057  001626  F000               	nop	
  2058                           
  2059                           ;lcd.c: 76: LATD = (LATD & 0xF0) | (data & 0x0F);
  2060  001628  C029  F02A         	movff	WriteNibble@data,??_WriteNibble
  2061  00162C  0E0F               	movlw	15
  2062  00162E  162A               	andwf	??_WriteNibble,f,c
  2063  001630  508C               	movf	3980,w,c	;volatile
  2064  001632  0BF0               	andlw	240
  2065  001634  102A               	iorwf	??_WriteNibble,w,c
  2066  001636  6E8C               	movwf	3980,c	;volatile
  2067                           
  2068                           ;lcd.c: 77: __nop();
  2069  001638  F000               	nop	
  2070                           
  2071                           ;lcd.c: 78: __nop();
  2072  00163A  F000               	nop	
  2073                           
  2074                           ;lcd.c: 80: LATDbits.LATD6 = 0;
  2075  00163C  9C8C               	bcf	3980,6,c	;volatile
  2076  00163E  0012               	return		;funcret
  2077  001640                     __end_of_WriteNibble:
  2078                           	opt stack 0
  2079                           tblptru	equ	0xFF8
  2080                           tblptrh	equ	0xFF7
  2081                           tblptrl	equ	0xFF6
  2082                           tablat	equ	0xFF5
  2083                           prodh	equ	0xFF4
  2084                           prodl	equ	0xFF3
  2085                           intcon	equ	0xFF2
  2086                           intcon2	equ	0xFF1
  2087                           intcon3	equ	0xFF0
  2088                           indf0	equ	0xFEF
  2089                           postinc0	equ	0xFEE
  2090                           fsr0h	equ	0xFEA
  2091                           fsr0l	equ	0xFE9
  2092                           wreg	equ	0xFE8
  2093                           postdec1	equ	0xFE5
  2094                           fsr1l	equ	0xFE1
  2095                           status	equ	0xFD8
  2096                           
  2097 ;; *************** function _WaitLCD *****************
  2098 ;; Defined at:
  2099 ;;		line 52 in file "lcd.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;		None
  2102 ;; Auto vars:     Size  Location     Type
  2103 ;;  status          1   41[COMRAM] unsigned char 
  2104 ;; Return value:  Size  Location     Type
  2105 ;;                  1    wreg      void 
  2106 ;; Registers used:
  2107 ;;		wreg, status,2, status,0, cstack
  2108 ;; Tracked objects:
  2109 ;;		On entry : 0/0
  2110 ;;		On exit  : 0/0
  2111 ;;		Unchanged: 0/0
  2112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2114 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2116 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2117 ;;Total ram usage:        1 bytes
  2118 ;; Hardware stack levels used:    1
  2119 ;; Hardware stack levels required when called:    9
  2120 ;; This function calls:
  2121 ;;		_ReadByte
  2122 ;; This function is called by:
  2123 ;;		_LCDInit
  2124 ;;		_LCDClear
  2125 ;;		_LCDGoto
  2126 ;;		_LCDPutChar
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           	psect	text14
  2131  001850                     __ptext14:
  2132                           	opt stack 0
  2133  001850                     _WaitLCD:
  2134                           	opt stack 15
  2135                           
  2136                           ;lcd.c: 54: UINT8_T status;
  2137                           ;lcd.c: 56: LATDbits.LATD4 = 0;
  2138                           
  2139                           ;incstack = 0
  2140  001850  988C               	bcf	3980,4,c	;volatile
  2141                           
  2142                           ;lcd.c: 57: LATDbits.LATD5 = 1;
  2143  001852  8A8C               	bsf	3980,5,c	;volatile
  2144  001854                     l1376:
  2145                           
  2146                           ;lcd.c: 60: status = ReadByte();
  2147  001854  EC9C  F00B         	call	_ReadByte	;wreg free
  2148  001858  6E2A               	movwf	WaitLCD@status,c
  2149                           
  2150                           ;lcd.c: 61: } while (status & 0x80);
  2151  00185A  BE2A               	btfsc	WaitLCD@status,7,c
  2152  00185C  D7FB               	goto	l1376
  2153                           
  2154                           ;lcd.c: 63: LATDbits.LATD5 = 0;
  2155  00185E  9A8C               	bcf	3980,5,c	;volatile
  2156  001860  0012               	return		;funcret
  2157  001862                     __end_of_WaitLCD:
  2158                           	opt stack 0
  2159                           tblptru	equ	0xFF8
  2160                           tblptrh	equ	0xFF7
  2161                           tblptrl	equ	0xFF6
  2162                           tablat	equ	0xFF5
  2163                           prodh	equ	0xFF4
  2164                           prodl	equ	0xFF3
  2165                           intcon	equ	0xFF2
  2166                           intcon2	equ	0xFF1
  2167                           intcon3	equ	0xFF0
  2168                           indf0	equ	0xFEF
  2169                           postinc0	equ	0xFEE
  2170                           fsr0h	equ	0xFEA
  2171                           fsr0l	equ	0xFE9
  2172                           wreg	equ	0xFE8
  2173                           postdec1	equ	0xFE5
  2174                           fsr1l	equ	0xFE1
  2175                           status	equ	0xFD8
  2176                           
  2177 ;; *************** function _ReadByte *****************
  2178 ;; Defined at:
  2179 ;;		line 21 in file "lcd.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;		None
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;  status          1   40[COMRAM] unsigned char 
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  1    wreg      unsigned char 
  2186 ;; Registers used:
  2187 ;;		wreg, status,2, status,0
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2194 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;Total ram usage:        1 bytes
  2198 ;; Hardware stack levels used:    1
  2199 ;; Hardware stack levels required when called:    8
  2200 ;; This function calls:
  2201 ;;		Nothing
  2202 ;; This function is called by:
  2203 ;;		_WaitLCD
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207                           	psect	text15
  2208  001738                     __ptext15:
  2209                           	opt stack 0
  2210  001738                     _ReadByte:
  2211                           	opt stack 15
  2212                           
  2213                           ;lcd.c: 23: UINT8_T status;
  2214                           ;lcd.c: 25: TRISDbits.TRISD0 = 1;
  2215                           
  2216                           ;incstack = 0
  2217  001738  8095               	bsf	3989,0,c	;volatile
  2218                           
  2219                           ;lcd.c: 26: TRISDbits.TRISD1 = 1;
  2220  00173A  8295               	bsf	3989,1,c	;volatile
  2221                           
  2222                           ;lcd.c: 27: TRISDbits.TRISD2 = 1;
  2223  00173C  8495               	bsf	3989,2,c	;volatile
  2224                           
  2225                           ;lcd.c: 28: TRISDbits.TRISD3 = 1;
  2226  00173E  8695               	bsf	3989,3,c	;volatile
  2227                           
  2228                           ;lcd.c: 30: LATDbits.LATD6 = 1;
  2229  001740  8C8C               	bsf	3980,6,c	;volatile
  2230                           
  2231                           ;lcd.c: 31: __nop();
  2232  001742  F000               	nop	
  2233                           
  2234                           ;lcd.c: 32: __nop();
  2235  001744  F000               	nop	
  2236                           
  2237                           ;lcd.c: 34: status = PORTD << 4;
  2238  001746  3883               	swapf	3971,w,c	;volatile
  2239  001748  0BF0               	andlw	240
  2240  00174A  6E29               	movwf	ReadByte@status,c
  2241                           
  2242                           ;lcd.c: 35: LATDbits.LATD6 = 0;
  2243  00174C  9C8C               	bcf	3980,6,c	;volatile
  2244                           
  2245                           ;lcd.c: 37: LATDbits.LATD6 = 1;
  2246  00174E  8C8C               	bsf	3980,6,c	;volatile
  2247                           
  2248                           ;lcd.c: 38: __nop();
  2249  001750  F000               	nop	
  2250                           
  2251                           ;lcd.c: 39: __nop();
  2252  001752  F000               	nop	
  2253                           
  2254                           ;lcd.c: 41: status |= PORTD & 0x0F;
  2255  001754  5083               	movf	3971,w,c	;volatile
  2256  001756  0B0F               	andlw	15
  2257  001758  1229               	iorwf	ReadByte@status,f,c
  2258                           
  2259                           ;lcd.c: 42: LATDbits.LATD6 = 0;
  2260  00175A  9C8C               	bcf	3980,6,c	;volatile
  2261                           
  2262                           ;lcd.c: 44: TRISDbits.TRISD0 = 0;
  2263  00175C  9095               	bcf	3989,0,c	;volatile
  2264                           
  2265                           ;lcd.c: 45: TRISDbits.TRISD1 = 0;
  2266  00175E  9295               	bcf	3989,1,c	;volatile
  2267                           
  2268                           ;lcd.c: 46: TRISDbits.TRISD2 = 0;
  2269  001760  9495               	bcf	3989,2,c	;volatile
  2270                           
  2271                           ;lcd.c: 47: TRISDbits.TRISD3 = 0;
  2272  001762  9695               	bcf	3989,3,c	;volatile
  2273                           
  2274                           ;lcd.c: 49: return(status);
  2275  001764  5029               	movf	ReadByte@status,w,c
  2276  001766  0012               	return	
  2277  001768                     __end_of_ReadByte:
  2278                           	opt stack 0
  2279                           tblptru	equ	0xFF8
  2280                           tblptrh	equ	0xFF7
  2281                           tblptrl	equ	0xFF6
  2282                           tablat	equ	0xFF5
  2283                           prodh	equ	0xFF4
  2284                           prodl	equ	0xFF3
  2285                           intcon	equ	0xFF2
  2286                           intcon2	equ	0xFF1
  2287                           intcon3	equ	0xFF0
  2288                           indf0	equ	0xFEF
  2289                           postinc0	equ	0xFEE
  2290                           fsr0h	equ	0xFEA
  2291                           fsr0l	equ	0xFE9
  2292                           wreg	equ	0xFE8
  2293                           postdec1	equ	0xFE5
  2294                           fsr1l	equ	0xFE1
  2295                           status	equ	0xFD8
  2296                           
  2297 ;; *************** function _ISR *****************
  2298 ;; Defined at:
  2299 ;;		line 285 in file "main.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;		None
  2302 ;; Auto vars:     Size  Location     Type
  2303 ;;  i               2   38[COMRAM] int 
  2304 ;; Return value:  Size  Location     Type
  2305 ;;                  1    wreg      void 
  2306 ;; Registers used:
  2307 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2308 ;; Tracked objects:
  2309 ;;		On entry : 0/0
  2310 ;;		On exit  : 0/0
  2311 ;;		Unchanged: 0/0
  2312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2314 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2315 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2316 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2317 ;;Total ram usage:       17 bytes
  2318 ;; Hardware stack levels used:    1
  2319 ;; Hardware stack levels required when called:    7
  2320 ;; This function calls:
  2321 ;;		_flashlight
  2322 ;;		_pedometer
  2323 ;;		_searched
  2324 ;;		_synchronize
  2325 ;; This function is called by:
  2326 ;;		Interrupt level 2
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           	psect	intcode
  2331  000008                     __pintcode:
  2332                           	opt stack 0
  2333  000008                     _ISR:
  2334                           	opt stack 15
  2335                           
  2336                           ;incstack = 0
  2337  000008  8237               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2338  00000A  CFFA F019          	movff	pclath,??_ISR+1
  2339  00000E  CFFB F01A          	movff	pclatu,??_ISR+2
  2340  000012  CFE9 F01B          	movff	fsr0l,??_ISR+3
  2341  000016  CFEA F01C          	movff	fsr0h,??_ISR+4
  2342  00001A  CFE1 F01D          	movff	fsr1l,??_ISR+5
  2343  00001E  CFE2 F01E          	movff	fsr1h,??_ISR+6
  2344  000022  CFD9 F01F          	movff	fsr2l,??_ISR+7
  2345  000026  CFDA F020          	movff	fsr2h,??_ISR+8
  2346  00002A  CFF3 F021          	movff	prodl,??_ISR+9
  2347  00002E  CFF4 F022          	movff	prodh,??_ISR+10
  2348  000032  CFF6 F023          	movff	tblptrl,??_ISR+11
  2349  000036  CFF7 F024          	movff	tblptrh,??_ISR+12
  2350  00003A  CFF8 F025          	movff	tblptru,??_ISR+13
  2351  00003E  CFF5 F026          	movff	tablat,??_ISR+14
  2352                           
  2353                           ;main.c: 287: if (INTCONbits.INT0IF) { pedometer(); }
  2354  000042  B2F2               	btfsc	intcon,1,c	;volatile
  2355  000044  EC4B  F00C         	call	_pedometer	;wreg free
  2356                           
  2357                           ;main.c: 288: if (INTCON3bits.INT1IF) { searched(); }
  2358  000048  B0F0               	btfsc	intcon3,0,c	;volatile
  2359  00004A  EC83  F008         	call	_searched	;wreg free
  2360                           
  2361                           ;main.c: 290: if (INTCON3bits.INT2IF) {
  2362  00004E  A2F0               	btfss	intcon3,1,c	;volatile
  2363  000050  D027               	goto	i2l79
  2364                           
  2365                           ;main.c: 292: int i = 0;
  2366  000052  0E00               	movlw	0
  2367  000054  6E28               	movwf	ISR@i+1,c
  2368  000056  0E00               	movlw	0
  2369  000058  6E27               	movwf	ISR@i,c
  2370                           
  2371                           ;main.c: 293: for (i = 0; i < 30; i++) {
  2372  00005A  0E00               	movlw	0
  2373  00005C  6E28               	movwf	ISR@i+1,c
  2374  00005E  0E00               	movlw	0
  2375  000060  6E27               	movwf	ISR@i,c
  2376  000062                     i2l1828:
  2377  000062  BE28               	btfsc	ISR@i+1,7,c
  2378  000064  D006               	goto	i2l74
  2379  000066  5028               	movf	ISR@i+1,w,c
  2380  000068  E111               	bnz	i2l1838
  2381  00006A  0E1E               	movlw	30
  2382  00006C  5C27               	subwf	ISR@i,w,c
  2383  00006E  B0D8               	btfsc	status,0,c
  2384  000070  D00D               	goto	i2l1838
  2385  000072                     i2l74:
  2386                           
  2387                           ;main.c: 294: if (!LATBbits.LATB2) { break ; }
  2388  000072  A48A               	btfss	3978,2,c	;volatile
  2389  000074  D00B               	goto	i2l1838
  2390                           
  2391                           ;main.c: 295: _delay(25000);
  2392  000076  0E21               	movlw	33
  2393  000078  6E18               	movwf	??_ISR& (0+255),c
  2394  00007A  0E76               	movlw	118
  2395  00007C                     i2u112_47:
  2396  00007C  2EE8               	decfsz	wreg,f,c
  2397  00007E  D7FE               	bra	i2u112_47
  2398  000080  2E18               	decfsz	??_ISR& (0+255),f,c
  2399  000082  D7FC               	bra	i2u112_47
  2400  000084  D000               	nop2	
  2401  000086  4A27               	infsnz	ISR@i,f,c
  2402  000088  2A28               	incf	ISR@i+1,f,c
  2403  00008A  D7EB               	goto	i2l1828
  2404  00008C                     i2l1838:
  2405                           
  2406                           ;main.c: 296: }
  2407                           ;main.c: 298: if (i == 30) { synchronize(); }
  2408  00008C  0E1E               	movlw	30
  2409  00008E  1827               	xorwf	ISR@i,w,c
  2410  000090  1028               	iorwf	ISR@i+1,w,c
  2411  000092  A4D8               	btfss	status,2,c
  2412  000094  D003               	goto	i2l1842
  2413  000096  EC51  F00C         	call	_synchronize	;wreg free
  2414  00009A  D002               	goto	i2l79
  2415  00009C                     i2l1842:
  2416                           
  2417                           ;main.c: 300: else { flashlight(); }
  2418  00009C  ECEE  F00B         	call	_flashlight	;wreg free
  2419  0000A0                     i2l79:
  2420  0000A0  C026  FFF5         	movff	??_ISR+14,tablat
  2421  0000A4  C025  FFF8         	movff	??_ISR+13,tblptru
  2422  0000A8  C024  FFF7         	movff	??_ISR+12,tblptrh
  2423  0000AC  C023  FFF6         	movff	??_ISR+11,tblptrl
  2424  0000B0  C022  FFF4         	movff	??_ISR+10,prodh
  2425  0000B4  C021  FFF3         	movff	??_ISR+9,prodl
  2426  0000B8  C020  FFDA         	movff	??_ISR+8,fsr2h
  2427  0000BC  C01F  FFD9         	movff	??_ISR+7,fsr2l
  2428  0000C0  C01E  FFE2         	movff	??_ISR+6,fsr1h
  2429  0000C4  C01D  FFE1         	movff	??_ISR+5,fsr1l
  2430  0000C8  C01C  FFEA         	movff	??_ISR+4,fsr0h
  2431  0000CC  C01B  FFE9         	movff	??_ISR+3,fsr0l
  2432  0000D0  C01A  FFFB         	movff	??_ISR+2,pclatu
  2433  0000D4  C019  FFFA         	movff	??_ISR+1,pclath
  2434  0000D8  9237               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2435  0000DA  0011               	retfie		f
  2436  0000DC                     __end_of_ISR:
  2437                           	opt stack 0
  2438                           pclatu	equ	0xFFB
  2439                           pclath	equ	0xFFA
  2440                           tblptru	equ	0xFF8
  2441                           tblptrh	equ	0xFF7
  2442                           tblptrl	equ	0xFF6
  2443                           tablat	equ	0xFF5
  2444                           prodh	equ	0xFF4
  2445                           prodl	equ	0xFF3
  2446                           intcon	equ	0xFF2
  2447                           intcon2	equ	0xFF1
  2448                           intcon3	equ	0xFF0
  2449                           indf0	equ	0xFEF
  2450                           postinc0	equ	0xFEE
  2451                           fsr0h	equ	0xFEA
  2452                           fsr0l	equ	0xFE9
  2453                           wreg	equ	0xFE8
  2454                           postdec1	equ	0xFE5
  2455                           fsr1h	equ	0xFE2
  2456                           fsr1l	equ	0xFE1
  2457                           fsr2h	equ	0xFDA
  2458                           fsr2l	equ	0xFD9
  2459                           status	equ	0xFD8
  2460                           
  2461 ;; *************** function _synchronize *****************
  2462 ;; Defined at:
  2463 ;;		line 278 in file "main.c"
  2464 ;; Parameters:    Size  Location     Type
  2465 ;;		None
  2466 ;; Auto vars:     Size  Location     Type
  2467 ;;		None
  2468 ;; Return value:  Size  Location     Type
  2469 ;;                  1    wreg      void 
  2470 ;; Registers used:
  2471 ;;		wreg, status,2
  2472 ;; Tracked objects:
  2473 ;;		On entry : 0/0
  2474 ;;		On exit  : 0/0
  2475 ;;		Unchanged: 0/0
  2476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2481 ;;Total ram usage:        0 bytes
  2482 ;; Hardware stack levels used:    1
  2483 ;; This function calls:
  2484 ;;		Nothing
  2485 ;; This function is called by:
  2486 ;;		_ISR
  2487 ;; This function uses a non-reentrant model
  2488 ;;
  2489                           
  2490                           	psect	text17
  2491  0018A2                     __ptext17:
  2492                           	opt stack 0
  2493  0018A2                     _synchronize:
  2494                           	opt stack 21
  2495                           
  2496                           ;main.c: 281: steps = 0;
  2497                           
  2498                           ;incstack = 0
  2499  0018A2  0E00               	movlw	0
  2500  0018A4  6E35               	movwf	_steps+1,c
  2501  0018A6  0E00               	movlw	0
  2502  0018A8  6E34               	movwf	_steps,c
  2503  0018AA  0012               	return		;funcret
  2504  0018AC                     __end_of_synchronize:
  2505                           	opt stack 0
  2506                           pclatu	equ	0xFFB
  2507                           pclath	equ	0xFFA
  2508                           tblptru	equ	0xFF8
  2509                           tblptrh	equ	0xFF7
  2510                           tblptrl	equ	0xFF6
  2511                           tablat	equ	0xFF5
  2512                           prodh	equ	0xFF4
  2513                           prodl	equ	0xFF3
  2514                           intcon	equ	0xFF2
  2515                           intcon2	equ	0xFF1
  2516                           intcon3	equ	0xFF0
  2517                           indf0	equ	0xFEF
  2518                           postinc0	equ	0xFEE
  2519                           fsr0h	equ	0xFEA
  2520                           fsr0l	equ	0xFE9
  2521                           wreg	equ	0xFE8
  2522                           postdec1	equ	0xFE5
  2523                           fsr1h	equ	0xFE2
  2524                           fsr1l	equ	0xFE1
  2525                           fsr2h	equ	0xFDA
  2526                           fsr2l	equ	0xFD9
  2527                           status	equ	0xFD8
  2528                           
  2529 ;; *************** function _searched *****************
  2530 ;; Defined at:
  2531 ;;		line 251 in file "main.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;		None
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;  time            2   21[COMRAM] int 
  2536 ;;  max_time        2   19[COMRAM] int 
  2537 ;;  i               2   17[COMRAM] int 
  2538 ;; Return value:  Size  Location     Type
  2539 ;;                  1    wreg      void 
  2540 ;; Registers used:
  2541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2542 ;; Tracked objects:
  2543 ;;		On entry : 0/0
  2544 ;;		On exit  : 0/0
  2545 ;;		Unchanged: 0/0
  2546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2548 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2549 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2550 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2551 ;;Total ram usage:        9 bytes
  2552 ;; Hardware stack levels used:    1
  2553 ;; Hardware stack levels required when called:    1
  2554 ;; This function calls:
  2555 ;;		_flashlight
  2556 ;;		i2___awdiv
  2557 ;;		i2___awmod
  2558 ;; This function is called by:
  2559 ;;		_ISR
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563                           	psect	text18
  2564  001106                     __ptext18:
  2565                           	opt stack 0
  2566  001106                     _searched:
  2567                           	opt stack 20
  2568                           
  2569                           ;main.c: 253: int time = 0, max_time = 500, i = 0;
  2570                           
  2571                           ;incstack = 0
  2572  001106  0E00               	movlw	0
  2573  001108  6E17               	movwf	searched@time+1,c
  2574  00110A  0E00               	movlw	0
  2575  00110C  6E16               	movwf	searched@time,c
  2576  00110E  0E01               	movlw	1
  2577  001110  6E15               	movwf	searched@max_time+1,c
  2578  001112  0EF4               	movlw	244
  2579  001114  6E14               	movwf	searched@max_time,c
  2580  001116  0E00               	movlw	0
  2581  001118  6E13               	movwf	searched@i+1,c
  2582  00111A  0E00               	movlw	0
  2583  00111C  6E12               	movwf	searched@i,c
  2584                           
  2585                           ;main.c: 256: while (time++ < max_time) {
  2586  00111E  D039               	goto	i2l1808
  2587  001120                     i2l1802:
  2588                           
  2589                           ;main.c: 258: PR2bits.PR2 = kiwi_frequence[time%kiwi_length];
  2590  001120  C016  F001         	movff	searched@time,i2___awmod@dividend
  2591  001124  C017  F002         	movff	searched@time+1,i2___awmod@dividend+1
  2592  001128  C036  F003         	movff	_kiwi_length,i2___awmod@divisor
  2593  00112C  6A04               	clrf	i2___awmod@divisor+1,c
  2594  00112E  EC1A  F00A         	call	i2___awmod	;wreg free
  2595  001132  0E60               	movlw	low _kiwi_frequence
  2596  001134  2401               	addwf	?i2___awmod,w,c
  2597  001136  6ED9               	movwf	fsr2l,c
  2598  001138  0E00               	movlw	high _kiwi_frequence
  2599  00113A  2002               	addwfc	?i2___awmod+1,w,c
  2600  00113C  6EDA               	movwf	fsr2h,c
  2601  00113E  50DF               	movf	indf2,w,c
  2602  001140  6EBB               	movwf	4027,c	;volatile
  2603                           
  2604                           ;main.c: 259: CCPR1Lbits.CCPR1L = (unsigned char) ((kiwi_frequence[time%kiwi_length] + 1
      +                          )/2) ;
  2605  001142  C036  F003         	movff	_kiwi_length,i2___awmod@divisor
  2606  001146  6A04               	clrf	i2___awmod@divisor+1,c
  2607  001148  C016  F001         	movff	searched@time,i2___awmod@dividend
  2608  00114C  C017  F002         	movff	searched@time+1,i2___awmod@dividend+1
  2609  001150  EC1A  F00A         	call	i2___awmod	;wreg free
  2610  001154  0E60               	movlw	low _kiwi_frequence
  2611  001156  2401               	addwf	?i2___awmod,w,c
  2612  001158  6ED9               	movwf	fsr2l,c
  2613  00115A  0E00               	movlw	high _kiwi_frequence
  2614  00115C  2002               	addwfc	?i2___awmod+1,w,c
  2615  00115E  6EDA               	movwf	fsr2h,c
  2616  001160  50DF               	movf	indf2,w,c
  2617  001162  6E0F               	movwf	??_searched& (0+255),c
  2618  001164  0E01               	movlw	1
  2619  001166  240F               	addwf	??_searched,w,c
  2620  001168  6E07               	movwf	i2___awdiv@dividend,c
  2621  00116A  6A08               	clrf	i2___awdiv@dividend+1,c
  2622  00116C  0E00               	movlw	0
  2623  00116E  2208               	addwfc	i2___awdiv@dividend+1,f,c
  2624  001170  0E00               	movlw	0
  2625  001172  6E0A               	movwf	i2___awdiv@divisor+1,c
  2626  001174  0E02               	movlw	2
  2627  001176  6E09               	movwf	i2___awdiv@divisor,c
  2628  001178  EC20  F009         	call	i2___awdiv	;wreg free
  2629  00117C  5007               	movf	?i2___awdiv,w,c
  2630  00117E  6EBE               	movwf	4030,c	;volatile
  2631                           
  2632                           ;main.c: 261: flashlight();
  2633  001180  ECEE  F00B         	call	_flashlight	;wreg free
  2634                           
  2635                           ;main.c: 262: _delay(15000);
  2636  001184  0E14               	movlw	20
  2637  001186  6E0F               	movwf	??_searched& (0+255),c
  2638  001188  0E7A               	movlw	122
  2639  00118A                     i2u113_47:
  2640  00118A  2EE8               	decfsz	wreg,f,c
  2641  00118C  D7FE               	bra	i2u113_47
  2642  00118E  2E0F               	decfsz	??_searched& (0+255),f,c
  2643  001190  D7FC               	bra	i2u113_47
  2644  001192                     i2l1808:
  2645  001192  5016               	movf	searched@time,w,c
  2646  001194  6E0F               	movwf	??_searched& (0+255),c
  2647  001196  5017               	movf	searched@time+1,w,c
  2648  001198  6E10               	movwf	(??_searched+1)& (0+255),c
  2649  00119A  4A16               	infsnz	searched@time,f,c
  2650  00119C  2A17               	incf	searched@time+1,f,c
  2651  00119E  5014               	movf	searched@max_time,w,c
  2652  0011A0  5C0F               	subwf	??_searched,w,c
  2653  0011A2  5010               	movf	??_searched+1,w,c
  2654  0011A4  0A80               	xorlw	128
  2655  0011A6  6E11               	movwf	(??_searched+2)& (0+255),c
  2656  0011A8  5015               	movf	searched@max_time+1,w,c
  2657  0011AA  0A80               	xorlw	128
  2658  0011AC  5811               	subwfb	(??_searched+2)& (0+255),w,c
  2659  0011AE  A0D8               	btfss	status,0,c
  2660  0011B0  D7B7               	goto	i2l1802
  2661                           
  2662                           ;main.c: 269: }
  2663                           ;main.c: 272: CCPR1Lbits.CCPR1L = 0 ;
  2664  0011B2  0E00               	movlw	0
  2665  0011B4  6EBE               	movwf	4030,c	;volatile
  2666                           
  2667                           ;main.c: 273: LATCbits.LATC1 = 0;
  2668  0011B6  928B               	bcf	3979,1,c	;volatile
  2669                           
  2670                           ;main.c: 274: INTCON3bits.INT2IF = 0;
  2671  0011B8  92F0               	bcf	intcon3,1,c	;volatile
  2672  0011BA  0012               	return		;funcret
  2673  0011BC                     __end_of_searched:
  2674                           	opt stack 0
  2675                           pclatu	equ	0xFFB
  2676                           pclath	equ	0xFFA
  2677                           tblptru	equ	0xFF8
  2678                           tblptrh	equ	0xFF7
  2679                           tblptrl	equ	0xFF6
  2680                           tablat	equ	0xFF5
  2681                           prodh	equ	0xFF4
  2682                           prodl	equ	0xFF3
  2683                           intcon	equ	0xFF2
  2684                           intcon2	equ	0xFF1
  2685                           intcon3	equ	0xFF0
  2686                           indf0	equ	0xFEF
  2687                           postinc0	equ	0xFEE
  2688                           fsr0h	equ	0xFEA
  2689                           fsr0l	equ	0xFE9
  2690                           wreg	equ	0xFE8
  2691                           postdec1	equ	0xFE5
  2692                           fsr1h	equ	0xFE2
  2693                           fsr1l	equ	0xFE1
  2694                           indf2	equ	0xFDF
  2695                           fsr2h	equ	0xFDA
  2696                           fsr2l	equ	0xFD9
  2697                           status	equ	0xFD8
  2698                           
  2699 ;; *************** function _flashlight *****************
  2700 ;; Defined at:
  2701 ;;		line 157 in file "main.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;		None
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;		None
  2706 ;; Return value:  Size  Location     Type
  2707 ;;                  1    wreg      void 
  2708 ;; Registers used:
  2709 ;;		wreg, status,2, status,0
  2710 ;; Tracked objects:
  2711 ;;		On entry : 0/0
  2712 ;;		On exit  : 0/0
  2713 ;;		Unchanged: 0/0
  2714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2717 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2718 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2719 ;;Total ram usage:        1 bytes
  2720 ;; Hardware stack levels used:    1
  2721 ;; This function calls:
  2722 ;;		Nothing
  2723 ;; This function is called by:
  2724 ;;		_searched
  2725 ;;		_ISR
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           	psect	text19
  2730  0017DC                     __ptext19:
  2731                           	opt stack 0
  2732  0017DC                     _flashlight:
  2733                           	opt stack 20
  2734                           
  2735                           ;main.c: 159: LATCbits.LATC1 = (unsigned char) !LATCbits.LATC1;
  2736                           
  2737                           ;incstack = 0
  2738  0017DC  B28B               	btfsc	3979,1,c	;volatile
  2739  0017DE  D003               	goto	i2u96_40
  2740  0017E0  6A01               	clrf	??_flashlight& (0+255),c
  2741  0017E2  2A01               	incf	??_flashlight& (0+255),f,c
  2742  0017E4  D001               	goto	i2u97_48
  2743  0017E6                     i2u96_40:
  2744  0017E6  6A01               	clrf	??_flashlight& (0+255),c
  2745  0017E8                     i2u97_48:
  2746  0017E8  4601               	rlncf	??_flashlight,f,c
  2747  0017EA  508B               	movf	3979,w,c	;volatile
  2748  0017EC  1801               	xorwf	??_flashlight,w,c
  2749  0017EE  0BFD               	andlw	-3
  2750  0017F0  1801               	xorwf	??_flashlight,w,c
  2751  0017F2  6E8B               	movwf	3979,c	;volatile
  2752                           
  2753                           ;main.c: 161: INTCON3bits.INT1IF = 0;
  2754  0017F4  90F0               	bcf	intcon3,0,c	;volatile
  2755  0017F6  0012               	return		;funcret
  2756  0017F8                     __end_of_flashlight:
  2757                           	opt stack 0
  2758                           pclatu	equ	0xFFB
  2759                           pclath	equ	0xFFA
  2760                           tblptru	equ	0xFF8
  2761                           tblptrh	equ	0xFF7
  2762                           tblptrl	equ	0xFF6
  2763                           tablat	equ	0xFF5
  2764                           prodh	equ	0xFF4
  2765                           prodl	equ	0xFF3
  2766                           intcon	equ	0xFF2
  2767                           intcon2	equ	0xFF1
  2768                           intcon3	equ	0xFF0
  2769                           indf0	equ	0xFEF
  2770                           postinc0	equ	0xFEE
  2771                           fsr0h	equ	0xFEA
  2772                           fsr0l	equ	0xFE9
  2773                           wreg	equ	0xFE8
  2774                           postdec1	equ	0xFE5
  2775                           fsr1h	equ	0xFE2
  2776                           fsr1l	equ	0xFE1
  2777                           indf2	equ	0xFDF
  2778                           fsr2h	equ	0xFDA
  2779                           fsr2l	equ	0xFD9
  2780                           status	equ	0xFD8
  2781                           
  2782 ;; *************** function _pedometer *****************
  2783 ;; Defined at:
  2784 ;;		line 146 in file "main.c"
  2785 ;; Parameters:    Size  Location     Type
  2786 ;;		None
  2787 ;; Auto vars:     Size  Location     Type
  2788 ;;		None
  2789 ;; Return value:  Size  Location     Type
  2790 ;;                  1    wreg      void 
  2791 ;; Registers used:
  2792 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2793 ;; Tracked objects:
  2794 ;;		On entry : 0/0
  2795 ;;		On exit  : 0/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2802 ;;Total ram usage:        0 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; Hardware stack levels required when called:    6
  2805 ;; This function calls:
  2806 ;;		i2_show_debug
  2807 ;; This function is called by:
  2808 ;;		_ISR
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           	psect	text20
  2813  001896                     __ptext20:
  2814                           	opt stack 0
  2815  001896                     _pedometer:
  2816                           	opt stack 15
  2817                           
  2818                           ;main.c: 148: steps++;
  2819                           
  2820                           ;incstack = 0
  2821  001896  4A34               	infsnz	_steps,f,c
  2822  001898  2A35               	incf	_steps+1,f,c
  2823                           
  2824                           ;main.c: 150: INTCONbits.INT0IF = 0 ;
  2825  00189A  92F2               	bcf	intcon,1,c	;volatile
  2826                           
  2827                           ;main.c: 153: show_debug();
  2828  00189C  EC43  F00C         	call	i2_show_debug	;wreg free
  2829  0018A0  0012               	return		;funcret
  2830  0018A2                     __end_of_pedometer:
  2831                           	opt stack 0
  2832                           pclatu	equ	0xFFB
  2833                           pclath	equ	0xFFA
  2834                           tblptru	equ	0xFF8
  2835                           tblptrh	equ	0xFF7
  2836                           tblptrl	equ	0xFF6
  2837                           tablat	equ	0xFF5
  2838                           prodh	equ	0xFF4
  2839                           prodl	equ	0xFF3
  2840                           intcon	equ	0xFF2
  2841                           intcon2	equ	0xFF1
  2842                           intcon3	equ	0xFF0
  2843                           indf0	equ	0xFEF
  2844                           postinc0	equ	0xFEE
  2845                           fsr0h	equ	0xFEA
  2846                           fsr0l	equ	0xFE9
  2847                           wreg	equ	0xFE8
  2848                           postdec1	equ	0xFE5
  2849                           fsr1h	equ	0xFE2
  2850                           fsr1l	equ	0xFE1
  2851                           indf2	equ	0xFDF
  2852                           fsr2h	equ	0xFDA
  2853                           fsr2l	equ	0xFD9
  2854                           status	equ	0xFD8
  2855                           
  2856 ;; *************** function i2_show_debug *****************
  2857 ;; Defined at:
  2858 ;;		line 76 in file "main.c"
  2859 ;; Parameters:    Size  Location     Type
  2860 ;;		None
  2861 ;; Auto vars:     Size  Location     Type
  2862 ;;		None
  2863 ;; Return value:  Size  Location     Type
  2864 ;;                  1    wreg      void 
  2865 ;; Registers used:
  2866 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2867 ;; Tracked objects:
  2868 ;;		On entry : 0/0
  2869 ;;		On exit  : 0/0
  2870 ;;		Unchanged: 0/0
  2871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;Total ram usage:        0 bytes
  2877 ;; Hardware stack levels used:    1
  2878 ;; Hardware stack levels required when called:    5
  2879 ;; This function calls:
  2880 ;;		i2_LCDWriteInt
  2881 ;; This function is called by:
  2882 ;;		_pedometer
  2883 ;; This function uses a non-reentrant model
  2884 ;;
  2885                           
  2886                           	psect	text21
  2887  001886                     __ptext21:
  2888                           	opt stack 0
  2889  001886                     i2_show_debug:
  2890                           	opt stack 15
  2891                           
  2892                           ;main.c: 77: LCDWriteInt(0, 1, steps);
  2893                           
  2894                           ;incstack = 0
  2895  001886  0E01               	movlw	1
  2896  001888  6E0F               	movwf	i2LCDWriteInt@row,c
  2897  00188A  C034  F010         	movff	_steps,i2LCDWriteInt@value
  2898  00188E  0E00               	movlw	0
  2899  001890  ECB5  F00A         	call	i2_LCDWriteInt
  2900  001894  0012               	return		;funcret
  2901  001896                     __end_ofi2_show_debug:
  2902                           	opt stack 0
  2903                           pclatu	equ	0xFFB
  2904                           pclath	equ	0xFFA
  2905                           tblptru	equ	0xFF8
  2906                           tblptrh	equ	0xFF7
  2907                           tblptrl	equ	0xFF6
  2908                           tablat	equ	0xFF5
  2909                           prodh	equ	0xFF4
  2910                           prodl	equ	0xFF3
  2911                           intcon	equ	0xFF2
  2912                           intcon2	equ	0xFF1
  2913                           intcon3	equ	0xFF0
  2914                           indf0	equ	0xFEF
  2915                           postinc0	equ	0xFEE
  2916                           fsr0h	equ	0xFEA
  2917                           fsr0l	equ	0xFE9
  2918                           wreg	equ	0xFE8
  2919                           postdec1	equ	0xFE5
  2920                           fsr1h	equ	0xFE2
  2921                           fsr1l	equ	0xFE1
  2922                           indf2	equ	0xFDF
  2923                           fsr2h	equ	0xFDA
  2924                           fsr2l	equ	0xFD9
  2925                           status	equ	0xFD8
  2926                           
  2927 ;; *************** function i2_LCDWriteInt *****************
  2928 ;; Defined at:
  2929 ;;		line 229 in file "lcd.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;  column          1    wreg     unsigned char 
  2932 ;;  row             1   14[COMRAM] unsigned char 
  2933 ;;  value           1   15[COMRAM] unsigned char 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;  column          1   19[COMRAM] unsigned char 
  2936 ;;  LCDWriteInt     3   16[COMRAM] unsigned char [3]
  2937 ;; Return value:  Size  Location     Type
  2938 ;;                  1    wreg      void 
  2939 ;; Registers used:
  2940 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2941 ;; Tracked objects:
  2942 ;;		On entry : 0/0
  2943 ;;		On exit  : 0/0
  2944 ;;		Unchanged: 0/0
  2945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2946 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2949 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2950 ;;Total ram usage:        6 bytes
  2951 ;; Hardware stack levels used:    1
  2952 ;; Hardware stack levels required when called:    4
  2953 ;; This function calls:
  2954 ;;		i2_LCDGoto
  2955 ;;		i2_LCDWriteStr
  2956 ;;		i2___awdiv
  2957 ;;		i2___awmod
  2958 ;; This function is called by:
  2959 ;;		i2_show_debug
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962                           
  2963                           	psect	text22
  2964  00156A                     __ptext22:
  2965                           	opt stack 0
  2966  00156A                     i2_LCDWriteInt:
  2967                           	opt stack 15
  2968                           
  2969                           ;incstack = 0
  2970                           ;i2LCDWriteInt@column stored from wreg
  2971  00156A  6E14               	movwf	i2LCDWriteInt@column,c
  2972                           
  2973                           ;lcd.c: 230: char string[3];
  2974                           ;lcd.c: 232: string[0] = value / 10 + '0';
  2975  00156C  C010  F007         	movff	i2LCDWriteInt@value,i2___awdiv@dividend
  2976  001570  6A08               	clrf	i2___awdiv@dividend+1,c
  2977  001572  0E00               	movlw	0
  2978  001574  6E0A               	movwf	i2___awdiv@divisor+1,c
  2979  001576  0E0A               	movlw	10
  2980  001578  6E09               	movwf	i2___awdiv@divisor,c
  2981  00157A  EC20  F009         	call	i2___awdiv	;wreg free
  2982  00157E  5007               	movf	?i2___awdiv,w,c
  2983  001580  0F30               	addlw	48
  2984  001582  6E11               	movwf	i2LCDWriteInt@string,c
  2985                           
  2986                           ;lcd.c: 233: string[1] = value % 10 + '0';
  2987  001584  C010  F001         	movff	i2LCDWriteInt@value,i2___awmod@dividend
  2988  001588  6A02               	clrf	i2___awmod@dividend+1,c
  2989  00158A  0E00               	movlw	0
  2990  00158C  6E04               	movwf	i2___awmod@divisor+1,c
  2991  00158E  0E0A               	movlw	10
  2992  001590  6E03               	movwf	i2___awmod@divisor,c
  2993  001592  EC1A  F00A         	call	i2___awmod	;wreg free
  2994  001596  5001               	movf	?i2___awmod,w,c
  2995  001598  0F30               	addlw	48
  2996  00159A  6E12               	movwf	i2LCDWriteInt@string+1,c
  2997                           
  2998                           ;lcd.c: 234: string[2] = '\0';
  2999  00159C  0E00               	movlw	0
  3000  00159E  6E13               	movwf	i2LCDWriteInt@string+2,c
  3001                           
  3002                           ;lcd.c: 236: LCDGoto(column, row);
  3003  0015A0  C00F  F006         	movff	i2LCDWriteInt@row,i2LCDGoto@row
  3004  0015A4  5014               	movf	i2LCDWriteInt@column,w,c
  3005  0015A6  EC7F  F00B         	call	i2_LCDGoto
  3006                           
  3007                           ;lcd.c: 237: LCDWriteStr(string);
  3008  0015AA  0E11               	movlw	low i2LCDWriteInt@string
  3009  0015AC  6E07               	movwf	i2LCDWriteStr@string,c
  3010  0015AE  0E00               	movlw	high i2LCDWriteInt@string
  3011  0015B0  6E08               	movwf	i2LCDWriteStr@string+1,c
  3012  0015B2  ECA2  F009         	call	i2_LCDWriteStr	;wreg free
  3013  0015B6  0012               	return		;funcret
  3014  0015B8                     __end_ofi2_LCDWriteInt:
  3015                           	opt stack 0
  3016                           pclatu	equ	0xFFB
  3017                           pclath	equ	0xFFA
  3018                           tblptru	equ	0xFF8
  3019                           tblptrh	equ	0xFF7
  3020                           tblptrl	equ	0xFF6
  3021                           tablat	equ	0xFF5
  3022                           prodh	equ	0xFF4
  3023                           prodl	equ	0xFF3
  3024                           intcon	equ	0xFF2
  3025                           intcon2	equ	0xFF1
  3026                           intcon3	equ	0xFF0
  3027                           indf0	equ	0xFEF
  3028                           postinc0	equ	0xFEE
  3029                           fsr0h	equ	0xFEA
  3030                           fsr0l	equ	0xFE9
  3031                           wreg	equ	0xFE8
  3032                           postdec1	equ	0xFE5
  3033                           fsr1h	equ	0xFE2
  3034                           fsr1l	equ	0xFE1
  3035                           indf2	equ	0xFDF
  3036                           fsr2h	equ	0xFDA
  3037                           fsr2l	equ	0xFD9
  3038                           status	equ	0xFD8
  3039                           
  3040 ;; *************** function i2___awmod *****************
  3041 ;; Defined at:
  3042 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;  dividend        2    0[COMRAM] int 
  3045 ;;  divisor         2    2[COMRAM] int 
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;  __awmod         1    5[COMRAM] unsigned char 
  3048 ;;  __awmod         1    4[COMRAM] unsigned char 
  3049 ;; Return value:  Size  Location     Type
  3050 ;;                  2    0[COMRAM] int 
  3051 ;; Registers used:
  3052 ;;		wreg, status,2, status,0
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3058 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3061 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3062 ;;Total ram usage:        6 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; This function calls:
  3065 ;;		Nothing
  3066 ;; This function is called by:
  3067 ;;		_searched
  3068 ;;		i2_LCDWriteInt
  3069 ;; This function uses a non-reentrant model
  3070 ;;
  3071                           
  3072                           	psect	text23
  3073  001434                     __ptext23:
  3074                           	opt stack 0
  3075  001434                     i2___awmod:
  3076                           	opt stack 20
  3077                           
  3078                           ;incstack = 0
  3079  001434  0E00               	movlw	0
  3080  001436  6E06               	movwf	i2___awmod@sign,c
  3081  001438  AE02               	btfss	i2___awmod@dividend+1,7,c
  3082  00143A  D006               	goto	i2l1622
  3083  00143C  6C01               	negf	i2___awmod@dividend,c
  3084  00143E  1E02               	comf	i2___awmod@dividend+1,f,c
  3085  001440  B0D8               	btfsc	status,0,c
  3086  001442  2A02               	incf	i2___awmod@dividend+1,f,c
  3087  001444  0E01               	movlw	1
  3088  001446  6E06               	movwf	i2___awmod@sign,c
  3089  001448                     i2l1622:
  3090  001448  AE04               	btfss	i2___awmod@divisor+1,7,c
  3091  00144A  D004               	goto	i2l1626
  3092  00144C  6C03               	negf	i2___awmod@divisor,c
  3093  00144E  1E04               	comf	i2___awmod@divisor+1,f,c
  3094  001450  B0D8               	btfsc	status,0,c
  3095  001452  2A04               	incf	i2___awmod@divisor+1,f,c
  3096  001454                     i2l1626:
  3097  001454  5003               	movf	i2___awmod@divisor,w,c
  3098  001456  1004               	iorwf	i2___awmod@divisor+1,w,c
  3099  001458  B4D8               	btfsc	status,2,c
  3100  00145A  D018               	goto	i2l1642
  3101  00145C  0E01               	movlw	1
  3102  00145E  6E05               	movwf	i2___awmod@counter,c
  3103  001460  D004               	goto	i2l1632
  3104  001462                     i2l1630:
  3105  001462  90D8               	bcf	status,0,c
  3106  001464  3603               	rlcf	i2___awmod@divisor,f,c
  3107  001466  3604               	rlcf	i2___awmod@divisor+1,f,c
  3108  001468  2A05               	incf	i2___awmod@counter,f,c
  3109  00146A                     i2l1632:
  3110  00146A  AE04               	btfss	i2___awmod@divisor+1,7,c
  3111  00146C  D7FA               	goto	i2l1630
  3112  00146E                     i2l1634:
  3113  00146E  5003               	movf	i2___awmod@divisor,w,c
  3114  001470  5C01               	subwf	i2___awmod@dividend,w,c
  3115  001472  5004               	movf	i2___awmod@divisor+1,w,c
  3116  001474  5802               	subwfb	i2___awmod@dividend+1,w,c
  3117  001476  A0D8               	btfss	status,0,c
  3118  001478  D004               	goto	i2l1638
  3119  00147A  5003               	movf	i2___awmod@divisor,w,c
  3120  00147C  5E01               	subwf	i2___awmod@dividend,f,c
  3121  00147E  5004               	movf	i2___awmod@divisor+1,w,c
  3122  001480  5A02               	subwfb	i2___awmod@dividend+1,f,c
  3123  001482                     i2l1638:
  3124  001482  90D8               	bcf	status,0,c
  3125  001484  3204               	rrcf	i2___awmod@divisor+1,f,c
  3126  001486  3203               	rrcf	i2___awmod@divisor,f,c
  3127  001488  2E05               	decfsz	i2___awmod@counter,f,c
  3128  00148A  D7F1               	goto	i2l1634
  3129  00148C                     i2l1642:
  3130  00148C  5006               	movf	i2___awmod@sign,w,c
  3131  00148E  B4D8               	btfsc	status,2,c
  3132  001490  D004               	goto	i2l1646
  3133  001492  6C01               	negf	i2___awmod@dividend,c
  3134  001494  1E02               	comf	i2___awmod@dividend+1,f,c
  3135  001496  B0D8               	btfsc	status,0,c
  3136  001498  2A02               	incf	i2___awmod@dividend+1,f,c
  3137  00149A                     i2l1646:
  3138  00149A  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  3139  00149E  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  3140  0014A2  0012               	return	
  3141  0014A4                     __end_ofi2___awmod:
  3142                           	opt stack 0
  3143                           pclatu	equ	0xFFB
  3144                           pclath	equ	0xFFA
  3145                           tblptru	equ	0xFF8
  3146                           tblptrh	equ	0xFF7
  3147                           tblptrl	equ	0xFF6
  3148                           tablat	equ	0xFF5
  3149                           prodh	equ	0xFF4
  3150                           prodl	equ	0xFF3
  3151                           intcon	equ	0xFF2
  3152                           intcon2	equ	0xFF1
  3153                           intcon3	equ	0xFF0
  3154                           indf0	equ	0xFEF
  3155                           postinc0	equ	0xFEE
  3156                           fsr0h	equ	0xFEA
  3157                           fsr0l	equ	0xFE9
  3158                           wreg	equ	0xFE8
  3159                           postdec1	equ	0xFE5
  3160                           fsr1h	equ	0xFE2
  3161                           fsr1l	equ	0xFE1
  3162                           indf2	equ	0xFDF
  3163                           fsr2h	equ	0xFDA
  3164                           fsr2l	equ	0xFD9
  3165                           status	equ	0xFD8
  3166                           
  3167 ;; *************** function i2___awdiv *****************
  3168 ;; Defined at:
  3169 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;  dividend        2    6[COMRAM] int 
  3172 ;;  divisor         2    8[COMRAM] int 
  3173 ;; Auto vars:     Size  Location     Type
  3174 ;;  __awdiv         2   12[COMRAM] int 
  3175 ;;  __awdiv         1   11[COMRAM] unsigned char 
  3176 ;;  __awdiv         1   10[COMRAM] unsigned char 
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  2    6[COMRAM] int 
  3179 ;; Registers used:
  3180 ;;		wreg, status,2, status,0
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3186 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3187 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3189 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3190 ;;Total ram usage:        8 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; This function calls:
  3193 ;;		Nothing
  3194 ;; This function is called by:
  3195 ;;		_searched
  3196 ;;		i2_LCDWriteInt
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           	psect	text24
  3201  001240                     __ptext24:
  3202                           	opt stack 0
  3203  001240                     i2___awdiv:
  3204                           	opt stack 20
  3205                           
  3206                           ;incstack = 0
  3207  001240  0E00               	movlw	0
  3208  001242  6E0C               	movwf	i2___awdiv@sign,c
  3209  001244  AE0A               	btfss	i2___awdiv@divisor+1,7,c
  3210  001246  D006               	goto	i2l1578
  3211  001248  6C09               	negf	i2___awdiv@divisor,c
  3212  00124A  1E0A               	comf	i2___awdiv@divisor+1,f,c
  3213  00124C  B0D8               	btfsc	status,0,c
  3214  00124E  2A0A               	incf	i2___awdiv@divisor+1,f,c
  3215  001250  0E01               	movlw	1
  3216  001252  6E0C               	movwf	i2___awdiv@sign,c
  3217  001254                     i2l1578:
  3218  001254  AE08               	btfss	i2___awdiv@dividend+1,7,c
  3219  001256  D006               	goto	i2l1584
  3220  001258  6C07               	negf	i2___awdiv@dividend,c
  3221  00125A  1E08               	comf	i2___awdiv@dividend+1,f,c
  3222  00125C  B0D8               	btfsc	status,0,c
  3223  00125E  2A08               	incf	i2___awdiv@dividend+1,f,c
  3224  001260  0E01               	movlw	1
  3225  001262  1A0C               	xorwf	i2___awdiv@sign,f,c
  3226  001264                     i2l1584:
  3227  001264  0E00               	movlw	0
  3228  001266  6E0E               	movwf	i2___awdiv@quotient+1,c
  3229  001268  0E00               	movlw	0
  3230  00126A  6E0D               	movwf	i2___awdiv@quotient,c
  3231  00126C  5009               	movf	i2___awdiv@divisor,w,c
  3232  00126E  100A               	iorwf	i2___awdiv@divisor+1,w,c
  3233  001270  B4D8               	btfsc	status,2,c
  3234  001272  D01C               	goto	i2l1606
  3235  001274  0E01               	movlw	1
  3236  001276  6E0B               	movwf	i2___awdiv@counter,c
  3237  001278  D004               	goto	i2l1592
  3238  00127A                     i2l1590:
  3239  00127A  90D8               	bcf	status,0,c
  3240  00127C  3609               	rlcf	i2___awdiv@divisor,f,c
  3241  00127E  360A               	rlcf	i2___awdiv@divisor+1,f,c
  3242  001280  2A0B               	incf	i2___awdiv@counter,f,c
  3243  001282                     i2l1592:
  3244  001282  AE0A               	btfss	i2___awdiv@divisor+1,7,c
  3245  001284  D7FA               	goto	i2l1590
  3246  001286                     i2l1594:
  3247  001286  90D8               	bcf	status,0,c
  3248  001288  360D               	rlcf	i2___awdiv@quotient,f,c
  3249  00128A  360E               	rlcf	i2___awdiv@quotient+1,f,c
  3250  00128C  5009               	movf	i2___awdiv@divisor,w,c
  3251  00128E  5C07               	subwf	i2___awdiv@dividend,w,c
  3252  001290  500A               	movf	i2___awdiv@divisor+1,w,c
  3253  001292  5808               	subwfb	i2___awdiv@dividend+1,w,c
  3254  001294  A0D8               	btfss	status,0,c
  3255  001296  D005               	goto	i2l1602
  3256  001298  5009               	movf	i2___awdiv@divisor,w,c
  3257  00129A  5E07               	subwf	i2___awdiv@dividend,f,c
  3258  00129C  500A               	movf	i2___awdiv@divisor+1,w,c
  3259  00129E  5A08               	subwfb	i2___awdiv@dividend+1,f,c
  3260  0012A0  800D               	bsf	i2___awdiv@quotient,0,c
  3261  0012A2                     i2l1602:
  3262  0012A2  90D8               	bcf	status,0,c
  3263  0012A4  320A               	rrcf	i2___awdiv@divisor+1,f,c
  3264  0012A6  3209               	rrcf	i2___awdiv@divisor,f,c
  3265  0012A8  2E0B               	decfsz	i2___awdiv@counter,f,c
  3266  0012AA  D7ED               	goto	i2l1594
  3267  0012AC                     i2l1606:
  3268  0012AC  500C               	movf	i2___awdiv@sign,w,c
  3269  0012AE  B4D8               	btfsc	status,2,c
  3270  0012B0  D004               	goto	i2l1610
  3271  0012B2  6C0D               	negf	i2___awdiv@quotient,c
  3272  0012B4  1E0E               	comf	i2___awdiv@quotient+1,f,c
  3273  0012B6  B0D8               	btfsc	status,0,c
  3274  0012B8  2A0E               	incf	i2___awdiv@quotient+1,f,c
  3275  0012BA                     i2l1610:
  3276  0012BA  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
  3277  0012BE  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  3278  0012C2  0012               	return	
  3279  0012C4                     __end_ofi2___awdiv:
  3280                           	opt stack 0
  3281                           pclatu	equ	0xFFB
  3282                           pclath	equ	0xFFA
  3283                           tblptru	equ	0xFF8
  3284                           tblptrh	equ	0xFF7
  3285                           tblptrl	equ	0xFF6
  3286                           tablat	equ	0xFF5
  3287                           prodh	equ	0xFF4
  3288                           prodl	equ	0xFF3
  3289                           intcon	equ	0xFF2
  3290                           intcon2	equ	0xFF1
  3291                           intcon3	equ	0xFF0
  3292                           indf0	equ	0xFEF
  3293                           postinc0	equ	0xFEE
  3294                           fsr0h	equ	0xFEA
  3295                           fsr0l	equ	0xFE9
  3296                           wreg	equ	0xFE8
  3297                           postdec1	equ	0xFE5
  3298                           fsr1h	equ	0xFE2
  3299                           fsr1l	equ	0xFE1
  3300                           indf2	equ	0xFDF
  3301                           fsr2h	equ	0xFDA
  3302                           fsr2l	equ	0xFD9
  3303                           status	equ	0xFD8
  3304                           
  3305 ;; *************** function i2_LCDWriteStr *****************
  3306 ;; Defined at:
  3307 ;;		line 193 in file "lcd.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;  string          2    6[COMRAM] PTR const unsigned char 
  3310 ;;		 -> LCDWriteInt@string(3), LCDWriteFloat@string(5), LCDWriteHexa@string(3), STR_1(11), 
  3311 ;; Auto vars:     Size  Location     Type
  3312 ;;  LCDWriteStr     1   10[COMRAM] unsigned char 
  3313 ;; Return value:  Size  Location     Type
  3314 ;;                  1    wreg      void 
  3315 ;; Registers used:
  3316 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3317 ;; Tracked objects:
  3318 ;;		On entry : 0/0
  3319 ;;		On exit  : 0/0
  3320 ;;		Unchanged: 0/0
  3321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3322 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3323 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3324 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;Total ram usage:        5 bytes
  3327 ;; Hardware stack levels used:    1
  3328 ;; Hardware stack levels required when called:    3
  3329 ;; This function calls:
  3330 ;;		i2_LCDPutChar
  3331 ;; This function is called by:
  3332 ;;		i2_LCDWriteInt
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336                           	psect	text25
  3337  001344                     __ptext25:
  3338                           	opt stack 0
  3339  001344                     i2_LCDWriteStr:
  3340                           	opt stack 15
  3341                           
  3342                           ;lcd.c: 195: UINT8_T i = 0;
  3343                           
  3344                           ;incstack = 0
  3345  001344  0E00               	movlw	0
  3346  001346  6E0B               	movwf	i2LCDWriteStr@i,c
  3347                           
  3348                           ;lcd.c: 197: while (string[i])
  3349  001348  D01E               	goto	i2l1568
  3350  00134A                     i2l1564:
  3351                           
  3352                           ;lcd.c: 198: LCDPutChar(string[i++]);
  3353  00134A  500B               	movf	i2LCDWriteStr@i,w,c
  3354  00134C  0D01               	mullw	1
  3355  00134E  C007  F009         	movff	i2LCDWriteStr@string,??i2_LCDWriteStr
  3356  001352  C008  F00A         	movff	i2LCDWriteStr@string+1,??i2_LCDWriteStr+1
  3357  001356  50F3               	movf	prodl,w,c
  3358  001358  2609               	addwf	??i2_LCDWriteStr,f,c
  3359  00135A  50F4               	movf	prodh,w,c
  3360  00135C  220A               	addwfc	??i2_LCDWriteStr+1,f,c
  3361  00135E  C009  FFF6         	movff	??i2_LCDWriteStr,tblptrl
  3362  001362  C00A  FFF7         	movff	??i2_LCDWriteStr+1,tblptrh
  3363  001366  0E00               	movlw	low (__smallconst shr (0+16))
  3364  001368  6EF8               	movwf	tblptru,c
  3365  00136A  0E0F               	movlw	(high __ramtop+-1)
  3366  00136C  64F7               	cpfsgt	tblptrh,c
  3367  00136E  D003               	bra	i2u81_47
  3368  001370  0008               	tblrd		*
  3369  001372  50F5               	movf	tablat,w,c
  3370  001374  D005               	bra	i2u81_40
  3371  001376                     i2u81_47:
  3372  001376  CFF6 FFE9          	movff	tblptrl,fsr0l
  3373  00137A  CFF7 FFEA          	movff	tblptrh,fsr0h
  3374  00137E  50EF               	movf	indf0,w,c
  3375  001380                     i2u81_40:
  3376  001380  EC31  F00C         	call	i2_LCDPutChar
  3377  001384  2A0B               	incf	i2LCDWriteStr@i,f,c
  3378  001386                     i2l1568:
  3379  001386  500B               	movf	i2LCDWriteStr@i,w,c
  3380  001388  0D01               	mullw	1
  3381  00138A  C007  F009         	movff	i2LCDWriteStr@string,??i2_LCDWriteStr
  3382  00138E  C008  F00A         	movff	i2LCDWriteStr@string+1,??i2_LCDWriteStr+1
  3383  001392  50F3               	movf	prodl,w,c
  3384  001394  2609               	addwf	??i2_LCDWriteStr,f,c
  3385  001396  50F4               	movf	prodh,w,c
  3386  001398  220A               	addwfc	??i2_LCDWriteStr+1,f,c
  3387  00139A  C009  FFF6         	movff	??i2_LCDWriteStr,tblptrl
  3388  00139E  C00A  FFF7         	movff	??i2_LCDWriteStr+1,tblptrh
  3389  0013A2  0E00               	movlw	low (__smallconst shr (0+16))
  3390  0013A4  6EF8               	movwf	tblptru,c
  3391  0013A6  0E0F               	movlw	(high __ramtop+-1)
  3392  0013A8  64F7               	cpfsgt	tblptrh,c
  3393  0013AA  D003               	bra	i2u82_47
  3394  0013AC  0008               	tblrd		*
  3395  0013AE  50F5               	movf	tablat,w,c
  3396  0013B0  D005               	bra	i2u82_40
  3397  0013B2                     i2u82_47:
  3398  0013B2  CFF6 FFE9          	movff	tblptrl,fsr0l
  3399  0013B6  CFF7 FFEA          	movff	tblptrh,fsr0h
  3400  0013BA  50EF               	movf	indf0,w,c
  3401  0013BC                     i2u82_40:
  3402  0013BC  0900               	iorlw	0
  3403  0013BE  B4D8               	btfsc	status,2,c
  3404  0013C0  0012               	return	
  3405  0013C2  D7C3               	goto	i2l1564
  3406  0013C4                     __end_ofi2_LCDWriteStr:
  3407                           	opt stack 0
  3408                           pclatu	equ	0xFFB
  3409                           pclath	equ	0xFFA
  3410                           tblptru	equ	0xFF8
  3411                           tblptrh	equ	0xFF7
  3412                           tblptrl	equ	0xFF6
  3413                           tablat	equ	0xFF5
  3414                           prodh	equ	0xFF4
  3415                           prodl	equ	0xFF3
  3416                           intcon	equ	0xFF2
  3417                           intcon2	equ	0xFF1
  3418                           intcon3	equ	0xFF0
  3419                           indf0	equ	0xFEF
  3420                           postinc0	equ	0xFEE
  3421                           fsr0h	equ	0xFEA
  3422                           fsr0l	equ	0xFE9
  3423                           wreg	equ	0xFE8
  3424                           postdec1	equ	0xFE5
  3425                           fsr1h	equ	0xFE2
  3426                           fsr1l	equ	0xFE1
  3427                           indf2	equ	0xFDF
  3428                           fsr2h	equ	0xFDA
  3429                           fsr2l	equ	0xFD9
  3430                           status	equ	0xFD8
  3431                           
  3432 ;; *************** function i2_LCDPutChar *****************
  3433 ;; Defined at:
  3434 ;;		line 180 in file "lcd.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;  data            1    wreg     unsigned char 
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;  data            1    5[COMRAM] unsigned char 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      void 
  3441 ;; Registers used:
  3442 ;;		wreg, status,2, status,0, cstack
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3449 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3451 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3452 ;;Total ram usage:        1 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    2
  3455 ;; This function calls:
  3456 ;;		i2_WaitLCD
  3457 ;;		i2_WriteByte
  3458 ;; This function is called by:
  3459 ;;		i2_LCDWriteStr
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           	psect	text26
  3464  001862                     __ptext26:
  3465                           	opt stack 0
  3466  001862                     i2_LCDPutChar:
  3467                           	opt stack 15
  3468                           
  3469                           ;incstack = 0
  3470                           ;i2LCDPutChar@data stored from wreg
  3471  001862  6E06               	movwf	i2LCDPutChar@data,c
  3472                           
  3473                           ;lcd.c: 182: WriteByte(0, data);
  3474  001864  C006  F004         	movff	i2LCDPutChar@data,i2WriteByte@data
  3475  001868  0E00               	movlw	0
  3476  00186A  EC09  F00C         	call	i2_WriteByte
  3477                           
  3478                           ;lcd.c: 183: WaitLCD();
  3479  00186E  EC3A  F00C         	call	i2_WaitLCD	;wreg free
  3480  001872  0012               	return		;funcret
  3481  001874                     __end_ofi2_LCDPutChar:
  3482                           	opt stack 0
  3483                           pclatu	equ	0xFFB
  3484                           pclath	equ	0xFFA
  3485                           tblptru	equ	0xFF8
  3486                           tblptrh	equ	0xFF7
  3487                           tblptrl	equ	0xFF6
  3488                           tablat	equ	0xFF5
  3489                           prodh	equ	0xFF4
  3490                           prodl	equ	0xFF3
  3491                           intcon	equ	0xFF2
  3492                           intcon2	equ	0xFF1
  3493                           intcon3	equ	0xFF0
  3494                           indf0	equ	0xFEF
  3495                           postinc0	equ	0xFEE
  3496                           fsr0h	equ	0xFEA
  3497                           fsr0l	equ	0xFE9
  3498                           wreg	equ	0xFE8
  3499                           postdec1	equ	0xFE5
  3500                           fsr1h	equ	0xFE2
  3501                           fsr1l	equ	0xFE1
  3502                           indf2	equ	0xFDF
  3503                           fsr2h	equ	0xFDA
  3504                           fsr2l	equ	0xFD9
  3505                           status	equ	0xFD8
  3506                           
  3507 ;; *************** function i2_LCDGoto *****************
  3508 ;; Defined at:
  3509 ;;		line 171 in file "lcd.c"
  3510 ;; Parameters:    Size  Location     Type
  3511 ;;  column          1    wreg     unsigned char 
  3512 ;;  row             1    5[COMRAM] unsigned char 
  3513 ;; Auto vars:     Size  Location     Type
  3514 ;;  column          1   10[COMRAM] unsigned char 
  3515 ;; Return value:  Size  Location     Type
  3516 ;;                  1    wreg      void 
  3517 ;; Registers used:
  3518 ;;		wreg, status,2, status,0, cstack
  3519 ;; Tracked objects:
  3520 ;;		On entry : 0/0
  3521 ;;		On exit  : 0/0
  3522 ;;		Unchanged: 0/0
  3523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3524 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3528 ;;Total ram usage:        6 bytes
  3529 ;; Hardware stack levels used:    1
  3530 ;; Hardware stack levels required when called:    2
  3531 ;; This function calls:
  3532 ;;		i2_WaitLCD
  3533 ;;		i2_WriteByte
  3534 ;; This function is called by:
  3535 ;;		i2_LCDWriteInt
  3536 ;; This function uses a non-reentrant model
  3537 ;;
  3538                           
  3539                           	psect	text27
  3540  0016FE                     __ptext27:
  3541                           	opt stack 0
  3542  0016FE                     i2_LCDGoto:
  3543                           	opt stack 16
  3544                           
  3545                           ;incstack = 0
  3546                           ;i2LCDGoto@column stored from wreg
  3547  0016FE  6E0B               	movwf	i2LCDGoto@column,c
  3548                           
  3549                           ;lcd.c: 173: if ((row > (2 - 1)) || (column > (16 - 1)))
  3550  001700  0E02               	movlw	2
  3551  001702  6006               	cpfslt	i2LCDGoto@row,c
  3552  001704  0012               	return	
  3553  001706  0E0F               	movlw	15
  3554  001708  640B               	cpfsgt	i2LCDGoto@column,c
  3555  00170A  D001               	goto	i2l1552
  3556  00170C  0012               	return	
  3557  00170E                     i2l1552:
  3558                           
  3559                           ;lcd.c: 176: WriteByte(1, (row == 1) ? (0xC0 | column) : (0x80 | column));
  3560  00170E  0406               	decf	i2LCDGoto@row,w,c
  3561  001710  B4D8               	btfsc	status,2,c
  3562  001712  D002               	goto	i2l1556
  3563  001714  0E80               	movlw	128
  3564  001716  D001               	goto	L2
  3565  001718                     i2l1556:
  3566  001718  0EC0               	movlw	192
  3567  00171A                     L2:
  3568  00171A  C00B  F007         	movff	i2LCDGoto@column,??i2_LCDGoto
  3569  00171E  6A08               	clrf	(??i2_LCDGoto+1)& (0+255),c
  3570  001720  1007               	iorwf	??i2_LCDGoto,w,c
  3571  001722  6E09               	movwf	i2_LCDGoto$670,c
  3572  001724  5008               	movf	??i2_LCDGoto+1,w,c
  3573  001726  6E0A               	movwf	i2_LCDGoto$670+1,c
  3574  001728  C009  F004         	movff	i2_LCDGoto$670,i2WriteByte@data
  3575  00172C  0E01               	movlw	1
  3576  00172E  EC09  F00C         	call	i2_WriteByte
  3577                           
  3578                           ;lcd.c: 177: WaitLCD();
  3579  001732  EC3A  F00C         	call	i2_WaitLCD	;wreg free
  3580  001736  0012               	return		;funcret
  3581  001738                     __end_ofi2_LCDGoto:
  3582                           	opt stack 0
  3583                           pclatu	equ	0xFFB
  3584                           pclath	equ	0xFFA
  3585                           tblptru	equ	0xFF8
  3586                           tblptrh	equ	0xFF7
  3587                           tblptrl	equ	0xFF6
  3588                           tablat	equ	0xFF5
  3589                           prodh	equ	0xFF4
  3590                           prodl	equ	0xFF3
  3591                           intcon	equ	0xFF2
  3592                           intcon2	equ	0xFF1
  3593                           intcon3	equ	0xFF0
  3594                           indf0	equ	0xFEF
  3595                           postinc0	equ	0xFEE
  3596                           fsr0h	equ	0xFEA
  3597                           fsr0l	equ	0xFE9
  3598                           wreg	equ	0xFE8
  3599                           postdec1	equ	0xFE5
  3600                           fsr1h	equ	0xFE2
  3601                           fsr1l	equ	0xFE1
  3602                           indf2	equ	0xFDF
  3603                           fsr2h	equ	0xFDA
  3604                           fsr2l	equ	0xFD9
  3605                           status	equ	0xFD8
  3606                           
  3607 ;; *************** function i2_WriteByte *****************
  3608 ;; Defined at:
  3609 ;;		line 83 in file "lcd.c"
  3610 ;; Parameters:    Size  Location     Type
  3611 ;;  cmd             1    wreg     unsigned char 
  3612 ;;  data            1    3[COMRAM] unsigned char 
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;  cmd             1    4[COMRAM] unsigned char 
  3615 ;; Return value:  Size  Location     Type
  3616 ;;                  1    wreg      void 
  3617 ;; Registers used:
  3618 ;;		wreg, status,2, status,0, cstack
  3619 ;; Tracked objects:
  3620 ;;		On entry : 0/0
  3621 ;;		On exit  : 0/0
  3622 ;;		Unchanged: 0/0
  3623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3624 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3625 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3627 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3628 ;;Total ram usage:        2 bytes
  3629 ;; Hardware stack levels used:    1
  3630 ;; Hardware stack levels required when called:    1
  3631 ;; This function calls:
  3632 ;;		i2_WriteNibble
  3633 ;; This function is called by:
  3634 ;;		i2_LCDGoto
  3635 ;;		i2_LCDPutChar
  3636 ;; This function uses a non-reentrant model
  3637 ;;
  3638                           
  3639                           	psect	text28
  3640  001812                     __ptext28:
  3641                           	opt stack 0
  3642  001812                     i2_WriteByte:
  3643                           	opt stack 15
  3644                           
  3645                           ;incstack = 0
  3646                           ;i2WriteByte@cmd stored from wreg
  3647  001812  6E05               	movwf	i2WriteByte@cmd,c
  3648                           
  3649                           ;lcd.c: 85: WriteNibble(cmd, data >> 4);
  3650  001814  3804               	swapf	i2WriteByte@data,w,c
  3651  001816  0B0F               	andlw	15
  3652  001818  6E01               	movwf	i2WriteNibble@data,c
  3653  00181A  5005               	movf	i2WriteByte@cmd,w,c
  3654  00181C  EC20  F00B         	call	i2_WriteNibble
  3655                           
  3656                           ;lcd.c: 86: WriteNibble(cmd, data);
  3657  001820  C004  F001         	movff	i2WriteByte@data,i2WriteNibble@data
  3658  001824  5005               	movf	i2WriteByte@cmd,w,c
  3659  001826  EC20  F00B         	call	i2_WriteNibble
  3660  00182A  0012               	return		;funcret
  3661  00182C                     __end_ofi2_WriteByte:
  3662                           	opt stack 0
  3663                           pclatu	equ	0xFFB
  3664                           pclath	equ	0xFFA
  3665                           tblptru	equ	0xFF8
  3666                           tblptrh	equ	0xFF7
  3667                           tblptrl	equ	0xFF6
  3668                           tablat	equ	0xFF5
  3669                           prodh	equ	0xFF4
  3670                           prodl	equ	0xFF3
  3671                           intcon	equ	0xFF2
  3672                           intcon2	equ	0xFF1
  3673                           intcon3	equ	0xFF0
  3674                           indf0	equ	0xFEF
  3675                           postinc0	equ	0xFEE
  3676                           fsr0h	equ	0xFEA
  3677                           fsr0l	equ	0xFE9
  3678                           wreg	equ	0xFE8
  3679                           postdec1	equ	0xFE5
  3680                           fsr1h	equ	0xFE2
  3681                           fsr1l	equ	0xFE1
  3682                           indf2	equ	0xFDF
  3683                           fsr2h	equ	0xFDA
  3684                           fsr2l	equ	0xFD9
  3685                           status	equ	0xFD8
  3686                           
  3687 ;; *************** function i2_WriteNibble *****************
  3688 ;; Defined at:
  3689 ;;		line 66 in file "lcd.c"
  3690 ;; Parameters:    Size  Location     Type
  3691 ;;  cmd             1    wreg     unsigned char 
  3692 ;;  data            1    0[COMRAM] unsigned char 
  3693 ;; Auto vars:     Size  Location     Type
  3694 ;;  cmd             1    2[COMRAM] unsigned char 
  3695 ;; Return value:  Size  Location     Type
  3696 ;;                  1    wreg      void 
  3697 ;; Registers used:
  3698 ;;		wreg, status,2, status,0
  3699 ;; Tracked objects:
  3700 ;;		On entry : 0/0
  3701 ;;		On exit  : 0/0
  3702 ;;		Unchanged: 0/0
  3703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3704 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3705 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3706 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3707 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3708 ;;Total ram usage:        3 bytes
  3709 ;; Hardware stack levels used:    1
  3710 ;; This function calls:
  3711 ;;		Nothing
  3712 ;; This function is called by:
  3713 ;;		i2_WriteByte
  3714 ;; This function uses a non-reentrant model
  3715 ;;
  3716                           
  3717                           	psect	text29
  3718  001640                     __ptext29:
  3719                           	opt stack 0
  3720  001640                     i2_WriteNibble:
  3721                           	opt stack 15
  3722                           
  3723                           ;incstack = 0
  3724                           ;i2WriteNibble@cmd stored from wreg
  3725  001640  6E03               	movwf	i2WriteNibble@cmd,c
  3726                           
  3727                           ;lcd.c: 68: LATDbits.LATD4 = (cmd ? 0 : 1);
  3728  001642  5003               	movf	i2WriteNibble@cmd,w,c
  3729  001644  A4D8               	btfss	status,2,c
  3730  001646  D003               	goto	i2u57_40
  3731  001648  6A02               	clrf	??i2_WriteNibble& (0+255),c
  3732  00164A  2A02               	incf	??i2_WriteNibble& (0+255),f,c
  3733  00164C  D001               	goto	i2u58_48
  3734  00164E                     i2u57_40:
  3735  00164E  6A02               	clrf	??i2_WriteNibble& (0+255),c
  3736  001650                     i2u58_48:
  3737  001650  3A02               	swapf	??i2_WriteNibble,f,c
  3738  001652  508C               	movf	3980,w,c	;volatile
  3739  001654  1802               	xorwf	??i2_WriteNibble,w,c
  3740  001656  0BEF               	andlw	-17
  3741  001658  1802               	xorwf	??i2_WriteNibble,w,c
  3742  00165A  6E8C               	movwf	3980,c	;volatile
  3743                           
  3744                           ;lcd.c: 69: LATDbits.LATD5 = 0;
  3745  00165C  9A8C               	bcf	3980,5,c	;volatile
  3746                           
  3747                           ;lcd.c: 70: LATDbits.LATD6 = 1;
  3748  00165E  8C8C               	bsf	3980,6,c	;volatile
  3749                           
  3750                           ;lcd.c: 72: LATDbits.LATD0 = LATDbits.LATD1 = LATDbits.LATD2 = LATDbits.LATD3 = 0;
  3751  001660  968C               	bcf	3980,3,c	;volatile
  3752  001662  948C               	bcf	3980,2,c	;volatile
  3753  001664  928C               	bcf	3980,1,c	;volatile
  3754  001666  908C               	bcf	3980,0,c	;volatile
  3755                           
  3756                           ;lcd.c: 73: __nop();
  3757  001668  F000               	nop	
  3758                           
  3759                           ;lcd.c: 74: __nop();
  3760  00166A  F000               	nop	
  3761                           
  3762                           ;lcd.c: 76: LATD = (LATD & 0xF0) | (data & 0x0F);
  3763  00166C  C001  F002         	movff	i2WriteNibble@data,??i2_WriteNibble
  3764  001670  0E0F               	movlw	15
  3765  001672  1602               	andwf	??i2_WriteNibble,f,c
  3766  001674  508C               	movf	3980,w,c	;volatile
  3767  001676  0BF0               	andlw	240
  3768  001678  1002               	iorwf	??i2_WriteNibble,w,c
  3769  00167A  6E8C               	movwf	3980,c	;volatile
  3770                           
  3771                           ;lcd.c: 77: __nop();
  3772  00167C  F000               	nop	
  3773                           
  3774                           ;lcd.c: 78: __nop();
  3775  00167E  F000               	nop	
  3776                           
  3777                           ;lcd.c: 80: LATDbits.LATD6 = 0;
  3778  001680  9C8C               	bcf	3980,6,c	;volatile
  3779  001682  0012               	return		;funcret
  3780  001684                     __end_ofi2_WriteNibble:
  3781                           	opt stack 0
  3782                           pclatu	equ	0xFFB
  3783                           pclath	equ	0xFFA
  3784                           tblptru	equ	0xFF8
  3785                           tblptrh	equ	0xFF7
  3786                           tblptrl	equ	0xFF6
  3787                           tablat	equ	0xFF5
  3788                           prodh	equ	0xFF4
  3789                           prodl	equ	0xFF3
  3790                           intcon	equ	0xFF2
  3791                           intcon2	equ	0xFF1
  3792                           intcon3	equ	0xFF0
  3793                           indf0	equ	0xFEF
  3794                           postinc0	equ	0xFEE
  3795                           fsr0h	equ	0xFEA
  3796                           fsr0l	equ	0xFE9
  3797                           wreg	equ	0xFE8
  3798                           postdec1	equ	0xFE5
  3799                           fsr1h	equ	0xFE2
  3800                           fsr1l	equ	0xFE1
  3801                           indf2	equ	0xFDF
  3802                           fsr2h	equ	0xFDA
  3803                           fsr2l	equ	0xFD9
  3804                           status	equ	0xFD8
  3805                           
  3806 ;; *************** function i2_WaitLCD *****************
  3807 ;; Defined at:
  3808 ;;		line 52 in file "lcd.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;		None
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;  WaitLCD         1    1[COMRAM] unsigned char 
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  1    wreg      void 
  3815 ;; Registers used:
  3816 ;;		wreg, status,2, status,0, cstack
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3825 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3826 ;;Total ram usage:        1 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    1
  3829 ;; This function calls:
  3830 ;;		i2_ReadByte
  3831 ;; This function is called by:
  3832 ;;		i2_LCDGoto
  3833 ;;		i2_LCDPutChar
  3834 ;; This function uses a non-reentrant model
  3835 ;;
  3836                           
  3837                           	psect	text30
  3838  001874                     __ptext30:
  3839                           	opt stack 0
  3840  001874                     i2_WaitLCD:
  3841                           	opt stack 15
  3842                           
  3843                           ;lcd.c: 54: UINT8_T status;
  3844                           ;lcd.c: 56: LATDbits.LATD4 = 0;
  3845                           
  3846                           ;incstack = 0
  3847  001874  988C               	bcf	3980,4,c	;volatile
  3848                           
  3849                           ;lcd.c: 57: LATDbits.LATD5 = 1;
  3850  001876  8A8C               	bsf	3980,5,c	;volatile
  3851  001878                     i2l1430:
  3852                           
  3853                           ;lcd.c: 60: status = ReadByte();
  3854  001878  ECB4  F00B         	call	i2_ReadByte	;wreg free
  3855  00187C  6E02               	movwf	i2WaitLCD@status,c
  3856                           
  3857                           ;lcd.c: 61: } while (status & 0x80);
  3858  00187E  BE02               	btfsc	i2WaitLCD@status,7,c
  3859  001880  D7FB               	goto	i2l1430
  3860                           
  3861                           ;lcd.c: 63: LATDbits.LATD5 = 0;
  3862  001882  9A8C               	bcf	3980,5,c	;volatile
  3863  001884  0012               	return		;funcret
  3864  001886                     __end_ofi2_WaitLCD:
  3865                           	opt stack 0
  3866                           pclatu	equ	0xFFB
  3867                           pclath	equ	0xFFA
  3868                           tblptru	equ	0xFF8
  3869                           tblptrh	equ	0xFF7
  3870                           tblptrl	equ	0xFF6
  3871                           tablat	equ	0xFF5
  3872                           prodh	equ	0xFF4
  3873                           prodl	equ	0xFF3
  3874                           intcon	equ	0xFF2
  3875                           intcon2	equ	0xFF1
  3876                           intcon3	equ	0xFF0
  3877                           indf0	equ	0xFEF
  3878                           postinc0	equ	0xFEE
  3879                           fsr0h	equ	0xFEA
  3880                           fsr0l	equ	0xFE9
  3881                           wreg	equ	0xFE8
  3882                           postdec1	equ	0xFE5
  3883                           fsr1h	equ	0xFE2
  3884                           fsr1l	equ	0xFE1
  3885                           indf2	equ	0xFDF
  3886                           fsr2h	equ	0xFDA
  3887                           fsr2l	equ	0xFD9
  3888                           status	equ	0xFD8
  3889                           
  3890 ;; *************** function i2_ReadByte *****************
  3891 ;; Defined at:
  3892 ;;		line 21 in file "lcd.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;		None
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;  ReadByte        1    0[COMRAM] unsigned char 
  3897 ;; Return value:  Size  Location     Type
  3898 ;;                  1    wreg      unsigned char 
  3899 ;; Registers used:
  3900 ;;		wreg, status,2, status,0
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3907 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3909 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3910 ;;Total ram usage:        1 bytes
  3911 ;; Hardware stack levels used:    1
  3912 ;; This function calls:
  3913 ;;		Nothing
  3914 ;; This function is called by:
  3915 ;;		i2_WaitLCD
  3916 ;; This function uses a non-reentrant model
  3917 ;;
  3918                           
  3919                           	psect	text31
  3920  001768                     __ptext31:
  3921                           	opt stack 0
  3922  001768                     i2_ReadByte:
  3923                           	opt stack 15
  3924                           
  3925                           ;lcd.c: 23: UINT8_T status;
  3926                           ;lcd.c: 25: TRISDbits.TRISD0 = 1;
  3927                           
  3928                           ;incstack = 0
  3929  001768  8095               	bsf	3989,0,c	;volatile
  3930                           
  3931                           ;lcd.c: 26: TRISDbits.TRISD1 = 1;
  3932  00176A  8295               	bsf	3989,1,c	;volatile
  3933                           
  3934                           ;lcd.c: 27: TRISDbits.TRISD2 = 1;
  3935  00176C  8495               	bsf	3989,2,c	;volatile
  3936                           
  3937                           ;lcd.c: 28: TRISDbits.TRISD3 = 1;
  3938  00176E  8695               	bsf	3989,3,c	;volatile
  3939                           
  3940                           ;lcd.c: 30: LATDbits.LATD6 = 1;
  3941  001770  8C8C               	bsf	3980,6,c	;volatile
  3942                           
  3943                           ;lcd.c: 31: __nop();
  3944  001772  F000               	nop	
  3945                           
  3946                           ;lcd.c: 32: __nop();
  3947  001774  F000               	nop	
  3948                           
  3949                           ;lcd.c: 34: status = PORTD << 4;
  3950  001776  3883               	swapf	3971,w,c	;volatile
  3951  001778  0BF0               	andlw	240
  3952  00177A  6E01               	movwf	i2ReadByte@status,c
  3953                           
  3954                           ;lcd.c: 35: LATDbits.LATD6 = 0;
  3955  00177C  9C8C               	bcf	3980,6,c	;volatile
  3956                           
  3957                           ;lcd.c: 37: LATDbits.LATD6 = 1;
  3958  00177E  8C8C               	bsf	3980,6,c	;volatile
  3959                           
  3960                           ;lcd.c: 38: __nop();
  3961  001780  F000               	nop	
  3962                           
  3963                           ;lcd.c: 39: __nop();
  3964  001782  F000               	nop	
  3965                           
  3966                           ;lcd.c: 41: status |= PORTD & 0x0F;
  3967  001784  5083               	movf	3971,w,c	;volatile
  3968  001786  0B0F               	andlw	15
  3969  001788  1201               	iorwf	i2ReadByte@status,f,c
  3970                           
  3971                           ;lcd.c: 42: LATDbits.LATD6 = 0;
  3972  00178A  9C8C               	bcf	3980,6,c	;volatile
  3973                           
  3974                           ;lcd.c: 44: TRISDbits.TRISD0 = 0;
  3975  00178C  9095               	bcf	3989,0,c	;volatile
  3976                           
  3977                           ;lcd.c: 45: TRISDbits.TRISD1 = 0;
  3978  00178E  9295               	bcf	3989,1,c	;volatile
  3979                           
  3980                           ;lcd.c: 46: TRISDbits.TRISD2 = 0;
  3981  001790  9495               	bcf	3989,2,c	;volatile
  3982                           
  3983                           ;lcd.c: 47: TRISDbits.TRISD3 = 0;
  3984  001792  9695               	bcf	3989,3,c	;volatile
  3985                           
  3986                           ;lcd.c: 49: return(status);
  3987  001794  5001               	movf	i2ReadByte@status,w,c
  3988  001796  0012               	return	
  3989  001798                     __end_ofi2_ReadByte:
  3990                           	opt stack 0
  3991                           pclatu	equ	0xFFB
  3992                           pclath	equ	0xFFA
  3993                           tblptru	equ	0xFF8
  3994                           tblptrh	equ	0xFF7
  3995                           tblptrl	equ	0xFF6
  3996                           tablat	equ	0xFF5
  3997                           prodh	equ	0xFF4
  3998                           prodl	equ	0xFF3
  3999                           intcon	equ	0xFF2
  4000                           intcon2	equ	0xFF1
  4001                           intcon3	equ	0xFF0
  4002                           indf0	equ	0xFEF
  4003                           postinc0	equ	0xFEE
  4004                           fsr0h	equ	0xFEA
  4005                           fsr0l	equ	0xFE9
  4006                           wreg	equ	0xFE8
  4007                           postdec1	equ	0xFE5
  4008                           fsr1h	equ	0xFE2
  4009                           fsr1l	equ	0xFE1
  4010                           indf2	equ	0xFDF
  4011                           fsr2h	equ	0xFDA
  4012                           fsr2l	equ	0xFD9
  4013                           status	equ	0xFD8
  4014                           pclatu	equ	0xFFB
  4015                           pclath	equ	0xFFA
  4016                           tblptru	equ	0xFF8
  4017                           tblptrh	equ	0xFF7
  4018                           tblptrl	equ	0xFF6
  4019                           tablat	equ	0xFF5
  4020                           prodh	equ	0xFF4
  4021                           prodl	equ	0xFF3
  4022                           intcon	equ	0xFF2
  4023                           intcon2	equ	0xFF1
  4024                           intcon3	equ	0xFF0
  4025                           indf0	equ	0xFEF
  4026                           postinc0	equ	0xFEE
  4027                           fsr0h	equ	0xFEA
  4028                           fsr0l	equ	0xFE9
  4029                           wreg	equ	0xFE8
  4030                           postdec1	equ	0xFE5
  4031                           fsr1h	equ	0xFE2
  4032                           fsr1l	equ	0xFE1
  4033                           indf2	equ	0xFDF
  4034                           fsr2h	equ	0xFDA
  4035                           fsr2l	equ	0xFD9
  4036                           status	equ	0xFD8
  4037                           
  4038                           	psect	rparam
  4039  0000                     pclatu	equ	0xFFB
  4040                           pclath	equ	0xFFA
  4041                           tblptru	equ	0xFF8
  4042                           tblptrh	equ	0xFF7
  4043                           tblptrl	equ	0xFF6
  4044                           tablat	equ	0xFF5
  4045                           prodh	equ	0xFF4
  4046                           prodl	equ	0xFF3
  4047                           intcon	equ	0xFF2
  4048                           intcon2	equ	0xFF1
  4049                           intcon3	equ	0xFF0
  4050                           indf0	equ	0xFEF
  4051                           postinc0	equ	0xFEE
  4052                           fsr0h	equ	0xFEA
  4053                           fsr0l	equ	0xFE9
  4054                           wreg	equ	0xFE8
  4055                           postdec1	equ	0xFE5
  4056                           fsr1h	equ	0xFE2
  4057                           fsr1l	equ	0xFE1
  4058                           indf2	equ	0xFDF
  4059                           fsr2h	equ	0xFDA
  4060                           fsr2l	equ	0xFD9
  4061                           status	equ	0xFD8
  4062                           
  4063                           	psect	temp
  4064  000037                     btemp:
  4065                           	opt stack 0
  4066  000037                     	ds	1
  4067  0000                     int$flags	set	btemp
  4068                           pclatu	equ	0xFFB
  4069                           pclath	equ	0xFFA
  4070                           tblptru	equ	0xFF8
  4071                           tblptrh	equ	0xFF7
  4072                           tblptrl	equ	0xFF6
  4073                           tablat	equ	0xFF5
  4074                           prodh	equ	0xFF4
  4075                           prodl	equ	0xFF3
  4076                           intcon	equ	0xFF2
  4077                           intcon2	equ	0xFF1
  4078                           intcon3	equ	0xFF0
  4079                           indf0	equ	0xFEF
  4080                           postinc0	equ	0xFEE
  4081                           fsr0h	equ	0xFEA
  4082                           fsr0l	equ	0xFE9
  4083                           wreg	equ	0xFE8
  4084                           postdec1	equ	0xFE5
  4085                           fsr1h	equ	0xFE2
  4086                           fsr1l	equ	0xFE1
  4087                           indf2	equ	0xFDF
  4088                           fsr2h	equ	0xFDA
  4089                           fsr2l	equ	0xFD9
  4090                           status	equ	0xFD8


Data Sizes:
    Strings     28
    Constant    0
    Data        65
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     51      54
    BANK0           160     11      75
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    LCDWriteStr@string	PTR const unsigned char  size(2) Largest target is 11
		 -> LCDWriteInt@string(BANK0[3]), LCDWriteFloat@string(COMRAM[5]), LCDWriteHexa@string(COMRAM[3]), STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _init_debug->_LCDGoto
    _init_debug->_LCDWriteStr
    _LCDWriteInt->_LCDGoto
    _LCDWriteInt->_LCDWriteStr
    _LCDWriteStr->_LCDPutChar
    _LCDPutChar->_WriteByte
    _LCDGoto->_WriteByte
    _LCDInit->_WriteNibble
    _LCDClear->_WriteByte
    _WriteByte->_WriteNibble
    _WaitLCD->_ReadByte

Critical Paths under _ISR in COMRAM

    _ISR->_searched
    _searched->i2___awdiv
    i2_show_debug->i2_LCDWriteInt
    i2_LCDWriteInt->i2___awdiv
    i2___awdiv->i2___awmod
    i2_LCDWriteStr->i2_LCDPutChar
    i2_LCDPutChar->i2_WriteByte
    i2_LCDGoto->i2_WriteByte
    i2_WriteByte->i2_WriteNibble
    i2_WaitLCD->i2_ReadByte

Critical Paths under _main in BANK0

    _show_debug->_LCDWriteInt

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5   13754
                                              6 BANK0      5     0      5
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0   13754
                         _init_debug
 ---------------------------------------------------------------------------------
 (2) _init_debug                                           0     0      0   13754
                           _LCDClear
                            _LCDGoto
                            _LCDInit
                        _LCDWriteStr
                         _show_debug
 ---------------------------------------------------------------------------------
 (3) _show_debug                                           0     0      0    6496
                        _LCDWriteInt
 ---------------------------------------------------------------------------------
 (4) _LCDWriteInt                                          6     4      2    6496
                                              0 BANK0      6     4      2
                            _LCDGoto
                        _LCDWriteStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     952
                                             40 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     856
                                             40 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _LCDWriteStr                                          5     3      2    2115
                                             46 COMRAM     5     3      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (6) _LCDPutChar                                           1     1      0    1721
                                             45 COMRAM     1     1      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (5) _LCDGoto                                              6     5      1    2137
                                             45 COMRAM     6     5      1
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (3) _LCDInit                                              1     1      0    1307
                                             43 COMRAM     1     1      0
                            _WaitLCD
                        _WriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDClear                                             1     1      0    1699
                                             45 COMRAM     1     1      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (7) _WriteByte                                            2     1      1    1652
                                             43 COMRAM     2     1      1
                        _WriteNibble
 ---------------------------------------------------------------------------------
 (8) _WriteNibble                                          3     2      1    1260
                                             40 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _WaitLCD                                              1     1      0      47
                                             41 COMRAM     1     1      0
                           _ReadByte
 ---------------------------------------------------------------------------------
 (8) _ReadByte                                             1     1      0      24
                                             40 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                 17    17      0    2943
                                             23 COMRAM    17    17      0
                         _flashlight
                          _pedometer
                           _searched
                        _synchronize
 ---------------------------------------------------------------------------------
 (10) _synchronize                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _searched                                            9     9      0     947
                                             14 COMRAM     9     9      0
                         _flashlight
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (11) _flashlight                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _pedometer                                           0     0      0    1927
                       i2_show_debug
 ---------------------------------------------------------------------------------
 (11) i2_show_debug                                        0     0      0    1927
                      i2_LCDWriteInt
 ---------------------------------------------------------------------------------
 (12) i2_LCDWriteInt                                       6     4      2    1927
                                             14 COMRAM     6     4      2
                          i2_LCDGoto
                      i2_LCDWriteStr
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (11) i2___awmod                                           6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___awdiv                                           8     4      4     404
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (13) i2_LCDWriteStr                                       5     3      2     421
                                              6 COMRAM     5     3      2
                       i2_LCDPutChar
 ---------------------------------------------------------------------------------
 (14) i2_LCDPutChar                                        1     1      0     305
                                              5 COMRAM     1     1      0
                          i2_WaitLCD
                        i2_WriteByte
 ---------------------------------------------------------------------------------
 (13) i2_LCDGoto                                           6     5      1     443
                                              5 COMRAM     6     5      1
                          i2_WaitLCD
                        i2_WriteByte
 ---------------------------------------------------------------------------------
 (15) i2_WriteByte                                         2     1      1     236
                                              3 COMRAM     2     1      1
                      i2_WriteNibble
 ---------------------------------------------------------------------------------
 (16) i2_WriteNibble                                       3     2      1      96
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (15) i2_WaitLCD                                           1     1      0      47
                                              1 COMRAM     1     1      0
                         i2_ReadByte
 ---------------------------------------------------------------------------------
 (16) i2_ReadByte                                          1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _init_debug
       _LCDClear
         _WaitLCD
           _ReadByte
         _WriteByte
           _WriteNibble
       _LCDGoto
         _WaitLCD
           _ReadByte
         _WriteByte
           _WriteNibble
       _LCDInit
         _WaitLCD
           _ReadByte
         _WriteNibble
       _LCDWriteStr
         _LCDPutChar
           _WaitLCD
             _ReadByte
           _WriteByte
             _WriteNibble
       _show_debug
         _LCDWriteInt
           _LCDGoto
             _WaitLCD
               _ReadByte
             _WriteByte
               _WriteNibble
           _LCDWriteStr
             _LCDPutChar
               _WaitLCD
                 _ReadByte
               _WriteByte
                 _WriteNibble
           ___awdiv
           ___awmod

 _ISR (ROOT)
   _flashlight
   _pedometer
     i2_show_debug
       i2_LCDWriteInt
         i2_LCDGoto
           i2_WaitLCD
             i2_ReadByte
           i2_WriteByte
             i2_WriteNibble
         i2_LCDWriteStr
           i2_LCDPutChar
             i2_WaitLCD
               i2_ReadByte
             i2_WriteByte
               i2_WriteNibble
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
   _searched
     _flashlight
     i2___awdiv
       i2___awmod (ARG)
     i2___awmod
   _synchronize

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      B      4B       5       46.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     33      36       1       57.4%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      81      12        0.0%
DATA                 0      0      81       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu Jun 01 13:56:20 2017

            __CFG_CP0$ON 000000              __CFG_CP1$ON 000000              __CFG_CP2$ON 000000  
            __CFG_CP3$ON 000000              ?_LCDPutChar 0001                       l84 18B0  
            __CFG_CPB$ON 000000              __CFG_CPD$ON 000000             ___awdiv@sign 002E  
   __size_of_WriteNibble 0044                      u540 160A                      _ISR 0008  
                    u630 1300                      u640 133C                      u637 12F6  
                    u558 160C                      u647 1332       i2LCDWriteInt@value 0010  
           ___awmod@sign 002E                      wreg 000FE8              i2_WriteByte 1812  
        __end_of_LCDInit 1106             __CFG_LVP$OFF 000000          __end_of_LCDGoto 16FE  
           ?_LCDWriteInt 00A0                     ?_ISR 0001             ?_LCDWriteStr 002F  
                   ISR@i 0027                     l1510 13D8                     l1440 16D4  
                   l1520 13FA                     l1522 13FE                     l1530 141C  
                   l1514 13E4                     l1444 16DE                     l1452 12CA  
                   l1534 142A                     l1526 1412                     l1518 13F2  
                   l1376 1854                     l1456 1306                     l1480 11FE  
                   l1472 11E0                     l1490 121E                     l1482 1202  
                   l1466 11D0                     l1478 11F6                     l1494 1228  
                   l1498 1236                     STR_1 1012                     STR_2 1001  
                   u1107 1078                     u1117 17CC                     u1077 1036  
                   u1087 1050                     _LATD 000F8C                     u1097 1066  
                   i2l74 0072      i2LCDWriteInt@column 0014                     i2l79 00A0  
        i2WriteByte@data 0004             __CFG_WRT0$ON 000000             __CFG_WRT1$ON 000000  
           __CFG_WRT2$ON 000000             __CFG_WRT3$ON 000000            __CFG_EBTR0$ON 000000  
          __CFG_EBTR1$ON 000000            __CFG_EBTR2$ON 000000            __CFG_EBTR3$ON 000000  
           __CFG_WRTB$ON 000000             __CFG_WRTC$ON 000000             __CFG_WRTD$ON 000000  
 __size_ofi2_WriteNibble 0044            __CFG_EBTRB$ON 000000                     _main 18AC  
   __end_ofi2_show_debug 1896                     fsr0h 000FEA                     fsr1h 000FE2  
                   indf0 000FEF                     fsr2h 000FDA                     fsr0l 000FE9  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 0037            __CFG_BORV$190 000000      i2LCDWriteInt@string 0011  
                   prodh 000FF4                     prodl 000FF3                     start 00DC  
          __CFG_IESO$OFF 000000             ___param_bank 000000                    ??_ISR 0018  
       __end_of_LCDClear 17DC          __end_of_WaitLCD 1862       __size_ofi2_LCDGoto 003A  
                  ?_main 00A6          __end_of___awdiv 1240          __end_of___awmod 1434  
        ___awdiv@divisor 002B              _synchronize 18A2          ___awdiv@counter 002D  
                  _PORTD 000F83           __CFG_FCMEN$OFF 000000         i2WriteNibble@cmd 0003  
     __CFG_MCLRE$EXTMCLR 000000                    _setup 14A4                    _steps 0034  
                  pclath 000FFA                    tablat 000FF5      __size_of_LCDPutChar 0012  
     __size_ofi2_WaitLCD 0012              ?i2_ReadByte 0001                    status 000FD8  
         __CFG_HFOFST$ON 000000            WaitLCD@status 002A       __size_ofi2___awdiv 0084  
     __size_ofi2___awmod 0070           __CFG_PBADEN$ON 000000          __initialization 15B8  
           __end_of_main 18B2         __end_of_ReadByte 1768            i2_WriteNibble 1640  
                 ??_main 0034            __activetblptr 000002                ??_LCDInit 002C  
              ??_LCDGoto 002F      i2LCDWriteStr@string 0007         ___awdiv@dividend 0029  
                 ?_setup 0001            LCDGoto@column 0033        __end_ofi2_LCDGoto 1738  
                 i2l1430 1878                   i2l1610 12BA                   i2l1602 12A2  
                 i2l1606 12AC                   i2l1630 1462                   i2l1622 1448  
                 i2l1552 170E                   i2l1632 146A                   i2l1634 146E  
                 i2l1642 148C                   i2l1626 1454                   i2l1802 1120  
                 i2l1556 1718                   i2l1564 134A                   i2l1590 127A  
                 i2l1646 149A                   i2l1638 1482           __CFG_WDTEN$OFF 000000  
                 i2l1568 1386                   i2l1592 1282                   i2l1584 1264  
                 i2l1808 1192                   i2l1594 1286                   i2l1578 1254  
                 i2l1842 009C                   i2l1828 0062                   i2l1838 008C  
              ??_WaitLCD 002A           __CFG_PWRTEN$ON 000000           __CFG_XINST$OFF 000000  
              ??___awdiv 002D           __CFG_STVREN$ON 000000                ??___awmod 002D  
          ?i2_LCDPutChar 0001        i2WriteNibble@data 0001           ?i2_WriteNibble 0001  
       ___awdiv@quotient 002F          ___awmod@divisor 002B          ___awmod@counter 002D  
      __end_ofi2_WaitLCD 1886         __end_of_searched 11BC           i2___awdiv@sign 000C  
    __size_ofi2_ReadByte 0030             __pdataCOMRAM 0036        __end_ofi2___awdiv 12C4  
      __end_ofi2___awmod 14A4             __mediumconst 0000                   tblptrh 000FF7  
           LCDWriteStr@i 0033                   tblptrl 000FF6                   tblptru 000FF8  
         i2___awmod@sign 0006    __size_ofi2_show_debug 0010                ?_LCDClear 0001  
   __size_of_LCDWriteInt 0058     __size_of_LCDWriteStr 0080               __accesstop 0060  
__end_of__initialization 15EE       __size_of_WriteByte 001A            ___rparam_used 000001  
         __pcstackCOMRAM 0001           WriteNibble@cmd 002B             __pidataBANK0 1684  
         ??i2_LCDPutChar 0006             ??_LCDPutChar 002E            __end_of_setup 1512  
 __size_ofi2_LCDWriteInt 004E   __size_ofi2_LCDWriteStr 0080             i2_show_debug 1886  
           ?i2_WriteByte 0004                  ??_setup 0034             WriteByte@cmd 002D  
             ??_LCDClear 002E          __CFG_PLLCFG$OFF 000000                ?_ReadByte 0001  
     __end_of_LCDPutChar 1850             i2LCDGoto@row 0006       __size_of_pedometer 000C  
     __CFG_CCP2MX$PORTC1 000000            i2_LCDGoto$670 0009          ??i2_WriteNibble 0002  
     __CFG_CCP3MX$PORTB5 000000            ??_WriteNibble 002A        LCDWriteInt@column 00A2  
      LCDWriteInt@string 00A3             ?_synchronize 0001        __end_of_WriteByte 1812  
                _LCDInit 101E                  _LCDGoto 16C4               _flashlight 17DC  
                i2u57_40 164E                  i2u81_40 1380                  i2u81_47 1376  
                i2u82_40 13BC                  i2u82_47 13B2                  i2u58_48 1650  
                _PR2bits 000FBB                  i2u96_40 17E6                  i2u97_48 17E8  
          i2_LCDWriteInt 156A            i2_LCDWriteStr 1344             ??i2_ReadByte 0001  
             ??_ReadByte 0029                ?_searched 0001                  __Hparam 0000  
                _WaitLCD 1850                  __Lparam 0000                  ___awdiv 11BC  
                ___awmod 13C4               _init_debug 1798             __psmallconst 1000  
                __pcinit 15B8                  __ramtop 1000                  __ptext0 18AC  
                __ptext1 14A4                  __ptext2 1798                  __ptext3 182C  
                __ptext4 1512                  __ptext5 13C4                  __ptext6 11BC  
                __ptext7 12C4                  __ptext8 183E                  __ptext9 16C4  
           __size_of_ISR 00D4       __end_ofi2_ReadByte 1798                _T2CONbits 000FBA  
    __end_of_WriteNibble 1640         ___awmod@dividend 0029        __end_of_pedometer 18A2  
         ?i2_LCDWriteInt 000F           i2LCDWriteStr@i 000B           ?i2_LCDWriteStr 0007  
   end_of_initialization 15EE     __end_ofi2_LCDPutChar 1874            __Lmediumconst 0000  
              i2_LCDGoto 16FE               ??_searched 000F        LCDWriteStr@string 002F  
                postdec1 000FE5                  postinc0 000FEE         i2LCDPutChar@data 0006  
             _show_debug 182C         __CFG_FOSC$INTIO7 000000                i2_WaitLCD 1874  
              _TRISBbits 000F93                _TRISCbits 000F94                _TRISDbits 000F95  
            ?_flashlight 0001                i2___awdiv 1240                i2___awmod 1434  
       searched@max_time 0014     __size_ofi2_WriteByte 001A              _CCP1CONbits 000FBD  
             LCDGoto@row 002E           i2WriteByte@cmd 0005        __size_of_LCDClear 0020  
     i2___awdiv@dividend 0007               ?i2_LCDGoto 0006          WriteNibble@data 0029  
            ?_init_debug 0001          i2WaitLCD@status 0002              _WriteNibble 15FC  
          __pidataCOMRAM 18B2      start_initialization 15B8               ?i2_WaitLCD 0001  
     i2___awdiv@quotient 000D              __end_of_ISR 00DC     __size_of_synchronize 000A  
        ??i2_LCDWriteInt 0011          ??i2_LCDWriteStr 0009            ??_LCDWriteInt 0034  
          ??_LCDWriteStr 0031               ?i2___awdiv 0007               ?i2___awmod 0001  
      __size_of_ReadByte 0030          i2LCDGoto@column 000B      __size_of_flashlight 001C  
            __pdataBANK0 0060              ?_show_debug 0001                 ?_LCDInit 0001  
               ?_LCDGoto 002E            WriteByte@data 002C              __pbssCOMRAM 0034  
  __size_ofi2_LCDPutChar 0012            __pcstackBANK0 00A0                _WriteByte 17F8  
         LCDPutChar@data 002E      __size_of_init_debug 0024      __end_of_LCDWriteInt 156A  
    __end_of_LCDWriteStr 1344             searched@time 0016              ??i2_LCDGoto 0007  
               ?_WaitLCD 0001        __size_of_searched 00B6                __pintcode 0008  
               ?___awdiv 0029                 ?___awmod 0029         LCDWriteInt@value 00A1  
  __end_ofi2_WriteNibble 1684             i2_LCDPutChar 1862         __CFG_PRICLKEN$ON 000000  
            __smallconst 1000              ??i2_WaitLCD 0002               ?_WriteByte 002C  
            ??i2___awdiv 000B              ??i2___awmod 0005           __size_of_setup 006E  
       i2ReadByte@status 0001                _pedometer 1896                 _LCDClear 17BC  
               _LATBbits 000F8A                 _LATCbits 000F8B                 _LATDbits 000F8C  
    __size_of_show_debug 0012              _LCDGoto$670 0031                 i2u112_47 007C  
               i2u113_47 118A         __CFG_WDTPS$32768 000000         i2LCDWriteInt@row 000F  
       __size_of_LCDInit 00E8         __size_of_LCDGoto 003A        i2___awdiv@divisor 0009  
           ??_flashlight 0001        i2___awdiv@counter 000B              _LCDWriteInt 1512  
            _LCDWriteStr 12C4              _INTCON2bits 000FF1              _INTCON3bits 000FF0  
              copy_data0 15CC       i2___awmod@dividend 0001               ?_pedometer 0001  
               _ReadByte 1738               _CCPR1Lbits 000FBE                 __Hrparam 0000  
               __Lrparam 0000       __CFG_BOREN$SBORDIS 000000         __size_of_WaitLCD 0012  
      __CFG_P2BMX$PORTD2 000000       __end_of_flashlight 17F8             ??_init_debug 0034  
       __size_of___awdiv 0084             ?_WriteNibble 0029         __size_of___awmod 0070  
          ?i2_show_debug 0001               _ANSELBbits 000F39                searched@i 0012  
          ??i2_WriteByte 0005              ??_WriteByte 002D                 __ptext10 101E  
               __ptext11 17BC                 __ptext20 1896                 __ptext12 17F8  
               __ptext21 1886                 __ptext13 15FC                 __ptext30 1874  
               __ptext22 156A                 __ptext14 1850                 __ptext31 1768  
               __ptext23 1434                 __ptext15 1738                 __ptext24 1240  
               __ptext25 1344                 __ptext17 18A2                 __ptext26 1862  
               __ptext18 1106                 __ptext27 16FE                 __ptext19 17DC  
               __ptext28 1812                 __ptext29 1640           _kiwi_frequence 0060  
     __end_of_init_debug 17BC            __size_of_main 0006              _kiwi_length 0036  
               _searched 1106           ReadByte@status 0029                 int$flags 0037  
             _LCDPutChar 183E                 main@argc 00A6                 main@argv 00A8  
         ??i2_show_debug 0015             ??_show_debug 0034            ??_synchronize 0001  
      i2___awmod@divisor 0003        i2___awmod@counter 0005               _INTCONbits 000FF2  
  __end_ofi2_LCDWriteInt 15B8    __end_ofi2_LCDWriteStr 13C4                 intlevel2 0000  
            ??_pedometer 0015           LCDWriteInt@row 00A0      __end_ofi2_WriteByte 182C  
     __end_of_show_debug 183E        __CFG_T3CMX$PORTC0 000000      __end_of_synchronize 18AC  
             i2_ReadByte 1768  
